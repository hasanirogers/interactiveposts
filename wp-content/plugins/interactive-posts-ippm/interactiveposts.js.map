{"version":3,"file":"interactiveposts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAzBA;;AAgCA;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;;AAFA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA0BA;AACA;AAEA;AAAA;;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AADA;AACA;AACA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAeA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AAtCA;;;;;;;;;;;;;;;;;;;;;;ACjMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAhBA;;AA2BA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AADA;AAOA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAGA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AA9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;;AAEA;;;;;;;;;;;;;AAgDA;AACA;AAGA;;;AAnDA;AACA;AA6BA;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AATA;AAaA;;;;AA9CA;;AAAA;AAuDA;;;;;;;;;;;;;;;;;;;;;ACxDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;AACA;;AAEA;;;;;AAsEA;AAAA;;AAAA;;AACA;AACA;AACA;AAHA;AAIA;;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;;AACA;AAGA;AAAA;AAMA;AAAA;AAEA;AAAA;AAIA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AADA;AACA;AACA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAKA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AA1KA;AACA;AAgDA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAVA;AAeA;;;;AApEA;;AAAA;AA8KA;;;;;;;;;;;;;;;;;;;;;AChLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;AACA;;AAEA;;;;;AA4BA;AAAA;;AAAA;;AACA;AACA;AAFA;AAGA;;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AADA;AACA;AACA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAKA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;;AAxDA;AACA;AAUA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAPA;AAWA;;;;AA1BA;;AAAA;AA4DA;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AA1CA;AA8CA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAhSA;;AAoSA;;;;;;;;;;;;;;;;ACzSA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAtBA;AA2BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAjNA;;AAqNA;;;;;;;;;;;;;;;;ACvNA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AA/DA;AAoEA;;AAEA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAlOA;;AAsOA;;;;;;;;;;;;;;;;;;;ACxiNA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AA3oBA;;AA+oBA;;;;;;;;;;;;;;;;ACppBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAnCA;;AAuCA;;;;;;;;;;;;;;;;;;ACzCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAtEA;;AA0EA;;;;;;;;;;;;;;;;;AC5FA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAzCA;AA6CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAlJA;;AAsJA;;;;;;;;;;;;;;;;ACtKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAhEA;AAqEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvPA;;AA2PA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAlBA;AAsBA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AALA;;AAQA;AACA;;AAnHA;;;AAuHA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;AAlBA;AAsBA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AA1KA;;;AA8KA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAVA;AAeA;;AAEA;AACA;;AAGA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AAfA;;AAkBA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAvBA;AAyBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAlIA;;;AAsIA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAzBA;AA8BA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AA/FA;;;AAmGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAHA;AAUA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzHA;;AA4HA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AA9CA;AAmDA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AA7NA;;;AAiOA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AA1CA;AA8CA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAhSA;;;AAoSA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AA7BA;;;AAiCA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;AAxCA;;;AA4CA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;AAxCA;;;AA4CA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;AAxCA;;;AA4CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAcA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;AApDA;;;AAwDA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;AAxCA;;;AA4CA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AAaA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AA5CA;;;AAgDA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AA7BA;;;AAiCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAjDA;AAqDA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AANA;;AAaA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAGA;AACA;AAEA;AACA;AACA;AAEA;;AAIA;AACA;AACA;;AACA;AACA;AACA;AACA;AAHA;;AAOA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAreA;;;AAyeA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAtBA;AA2BA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAjNA;;;AAqNA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAtBA;AA2BA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAzGA;;;AA6GA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAvBA;AA2BA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;AACA;AACA;;AAvIA;;;AA2IA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AA3BA;AAgCA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArGA;;;AAyvCA;AA4CA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AA1MA;;;AA8MA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AA/DA;AAoEA;;AAEA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAlOA;;;AAsOA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAtCA;;;AA0CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAIA;AACA;AADA;AApBA;AAwBA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AApLA;;;AAwiNA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AA3oBA;;;AA+oBA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AA/BA;;;AAmhBA;AAqBA;;AAEA;AACA;;AAGA;AACA;AACA;;AAGA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApIA;;;AAwIA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAnCA;AAuCA;;AAEA;AACA;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/QA;;;AAmRA;AAEA;AACA;AACA;AACA;AAHA;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAvzDA;AA6DA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AAEA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnZA;;;AAuZA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AA3CA;AAgDA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AA7MA;;;AAiNA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AA1CA;AA8CA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAlNA;;;AAsNA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAnCA;AAwCA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3MA;;;AA+MA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAzBA;AA+BA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;AA1FA;;;AA8FA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AADA;AAnBA;AAuBA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AA3FA;;;AA+FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AA7CA;AAmDA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;AACA;AACA;AACA;;AAnKA;;;AAuKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAlBA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAlDA;;;AAsDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;;AAEA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;;AAMA;AACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AA9KA;;;AAkLA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAtBA;AA0BA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAtCA;;;AA0CA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AA3EA;AAgFA;;AAEA;AACA;;AAGA;AACA;AACA;AAEA;AACA;AACA;;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAOA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AArWA;;;AAyWA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAnCA;;;AAuCA;AAEA;AAEA;AAAA;AAAA;AAEA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAtEA;;;AA0EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AA5BA;AAgCA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAtGA;;;AA0GA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AA7CA;;;AAiDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;AAXA;AAeA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AA9EA;;AAiFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAjBA;AAqBA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AA/GA;;AAkvEA;AA4EA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AAtBA;;AAyBA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AApBA;;AAuBA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAhiBA;;;AAoiBA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AA1GA;AA+GA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;;;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AAjYA;;;AAqYA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAhDA;AAqDA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;AACA;AAHA;AAMA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAzNA;;;AA6NA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;AAKA;AACA;AACA;AACA;AACA;AADA;AA9CA;AAkDA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAxOA;;;AA4OA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAVA;AAcA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AArEA;;;AAyEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;AAzCA;AA6CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAlJA;;;AAsJA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AADA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAhEA;AAqEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvPA;;;AA2PA;;;;;;;;;;;;;;;;AC98TA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAHA;AAUA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzHA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AASA;AAmBA;;AAAA;AAEA;;AAGA;AACA;AACA;AACA;AAAA;AAFA;AAKA;AAGA;;AAGA;AA8CA;;AAAA;AAUA;AALA;AAAA;AAQA;AAGA;AAUA;;AAAA;AAsBA;;AAAA;AAQA;AAKA;AAIA;AAKA;AAEA;AACA;AAEA;AAAA;AAOA;;AAAA;AAeA;;AAEA;AAaA;;AAAA;AAGA;AASA;AAQA;AAQA;AAq7BA;;AAAA;AAAA;AAEA;AAAA;AAGA;;AAAA;AACA;AAGA;;AAAA;AACA;AAIA;AAAA;AAIA;;AAAA;AACA;AAGA;;AAAA;AACA;AACA;AACA;AAIA;;AAAA;AAGA;;AAAA;AAMA;AAEA;AAAA;AAGA;AACA;AAFA;AAMA;AAWA;AACA;AAUA;;AAAA;AAEA;AACA;AACA;AAGA;;AAAA;AAIA;;AAAA;AAEA;AAIA;AACA;AACA;AAOA;;AAAA;AASA;;AAAA;AAOA;;AAAA;AAEA;AAGA;AAgBA;;AAAA;AAEA;AAEA;AAEA;AACA;AAUA;;AAAA;AAAA;AAEA;AAAA;AAEA;;AAaA;AACA;AACA;AAAA;AAQA;;AAAA;AAEA;AAEA;AAOA;AAEA;AAAA;AAEA;AASA;AAAA;AAGA;AACA;AAFA;AAMA;AAOA;AAAA;AAIA;AAaA;;AAAA;AAGA;AAyCA;;AAAA;AAUA;AACA;AAAA;AAAA;AAGA;AAQA;;AAAA;AAAA;AAGA;AAeA;;AAAA;AAGA;;AAIA;AACA;AACA;AAIA;AACA;;AASA;AAGA;;AAAA;AACA;AAAA;AAGA;AAGA;AANA;AAUA;AAGA;AAbA;AAAA;AAAA;AAAA;AAuBA;;AAAA;AACA;AAOA;AACA;AAAA;AAJA;AA7hDA;;AAAA;AAAA;AAAA;AAAA;AAqGA;AADA;AApGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0UA;AAAA;AAuEA;;AAAA;AAAA;AAGA;AAKA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAFA;AAMA;AACA;AAFA;AAKA;AAiBA;AAbA;AAIA;AACA;AAFA;AAEA;AAoBA;AAMA;AACA;AAFA;AAQA;AACA;AACA;AACA;AAFA;AAEA;AAMA;AAAA;AAEA;AACA;AACA;AAFA;AAOA;AAAA;AAQA;AAQA;AAGA;AAOA;AAcA;AAOA;;AAGA;AAQA;AAEA;AAGA;AAGA;AAEA;AAEA;AAAA;AASA;AA0BA;;AAAA;AAIA;AAiCA;AA5BA;AACA;AAHA;AASA;AAgBA;AASA;AAKA;AAAA;AAAA;AAMA;AAKA;AAGA;AAGA;AAMA;AAMA;AAEA;AAAA;AAUA;AAEA;AACA;AAAA;AAKA;AAGA;AAEA;;AASA;AAEA;AAGA;AAGA;AAAA;AAaA;;AAAA;AAAA;AAUA;AAqLA;AAEA;AACA;AAWA;AAEA;AAAA;AAGA;AAgBA;;AAAA;AAGA;AAiEA;AAwCA;AAMA;AAIA;AAxiCA;AA0kCA;AAAA;AAYA;;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AAEA;AAIA;AAGA;AAAA;AAMA;AAEA;AAKA;AAEA;AAAA;AAEA;AAIA;AAGA;;AAAA;AACA;AAAA;AAKA;AACA;AAIA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAPA;AAWA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAPA;AAUA;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;AC/pCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAEA;AAEA;;AACA;AAKA;AACA;;AACA;AAGA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAiEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAFA;;AAKA;AACA;AACA;AACA;AAEA;AACA;AALA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAjBA;;AAqBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAlCA;AAoCA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AAJA;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;;AAPA;AAcA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAVA;AAlDA;;AAgEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AADA;AAGA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AADA;AAGA;AAdA;AAjBA;AAkCA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAlBA;AAoBA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAlBA;AAoBA;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;;AAMA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAnBA;AAuBA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AALA;;AAQA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAlBA;AAolBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAKA;AACA;AAEA;AACA;;;;;;;;;;;AClrFA;;AAEA;AAGA;AACA;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;;AACA;AAEA;AACA;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;;AACA;AAGA;AACA;AACA;;AACA;;AACA;;AACA;AAGA;;;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAGA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAOA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAGA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAGA;;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;AACA;AACA;AAEA;AAKA;AAAA;AAGA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;;;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AAEA;AAEA;;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AAGA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;AACA;AACA;AACA;AAGA;;;AACA;AAEA;AAGA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;;AACA;AAGA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AAAA;AAAA;AACA;;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;;AAEA;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAGA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AArMA;AAyMA;AACA;AACA;;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjvBA;AACA;;AAGA;;AAGA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;;;;;;;;;;;ACrFA;;;;;;;;;;;;;;;;ACAA;;;;AAIA;AAIA;AAQA;AAKA;;;;;AAKA;;AACA;AAKA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;;;AACA;AAOA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;AACA;AAOA;AACA;AAuBA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;AACA;AAuFA;;AAhFA;AACA;AACA;AACA;;;AAEA;AACA;AAOA;AAEA;AACA;;AACA;AAEA;;;AAGA;;;AACA;AACA;AACA;AAEA;;;AAGA;;;AACA;AACA;AACA;AAEA;;;;;;;AAOA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AAAA;AAAA;AAEA;;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAvFA;;AAMA;AAoFA;AAIA;AAAA;;AAMA;AAEA;AACA;;;;;;;;;;;;;;;;AC5RA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;ACJA;;;;AAIA;;AAEA;;AAEA;AACA;AAsBA;AAEA;AAEA;;;;;;AAMA;;AACA;AAOA;AANA;AACA;;AAUA;AACA;AAGA;;AACA;AACA;AACA;AAGA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AA/CA;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;;;;;;AAMA;;;AACA;AAOA;;;;;;;AAOA;;AACA;AAIA;AAOA;AAKA;AAEA;;;;;;;;AAQA;;AACA;AAIA;AACA;AAGA;AACA;AACA;;AAEA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AClMA;;;;AAIA;;;;AAEA;;;;AAIA;;;AAEA;AAWA;AAMA;AAEA;AAOA;AAEA;AAIA;AACA;AACA;;AACA;AAIA;;AAIA;AACA;AACA;AACA;;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AAKA;;AAEA;AACA;AAIA;;AAKA;AACA;AACA;AACA;AAbA;AAeA;AAmCA;;;;AAIA;;;AACA;AAEA;;AAEA;AACA;AACA;;AACA;AAEA;AADA;AAIA;AAGA;;;;;AAKA;;AACA;;AACA;;AAkJA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;AAWA;AACA;;AAEA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAlBA;;AAoBA;AACA;;AAvCA;AA8CA;;;AAGA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;AAKA;;AACA;AASA;;;;;AAKA;;AACA;AAigBA;AACA;AA3CA;AAKA;;;;AAIA;;AACA;AAEA;;;;AAIA;;AACA;AAeA;;AAEA;;AACA;;AASA;AACA;AA/cA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;AACA;;;AACA;;AACA;AACA;AAqGA;;;;AAIA;;;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAGA;;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;AACA;AAKA;AACA;AACA;AACA;AACA;;AACA;AACA;AAGA;AACA;AAKA;;AACA;AACA;AAjBA;AAmBA;AAEA;;;;;;;;;;;;;AAaA;;;AACA;AACA;AACA;AAEA;;;;;AAKA;;;AACA;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AAMA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AAcA;;;;;;;;;;;;;AAaA;;;AACA;AAGA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AASA;;;AAGA;;;AACA;AAIA;AACA;AAOA;AAiDA;;;;;AAKA;;;AACA;;;AACA;AAGA;;AACA;AAEA;;;AACA;AACA;AAGA;AAEA;;;;;;;;AAQA;;;AACA;;;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;;;AAGA;;;AACA;AAAA;AAEA;;;AACA;AACA;AAEA;;;;;;;;;;;AAWA;;;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAQA;;;AACA;;;AACA;AAKA;AAIA;AACA;AAEA;;;;AAIA;;;AACA;AAAA;;;AAEA;AAEA;AAIA;;AACA;AACA;AAAA;;AAAA;AAAA;AACA;AAEA;;;;;AAKA;;;AACA;AAEA;;;;;AAKA;;;AACA;;;AACA;AAAA;;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;AAWA;;;AACA;AAKA;AACA;;AAEA;;;AAKA;;AAGA;AACA;AAGA;;AACA;AAOA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;;;AACA;;;AACA;AAEA;;AACA;AAEA;;;AACA;AACA;AACA;AACA;;AAOA;;AAEA;;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;;;AACA;AAKA;;AAEA;AACA;AAGA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;;;AACA;AAGA;AAEA;;AAEA;;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;;AACA;AACA;AACA;;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AAgBA;;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AAgBA;;;AACA;AAAA;AAEA;AACA;;;AACA;AACA;AACA;;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AACA;AACA;AASA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AAAA;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;;;AACA;AAGA;;;AACA;;;AACA;AAAA;;AAAA;AAAA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AAOA;AAQA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAeA;;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;AACA;AACA;AACA;AAEA;;;;;;;AAOA;;;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AACA;AACA;AAEA;;;;;;;;;AASA;;;AACA;AAEA;;;;;;;;;;;;;;;AAeA;;;AACA;;AAnkCA;AA6GA;AAHA;;AAEA;;AACA;AAEA;;;;;AAKA;;AACA;AA6BA;;;;;AAKA;;AACA;AAwPA;;;;;;;;;AASA;;AACA;AAAA;AAAA;;AA6qBA;AAAA;AAAA;;AAGA;AACA;AACA;;AACA;AACA;AAGA;AACA;AACA;;AACA;AAIA;;AACA;AACA;AACA;AACA;;AACA;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA;;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1/CA;;;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;;AACA;AACA;AACA;AACA;AA+BA;;AACA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;;AACA;AAAA;;AAaA;;AAEA;;AACA;AAAA;AAAA;AAEA;AA8FA;AA5FA;;AAEA;;;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;;;;;;AAMA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;;;AACA;;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;;;AACA;;;AACA;AACA;AACA;AAEA;;;;;;AAMA;;;AACA;AACA;AACA;;AA/GA;AACA;;;;;;AAMA;;AACA;;AAGA;;AAwGA;AAAA;AAAA;;AAGA;AAGA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AAEA;AAMA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;;;;;;;;;;;;;;;;;AAiBA;;;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAVA;AAcA;;AACA;;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnTA;;;;AAIA;;;AAEA;AASA;AAAA;AAAA;AAIA;AAEA;AAOA;;;;AAIA;;AACA;AAGA;AACA;AACA;AAFA;AAQA;;AAEA;;AACA;AAMA;AAGA;;AAEA;;AACA;AAEA;AAEA;;AAEA;;AACA;AAEA;AAEA;;;;;;;AAOA;;AACA;;AAGA;AAEA;;;;;;;;;;;AAWA;;;AACA;;;AAKA;AAEA;;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;;AACA;AAEA;AACA;;AACA;;AACA;AAKA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;;;;;;;;;;;;;;;AAeA;;AACA;AAKA;;AACA;AACA;AAGA;;AACA;AAEA;;;;;;;;;;AAUA;;AACA;AAGA;;;;;;;;;;;;;AAaA;;AACA;AAEA;;;;AAIA;;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACnOA;;;;AAIA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAsCA;;;AAGA;;AACA;AAGA;AACA;AACA;AAHA;AAMA;;;;AAIA;;AACA;AAkBA;;;AAGA;AACA;AACA;AAEA;;;AACA;AAKA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;AAIA;AACA;AACA;;AA5CA;;;;;;;;;;;;;;;;AChGA;;;;AAIA;AAEA;AAEA;;;;;AAKA;;AACA;;;;;;;;;;;;;;;;;;ACdA;;;;AAIA;AAEA;AACA;AAOA;;AAEA;AACA;AACA;;AACA;AAOA;AAGA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;;AAhDA;AAmDA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;AACA;;;;;;;;;;;;;;;;;;;;AC3FA;;;;AAIA;;;AAKA;AACA;AACA;AA8KA;;;;AAIA;;AACA;AAEA;;AAEA;AACA;AACA;;AACA;AAEA;AADA;AAIA;AAGA;AACA;;AACA;AAEA;;AAEA;AACA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAIA;;AAEA;AAOA;AAEA;;;;;;;AAOA;;AACA;AAEA;AADA;;AA6CA;;AACA;AAMA;;;AACA;AACA;AACA;AACA;;AACA;AACA;AAIA;;AACA;AACA;AAEA;;AAEA;;;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;;;AACA;AAGA;AACA;AACA;;AACA;;AAGA;AAGA;;AACA;AAEA;;AAGA;;AAIA;;AAEA;;AACA;AAGA;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAKA;;AACA;AAEA;;AACA;AACA;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0CA;;;AAGA;;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;;;;;;;;;;;;AAYA;;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;AACA;AAEA;;;AAGA;;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;;AACA;AAEA;;;;;;AAMA;;AACA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AACA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;AAQA;AACA;AAEA;;AACA;AAMA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AAEA;AACA;;AAEA;AAEA;AAFA;AAOA;AAkBA;;;;;;;;;;;AAWA;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAGA;AACA;;AACA;AAGA;;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAGA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA;AAEA;AAaA;;AAEA;AAIA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;;;;;;;;;;;AAWA;AAGA;;AACA;AACA;;;AAEA;AAMA;;AAIA;AAMA;AAEA;AAAA;AAAA;AAAA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAIA;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAcA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAIA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;AAGA;;;AACA;AACA;AACA;AACA;AACA;;AAxKA;;AAwLA;;;AAIA;AAGA;;;AACA;AACA;AACA;;AACA;AAIA;AAGA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AACA;AAMA;;AACA;AACA;AAEA;;;AAGA;;;AACA;AAWA;AARA;AACA;AAIA;;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AAGA;;;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA;AACA;AAMA;AACA;AAOA;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;AAQA;AACA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAjGA;;AAiJA;AA4CA;;;AA3CA;AAEA;AA6BA;;AACA;;AACA;AAgBA;AACA;AACA;AACA;AAEA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;;AAtCA;AAAA;AAEA;AACA;;;AACA;AACA;AAmCA;;;;;;;;;;;;;;;;;AAiBA;;;AACA;AACA;AACA;;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;;AACA;AACA;AAEA;;;AAGA;;;AACA;AACA;AACA;AAEA;;;AAGA;;;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;AAOA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AACA;AACA;;AACA;AAIA;;AACA;AACA;;AACA;AACA;AACA;AAQA;AACA;AAIA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAIA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;;AACA;AAEA;AACA;AACA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;AACA;AACA;;AAEA;AACA;;;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;AAQA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;AASA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;AASA;;AACA;AACA;AACA;;AAGA;;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAGA;;;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;;AACA;;AACA;AACA;;AAEA;AACA;AACA;;;AAKA;AACA;AACA;AAEA;;;;;;;;;;AAUA;;;AACA;;;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AACA;;;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;AAxZA;;AAmbA;AAoCA;AAnCA;AAeA;;AACA;AAKA;;AACA;AAoBA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AA7BA;AACA;AACA;;;AAGA;AACA;AACA;AAwBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;AACA;AAMA;;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AAEA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAIA;AACA;;AA7JA;;AAiKA;AAAA;;AACA;AAwBA;AAtBA;;;AACA;AACA;AACA;AACA;AAKA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;AAQA;AACA;;AAxBA;AA4BA;AACA;AACA;;;AACA;;AAKA;AAAA;;AACA;AAoBA;AAlBA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;AAOA;AACA;AAIA;AACA;AACA;AACA;;AApBA;;AAsCA;AAGA;AAOA;AATA;;AAWA;AACA;AAKA;AACA;AAGA;;AACA;;;AACA;;;AAIA;;AAEA;AACA;AACA;;AACA;AAGA;;AACA;AAUA;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;AAUA;AACA;AAKA;;AACA;AACA;AACA;AACA;AACA;AAKA;;AACA;AACA;;AAEA;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAxFA;;AA4FA;AAiBA;AACA;AAjBA;AAWA;;AACA;AASA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;AAvCA;AA0CA;;;;;;;;;;;;;;;;;AAiBA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;;AAqBA;AAGA;AAGA;;AACA;;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;AEJA;AACA;AACA;AACA;AACA","sources":["webpack://iposts/./blocks/assets-manager.js","webpack://iposts/./blocks/dependencies-manager.js","webpack://iposts/./components/ippm-alert.js","webpack://iposts/./components/ippm-package.js","webpack://iposts/./components/ippm-packages.js","webpack://iposts/./index.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-checkbox/kemet-checkbox.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-combo/kemet-combo.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-field/kemet-field.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-input/kemet-input.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-sortable/kemet-sortable-item.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-sortable/kemet-sortable.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-upload/kemet-upload-file.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-upload/kemet-upload-file.loaders.styles.js","webpack://iposts/./node_modules/kemet-ui/dist/components/kemet-upload/kemet-upload.js","webpack://iposts/./node_modules/kemet-ui/dist/kemet-components.js","webpack://iposts/./node_modules/kemet-ui/dist/utilities/controllers/forms.js","webpack://iposts/../../../../../../../../Users/stefansteinhart/Development/Web/ios-html5-drag-drop-shim/src/index.ts","webpack://iposts/./node_modules/react/cjs/react.development.js","webpack://iposts/./node_modules/react/index.js","webpack://iposts/./node_modules/regenerator-runtime/runtime.js","webpack://iposts/./scripts/upload.js","webpack://iposts/./index.scss","webpack://iposts/../src/create-component.ts","webpack://iposts/../src/index.ts","webpack://iposts/../src/css-tag.ts","webpack://iposts/../src/reactive-element.ts","webpack://iposts/../src/lit-element.ts","webpack://iposts/../src/directive-helpers.ts","webpack://iposts/../src/directive.ts","webpack://iposts/../../src/directives/if-defined.ts","webpack://iposts/../../src/directives/live.ts","webpack://iposts/../src/lit-html.ts","webpack://iposts/webpack/bootstrap","webpack://iposts/webpack/runtime/compat get default export","webpack://iposts/webpack/runtime/define property getters","webpack://iposts/webpack/runtime/global","webpack://iposts/webpack/runtime/hasOwnProperty shorthand","webpack://iposts/webpack/runtime/make namespace object","webpack://iposts/webpack/runtime/node module decorator","webpack://iposts/webpack/before-startup","webpack://iposts/webpack/startup","webpack://iposts/webpack/after-startup"],"sourcesContent":["import * as React from 'react';\nimport { createComponent } from '@lit-labs/react';\n\nimport KemetFieldClass from 'kemet-ui/dist/components/kemet-field/kemet-field.js';\nimport KemetInputClass from 'kemet-ui/dist/components/kemet-input/kemet-input.js';\nimport KemetComboClass from 'kemet-ui/dist/components/kemet-combo/kemet-combo.js';\nimport KemetSortableClass from 'kemet-ui/dist/components/kemet-sortable/kemet-sortable.js';\nimport KemetSortableItemClass from 'kemet-ui/dist/components/kemet-sortable/kemet-sortable-item.js';\nimport KemetCheckboxClass from 'kemet-ui/dist/components/kemet-checkbox/kemet-checkbox.js';\n\nimport '../index.scss';\n\nconst { registerBlockType } = wp.blocks;\nconst { InspectorControls } = wp.blockEditor;\nconst { PanelBody } = wp.components;\nconst { useState, useEffect } = wp.element;\n\nconst KemetField = createComponent(React, 'kemet-field', KemetFieldClass);\nconst KemetInput = createComponent(React, 'kemet-input', KemetInputClass);\nconst KemetCombo = createComponent(React, 'kemet-combo', KemetComboClass, { onSelection: 'kemet-combo-selection' });\nconst KemetSortable = createComponent(React, 'kemet-sortable', KemetSortableClass, { onDragEnd: 'kemet-sortable-drag-end' });\nconst KemetSortableItem = createComponent(React, 'kemet-sortable-item', KemetSortableItemClass);\nconst KemetCheckbox = createComponent(React, 'kemet-checkbox', KemetCheckboxClass, { onCheckboxChange: 'kemet-checkbox-change'});\n\nconst styles = {\n  button: {\n    cursor: 'pointer',\n    color: 'var(--wp-admin-theme-color)',\n    fontSize: '1.25rem',\n    margin: '0.25rem 0 0 0',\n    padding: '0',\n    position: 'relative',\n    top: '0.1rem',\n    left: '0.2rem',\n    border: 'none',\n    background: 'none',\n  },\n  sortableItem: {\n    display: 'flex',\n    gap: '0.5rem',\n    flexDirection: 'column',\n  },\n  sortableLabel: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  inspectorControls: {\n    marginBottom: '40px',\n  },\n  toggle: {\n    '--kemet-toggle-height': '1rem',\n    '--kemet-toggle-width': '2rem',\n    '--kemet-toggle-handle-diameter': '1rem',\n  }\n};\n\nconst AssetsManager = (props) => {\n  const [packages, setPackages] = useState([]);\n\n  const getAssets = async (event) => {\n    const regExp = /(?:\\.([^.]+))?$/;\n    const assets = await fetch(`http://interactiveposts.local/wp-json/ippm/v1/package/${event.detail.text}`).then(response => response.json());\n\n    const cssFiles = assets.filter((asset) => regExp.exec(asset)[1] === 'css');\n    const jsFiles = assets.filter((asset) => regExp.exec(asset)[1] === 'js');\n\n    const cssAssets = cssFiles.map(file => {\n      return {\n        filename: file,\n        isJSModule: false,\n      }\n    });\n\n    const jsAssets = jsFiles.map(file => {\n      return {\n        filename: file,\n        isJSModule: false,\n      }\n    });\n\n    props.setAttributes({ currentPackage: event.detail.text });\n    props.setAttributes({ cssAssets: cssAssets });\n    props.setAttributes({ jsAssets: jsAssets });\n  }\n\n  const sortFiles = (event, type) => {\n    const files = [];\n\n    event.detail.all.forEach(item => {\n      const isJSModule = item.querySelector('kemet-checkbox')?.checked || false;\n\n      files.push({\n        filename: item.innerText,\n        isJSModule,\n      });\n    });\n\n    props.setAttributes({ [type]: files });\n  }\n\n  const removePackage = () => {\n    props.setAttributes({ cssAssets: [] });\n    props.setAttributes({ jsAssets: [] });\n    props.setAttributes({ currentPackage: 'none' });\n  }\n\n  const checkboxChange = (event, index) => {\n    // if you don't stringify, wordpress will not detect a change in setting the attribute\n    // reference: https://stackoverflow.com/questions/61778389/why-doesnt-a-mutated-array-of-objects-save-in-gutenberg\n    const jsAssets = JSON.parse(JSON.stringify(props.attributes.jsAssets));\n\n    jsAssets[index].isJSModule = event.target.checked;\n    props.setAttributes({ jsAssets: jsAssets });\n  }\n\n  const Asset = (props) => {\n    return (\n      <KemetSortableItem style={styles.sortableItem}>\n        <span style={styles.sortableLabel}>{props.children}</span>\n        {props.type === 'js' && <KemetCheckbox label=\"Enable module type.\" checked={props.isJSModule} onCheckboxChange={(event) => checkboxChange(event, props.index)} />}\n      </KemetSortableItem>\n    );\n  }\n\n  const CSSAssets = (props) => {\n    if (props.attributes.cssAssets.length > 0) {\n      return (\n        <div>\n          <h4>CSS Assets</h4>\n          <KemetSortable onDragEnd={event => sortFiles(event, 'cssAssets')}>\n            {props.attributes.cssAssets.map((file, index) => {\n              return (\n                <Asset key={index} index={index} filename={file.filename} isJSModule={props.attributes.cssAssets[index].isJSModule} type=\"css\">\n                  <strong>{file.filename}</strong>\n                </Asset>\n              );\n            })}\n          </KemetSortable>\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  const JSAssets = (props) => {\n    if (props.attributes.jsAssets.length > 0) {\n      return (\n        <div>\n          <h4>JS Assets</h4>\n          <KemetSortable onDragEnd={event => sortFiles(event, 'jsAssets')}>\n            {props.attributes.jsAssets.map((file, index) => {\n              return (\n                <Asset key={index} index={index} filename={file.filename} isJSModule={props.attributes.jsAssets[index].isJSModule} type=\"js\">\n                  <strong>{file.filename}</strong>\n                </Asset>\n              );\n            })}\n          </KemetSortable>\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  useEffect(async () => {\n    const response = await fetch('/wp-json/ippm/v1/packages').then(response => response.json());\n    setPackages(response);\n  }, []);\n\n  return (\n    <section className=\"ippm-assets-manager\">\n      <div>\n        <KemetField label={\"Select a package.\"}>\n          <KemetInput slot=\"input\" name=\"package\" value={props.attributes.currentPackage === 'none' ? null : props.attributes.currentPackage } placeholder=\"Start typing a package name.\" />\n          <KemetCombo slot=\"component\" options={packages} onSelection={event => getAssets(event)} />\n        </KemetField>\n        <span>\n          Current Package: {props.attributes.currentPackage}\n          {\n            props.attributes.currentPackage !== 'none'\n              ? <button style={styles.button} onClick={() => removePackage()}>&times;</button>\n              : null\n          }\n        </span>\n      </div>\n      <CSSAssets attributes={props.attributes} setAttributes={props.setAttributes} />\n      <JSAssets attributes={props.attributes} setAttributes={props.setAttributes} />\n    </section>\n  );\n}\n\nregisterBlockType('ippm/assets-manager', {\n  title: 'IPPM: Assets',\n  description: 'Add CSS and or JavaScript to a post.',\n  icon: 'format-image',\n  category: 'design',\n\n  // custom attributes\n  attributes: {\n    cssAssets: {\n      type: 'array',\n      default: [],\n    },\n    jsAssets: {\n      type: 'array',\n      default: [],\n    },\n    currentPackage: {\n      type: 'string',\n      default: 'none'\n    }\n  },\n\n  edit({ className, attributes, setAttributes }) {\n    return ([\n      <InspectorControls style={styles.inspectorControls}>\n        <PanelBody>\n          <AssetsManager attributes={attributes} setAttributes={setAttributes} />\n        </PanelBody>\n      </InspectorControls>,\n      <section>\n        <h3>Asset Management</h3>\n        <p>Select the block then use the controls to the right to add assets.</p>\n      </section>\n    ]);\n  },\n\n  save() {\n    return null;\n  }\n});\n","const { registerBlockType } = wp.blocks;\nconst { RichText, InspectorControls, ColorPalette, MediaUpload, URLInput } = wp.blockEditor;\nconst { PanelBody, IconButton } = wp.components;\nconst { PlainText } = wp.editor;\n// const { useState } = wp.element;\n\nconst styles = {\n  heading: {\n    margin: '1rem 0'\n  },\n  row: {\n    display: 'grid',\n    gap: '1rem',\n    alignItems: 'center',\n    gridTemplateColumns: '30% 1fr auto',\n    marginBottom: '0.5rem'\n  },\n  input: {\n    padding: '0.5rem 1rem',\n    border: '1px solid gray',\n    whiteSpace: 'nowrap',\n  },\n  button: {\n    fontSize: '3rem',\n    lineHeight: '0.5',\n    cursor: 'pointer',\n    border: 'none',\n    padding: '0',\n    margin: '0 0 0 -0.5rem',\n    background: 'none'\n  }\n};\n\nconst Dependency = (props) => {\n  const handleChange = (name, url, index) => {\n    const dependencies = [...props.attributes.dependencies];\n    if (name) dependencies[index].name = name;\n    if (url) dependencies[index].url = url;\n    props.setAttributes({ dependencies });\n  };\n\n  const handleRemoveLocation = (index) => {\n      const dependencies = [...props.attributes.dependencies];\n      dependencies.splice(index, 1);\n      props.setAttributes({ dependencies });\n  };\n\n  return (\n    <div style={styles.row}>\n      <div>\n        <PlainText\n          className=\"dependency-name\"\n          placeholder=\"Dependency Name\"\n          value={ props.attributes.dependencies[props.index].name }\n          onChange={ (name) => handleChange(name, null, props.index) }\n          style={styles.input}\n        />\n      </div>\n      <div>\n        <PlainText\n          className=\"dependency-url\"\n          placeholder=\"Dependency URL\"\n          value={ props.attributes.dependencies[props.index].url }\n          onChange={ (url) => handleChange(null, url, props.index) }\n          style={styles.input}\n        />\n      </div>\n      <div>\n        <button style={styles.button} onClick={() => handleRemoveLocation( props.index )}>&times;</button>\n      </div>\n    </div>\n  );\n}\n\nregisterBlockType('ippm/dependencies-manager', {\n  title: 'IPPM: Dependencies',\n  description: 'Add JavaScript dependencies to a post.',\n  icon: 'format-image',\n  category: 'design',\n\n  // custom attributes\n  attributes: {\n    dependencies: {\n      type: 'array',\n      default: [{ name: '', url: '' }]\n    },\n  },\n\n  edit({ className, attributes, setAttributes }) {\n    const handleAddDependency = () => {\n        const dependencies = [...attributes.dependencies];\n        dependencies.push({ name: '', url: '' });\n        setAttributes({ dependencies });\n    };\n\n    let dependencyFields;\n\n    if (attributes.dependencies.length) {\n      dependencyFields = attributes.dependencies.map((dependency, index) => {\n          return <Dependency key={index} index={index} className={className} attributes={attributes} setAttributes={setAttributes} />;\n      } );\n    }\n\n\n    return ([\n      <InspectorControls style={{ marginBottom: '40px' }}>\n        <PanelBody>\n          <p>IPPM will create a import map of the dependencies you add here.</p>\n        </PanelBody>\n      </InspectorControls>,\n      <section>\n        <h3 style={styles.heading}>Dependencies</h3>\n        {dependencyFields}\n        <button className=\"button\" onClick={handleAddDependency}>Add Dependency</button>\n      </section>\n    ]);\n  },\n\n  save() {\n    return null;\n  }\n});\n","import { html, css, LitElement } from 'lit';\n\nexport default class IPPMAlert extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: none;\n          padding: 1rem;\n          margin: 1rem 1rem 1rem 0rem;\n          position: fixed;\n          top: 2rem;\n          z-index: 9;\n          background-color: #ffffff;\n        }\n\n        :host([opened]) {\n          display: block;\n        }\n\n        :host([status='success']) {\n          border-left: 3px solid var(--ippm-blue);\n        }\n\n        :host([status='error']) {\n          border-left: 3px solid var(--ippm-red);\n        }\n\n        :host([status='warning']) {\n          border-left: 3px solid var(--ippm-orange);\n        }\n      `,\n    ];\n  }\n  static get properties() {\n    return {\n      opened: {\n        type: Boolean,\n        reflect: true,\n      },\n      status: {\n        type: String,\n        reflect: true,\n      },\n      message: {\n        type: String,\n      }\n    }\n  }\n\n  render() {\n    return html`\n      ${this.message}\n    `;\n  }\n}\n\nwindow.customElements.get('ippm-alert') || window.customElements.define('ippm-alert', IPPMAlert);\n","import { html, css, LitElement } from 'lit';\nimport 'kemet-ui';\n\nexport default class IPPMPackage extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n          font-size: 1rem;\n          padding: 1rem 1.25rem;\n          background: #ffffff;\n          border: 1px dashed var(--ippm-blue);\n        }\n\n        h3 {\n          font-size: 1rem;\n          margin: 0;\n          font-weight: normal;\n        }\n\n        ul {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          grid-auto-rows: 1rem;\n          gap: 1rem;\n          height: 100%;\n          margin: 0.5rem 0;\n          padding: 0.5rem 0;\n          list-style: none;\n          border-top: 1px dashed gray;\n          border-bottom: 1px dashed gray;\n        }\n\n        a {\n          font-size: 90%;\n          text-decoration: none;\n          color: var(--ippm-blue);\n        }\n\n        kemet-button {\n          --kemet-button-padding: 0.75rem;\n          font-size: 90%;\n          align-self: flex-start;\n        }\n\n        kemet-modal > div {\n          padding: 1.5rem 2rem;\n          background: white;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      url: {\n        type: String,\n      },\n      package: {\n        type: String,\n      },\n      assets: {\n        type: Array,\n      },\n      ippmData: {\n        type: Object,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.packages = '';\n    this.assets = [];\n  }\n\n  firstUpdated() {\n    this.domain = window.location.origin;\n    this.modal = this.shadowRoot.querySelector('kemet-modal');\n  }\n\n  updated(changedProps) {\n    if (changedProps.has('package')) {\n      this.getAssets();\n    }\n  }\n\n  render() {\n    return html`\n      <h3>${this.package}</h3>\n      ${this.makeAssetsList()}\n      <kemet-button @click=${() => this.confirmDelete()}>\n        <kemet-icon icon=\"trash\"></kemet-icon> Delete Package\n      </kemet-button>\n      <kemet-modal>\n        <div>\n          <p>Are you sure you want to delete <strong>${this.package}</strong>?</p>\n          <kemet-button @click=${() => this.requestDelete()}>Yes, delete it.</kemet-button>\n          &nbsp;\n          <kemet-button @click=${() => this.closeModal()}>No, keep package.</kemet-button>\n        </div>\n      </kemet-modal>\n    `;\n  }\n\n  async getAssets() {\n    const assets = await fetch(`${this.domain}/wp-json/ippm/v1/package/${this.package}`).then(response => response.json());\n    this.assets = assets;\n  }\n\n  makeAssetsList() {\n    if (this.assets.length > 0) {\n      const assetList = this.assets.map(asset => {\n        return html`<li><a href=\"${this.url}${this.package}/${asset}\" target=\"_blank\">${asset}</a></li>`;\n      });\n\n      return html`<ul>${assetList}</ul>`;\n    }\n\n    return html`<p>There are no assets in this package.</p>`;\n  }\n\n  confirmDelete() {\n    this.modal.opened = true;\n  }\n\n  requestDelete() {\n    this.modal.opened = false;\n\n    const url = this.ippmData.ajaxURL;\n    const formData = new FormData;\n\n    formData.append('action', 'ippm_package_delete');\n    formData.append('security', this.ippmData.security);\n    formData.append('package', this.package);\n\n    const options = {\n      body: formData,\n      method: 'POST',\n    };\n\n    fetch(url, options)\n      .then(response => response.json())\n      .then((response) => {\n        const alertElement = document.querySelector('ippm-alert');\n\n        if (response.code === 1) {\n          const packagesElement = document.querySelector('ippm-packages');\n\n          packagesElement.getPackages();\n          alertElement.opened = true;\n          alertElement.status = 'success';\n          alertElement.message = 'Package deleted!';\n\n          setTimeout(() => {\n            alertElement.opened = false;\n          }, 3000);\n        } else {\n          alertElement.opened = true;\n          alertElement.status = response.status;\n          alertElement.message = response.message;\n\n          setTimeout(() => {\n            alertElement.opened = false;\n          }, 3000);\n        }\n    });\n  }\n\n  closeModal() {\n    this.modal.opened = false;\n  }\n}\n\ncustomElements.get('ippm-package') || customElements.define('ippm-package', IPPMPackage);\n","import { html, css, LitElement } from 'lit';\nimport './ippm-package.js';\n\nexport default class IPPMPackages extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 1rem;\n          margin-top: 1rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      url: {\n        type: String\n      },\n      packages: {\n        type: Array,\n      },\n      ippmData: {\n        type: Object,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.packages = [];\n  }\n\n  firstUpdated() {\n    this.domain = window.location.origin;\n    this.getPackages();\n  }\n\n  render() {\n    return html`${this.makePackageList()}`;\n  }\n\n  async getPackages() {\n    const packages = await fetch(`${this.domain}/wp-json/ippm/v1/packages`).then(response => response.json());\n    this.packages = packages;\n  }\n\n  makePackageList() {\n    if (this.packages.length > 0) {\n      const packageList = this.packages.map(thePackage => {\n        return html`<ippm-package url=${encodeURIComponent(this.url)} package=${thePackage} .ippmData=${this.ippmData}></ippm-package>`;\n      });\n\n      return html`${packageList}`;\n    }\n\n    return html`<p><strong>There are currently no packages available.</strong></p>`;\n  }\n}\n\ncustomElements.get('ippm-packages') || customElements.define('ippm-packages', IPPMPackages);\n","import './blocks/assets-manager.js';\nimport './blocks/dependencies-manager.js';\nimport './components/ippm-packages.js';\nimport './components/ippm-alert.js';\nimport './scripts/upload.js';\n\nimport 'kemet-ui/dist/components/kemet-upload/kemet-upload.js';\nimport 'kemet-ui/dist/components/kemet-upload/kemet-upload-file.js';\n","import { html, css, LitElement } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { FormSubmitController } from '../../utilities/controllers/forms.js';\n\nexport default class KemetCheckbox extends LitElement {\n  static get styles() {\n    return [\n      css`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: inline-block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n\n        label {\n          display: inline-flex;\n          gap: 0.5rem;\n          align-items: center;\n        }\n\n        input {\n          cursor: pointer;\n          margin: 0;\n          padding: 0;\n          width: var(--kemet-checkbox-size, 18px);\n          height: var(--kemet-checkbox-size, 18px);\n          position: absolute;\n          opacity: 0;\n        }\n\n        button {\n          margin: 0;\n          border: none;\n          background: none;\n        }\n\n        [part='checkbox'] {\n          color: var(--kemet-checkbox-color, var(--kemet-color-primary));\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: var(--kemet-checkbox-size, 18px);\n          height: var(--kemet-checkbox-size, 18px);\n          border: var(--kemet-checkbox-border, 1px solid var(--kemet-color-primary));\n        }\n\n        :host([rounded]) [part='checkbox'] {\n          border-radius: var(--kemet-checkbox-border-radius, 4px);\n        }\n\n        :host([filled][checked]) [part='checkbox'],\n        :host([filled][indeterminate]) [part='checkbox'] {\n          border: none;\n          background-color: var(--kemet-checkbox-filled-background-color, var(--kemet-color-primary));\n        }\n\n        [part='mark'] {\n          display: flex;\n          width: calc(var(--kemet-checkbox-size, 18px) - 4px);\n          height: calc(var(--kemet-checkbox-size, 18px) - 4px);\n        }\n\n        :host([filled][checked]) [part='mark'],\n        :host([filled][indeterminate]) [part='mark'] {\n          color: var(--kemet-checkbox-filled-color, var(--kemet-color-white));\n        }\n\n        [part='message'] {\n          display: block;\n          margin-top: 0.5rem;\n        }\n\n        :host([status='error']) [part='message'] {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='warning']) [part='message'] {\n          color: var(--kemet-color-error);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      label: {\n        type: String,\n      },\n      checked: {\n        type: Boolean,\n        reflect: true,\n      },\n      indeterminate: {\n        type: Boolean,\n        reflect: true,\n      },\n      name: {\n        type: String,\n      },\n      value: {\n        type: String,\n      },\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      required: {\n        type: Boolean,\n        reflect: true,\n      },\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      rounded: {\n        type: Boolean,\n        reflect: true,\n      },\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      status: {\n        type: String,\n        reflect: true,\n      },\n      message: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.label = '';\n    this.name = 'checkbox';\n    this.disabled = false;\n    this.required = false;\n    this.rounded = false;\n    this.filled = false;\n    this.status = 'standard';\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  firstUpdated() {\n    this.input = this.shadowRoot.querySelector('input');\n  }\n\n  render() {\n    return html`\n      <label part=\"label\">\n        <input\n          type=\"checkbox\"\n          name=${ifDefined(this.name)}\n          .value=${this.value}\n          .indeterminate=${live(this.indeterminate)}\n          .checked=${live(this.checked)}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          aria-checked=${this.checked ? 'true' : 'false'}\n          @click=${() => this.handleClick()}\n          @blur=${() => this.handleBlur()}\n          @focus=${() => this.handleFocus()}\n          @change=${() => this.handleChange()}\n        />\n        <button part=\"checkbox\" aria-label=${this.label}>\n          ${this.makeCheckMark()}\n        </button>\n        <span part=\"text\">${this.label}</span>\n      </label>\n      ${this.makeMessage()}\n    `;\n  }\n\n  click() {\n    this.input.click();\n  }\n\n  handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n\n    /**\n     * Fires when the state of the checkbox changes\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-checkbox-change', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }),\n    );\n  }\n\n  handleBlur() {\n    this.focused = false;\n\n    /**\n     * Fires when the checkbox loses or receives focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-checkbox-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n  }\n\n  handleFocus() {\n    this.focused = true;\n    /**\n     * Fires when the checkbox loses or receives focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-checkbox-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  handleChange() {\n    this.value = this.checked;\n\n    if (this.input.checkValidity()) {\n      this.status = 'standard';\n    }\n  }\n\n  makeMessage() {\n    if (this.status === 'error' || this.status === 'warning') {\n      return html`<span part=\"message\">${this.message}</span>`;\n    }\n\n    return null;\n  }\n\n  makeCheckMark() {\n    if (this.checked) {\n      return html`\n        <span part=\"mark\">\n          <svg viewBox=\"0 0 16 16\">\n            <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n              <g stroke=\"currentColor\" stroke-width=\"2\">\n                <g transform=\"translate(3.428571, 3.428571)\">\n                  <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                  <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                </g>\n              </g>\n            </g>\n          </svg>\n        </span>\n      `;\n    }\n\n    if (!this.checked && this.indeterminate) {\n      return html`\n        <span part=\"mark\">\n          <svg viewBox=\"0 0 16 16\">\n            <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n              <g stroke=\"currentColor\" stroke-width=\"2\">\n                <g transform=\"translate(2.285714, 6.857143)\">\n                  <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                </g>\n              </g>\n            </g>\n          </svg>\n        </span>\n      `;\n    }\n\n    return null;\n  }\n\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-checkbox') || customElements.define('kemet-checkbox', KemetCheckbox);\n","import { html, css, LitElement } from 'lit';\n\nexport default class KemetCombo extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          opacity: 0;\n          width: var(--kemet-combo-width, calc(100% - 2px));\n          margin: var(--kemet-combo-margin, 1rem auto);\n          pointer-events: none;\n          display: block;\n          position: relative;\n          transition: opacity 0.3s ease-in-out;\n        }\n\n        :host([show]) {\n          opacity: 1;\n          pointer-events: auto;\n        }\n\n        ul {\n          width: 100%;\n          max-height: var(--kemet-combo-max-height, calc(5 * 3rem));\n          position: absolute;\n          z-index: 1;\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          overflow-y: scroll;\n          border: var(--kemet-combo-border, 1px solid var(--kemet-color-primary));\n          border-radius: var(--kemet-combo-border-radius, var(--kemet-border-radius));\n          background-color: var(--kemet-combo-background-color, var(--kemet-color-white));\n          box-shadow: var(--kemet-combo-shadow, 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1));\n        }\n        li {\n          line-height: 3rem;\n          padding: 0 1.5rem;\n          cursor: pointer;\n        }\n        li:hover,\n        li:focus {\n          color: var(--kemet-combo-hover-color, var(--kemet-color-white));\n          outline: none;\n          background-color: var(--kemet-combo-hover-background-color, var(--kemet-color-primary));\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Uniquely identifies the component. Should match the slug used in a control.\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * An array of items listed for the combo box\n       */\n      options: {\n        type: Array,\n      },\n      /**\n       * Used internally\n       */\n      filteredOptions: {\n        type: Array,\n      },\n      /**\n       * Controls the display of the combo box\n       */\n      show: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.options = [];\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.field = this.closest('kemet-field');\n    this.input = this.field.querySelector('[slot=\"input\"]');\n\n    // managed properties\n    this.slug = this.field.slug || 'slug';\n\n    // events listeners\n    this.input.addEventListener('kemet-input-input', this.handleInput.bind(this));\n    this.input.addEventListener('keydown', event => this.handleInputKeyDown(event));\n  }\n\n  render() {\n    return html`\n      <div\n        role=\"combobox\"\n        aria-expanded=${this.show}\n        aria-controls=\"${this.slug}-listbox\"\n        aria-haspopup=\"listbox\"\n        id=\"${this.slug}-combobox\"\n        aria-label=\"${this.field?.label}\"\n      >\n        <ul role=\"listbox\" aria-labelledby=\"${this.slug}-label\" id=\"${this.slug}-listbox\">\n          ${this.makeOptions()}\n        </ul>\n      </div>\n    `;\n  }\n\n  makeOptions() {\n    if (this.input) {\n      this.filteredOptions = this.options.filter(\n        option => option.toLowerCase().indexOf(this.input.value?.toLowerCase()) !== -1,\n      );\n\n      const options = this.filteredOptions.map(\n        (option, index) => html`<li\n            id=\"${this.slug}-option-${index}\"\n            role=\"option\"\n            tabindex=\"0\"\n            aria-selected=\"false\"\n            @click=${event => this.handleSelection(event)}\n            @keydown=${event => this.handleOptionKeyDown(event)}\n          >\n            ${option}\n          </li>`,\n      );\n\n      return options;\n    }\n\n    return null;\n  }\n\n  handleInput(event) {\n    this.makeOptions();\n\n    if (event.detail.length > 0) {\n      this.show = true;\n    } else {\n      this.show = false;\n    }\n  }\n\n  handleSelection(event) {\n    this.input.value = event.target.innerText;\n    this.show = false;\n\n    /**\n     * Fires when a selection has been made\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-combo-selection', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          element: event.target,\n          text: event.target.innerText,\n          id: event.target.getAttribute('id'),\n        },\n      }),\n    );\n  }\n\n  handleOptionKeyDown(event) {\n    event.preventDefault();\n\n    if (event.code === 'ArrowDown') {\n      const next = event.target.nextElementSibling;\n\n      if (next) {\n        next.focus();\n      } else {\n        this.shadowRoot.querySelector('li').focus();\n      }\n    }\n\n    if (event.code === 'ArrowUp') {\n      const previous = event.target.previousElementSibling;\n\n      if (previous) {\n        previous.focus();\n      } else {\n        this.shadowRoot.querySelector('li:last-child').focus();\n      }\n    }\n\n    if (event.code === 'Escape' || event.code === 'Tab') {\n      this.show = false;\n      this.input.focus();\n    }\n\n    if (event.code === 'Enter' || event.code === 'Space') {\n      this.handleSelection(event);\n    }\n  }\n\n  handleInputKeyDown(event) {\n    if (event.code === 'ArrowDown') {\n      this.shadowRoot.querySelector('li').focus();\n    }\n\n    if (event.code === 'Escape') {\n      this.show = false;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-combo') || customElements.define('kemet-combo', KemetCombo);\n","import { html, css, LitElement } from 'lit';\n\nexport default class KemetField extends LitElement {\n  static get styles() {\n    return [\n      css`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n\n        label {\n          position: relative;\n          display: block;\n        }\n\n        label span {\n          color: inherit;\n          display: inline-flex;\n          gap: 0.5rem;\n          align-items: center;\n          margin-bottom: 0.8rem;\n        }\n\n        :host([status='error']) kemet-icon {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='success']) kemet-icon {\n          color: var(--kemet-color-success);\n        }\n\n        :host([status='warning']) kemet-icon {\n          color: var(--kemet-color-warning);\n        }\n\n        .message {\n          font-size: 0.9rem;\n          line-height: 1;\n          display: block;\n          margin-top: 0.8rem;\n        }\n\n        :host([status='error']) .message {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='success']) .message {\n          color: var(--kemet-color-success);\n        }\n\n        :host([status='warning']) .message {\n          color: var(--kemet-color-warning);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Uniquely identifies the control. Use the same slug for slotted sub components.\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * The label text\n       */\n      label: {\n        type: String,\n      },\n      /**\n       * The validation message for error or success\n       */\n      message: {\n        type: String,\n      },\n      /**\n       * Determines if the containing input is focused\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The validation status of standard, error, or success\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Is true when the containing input has a value\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The length of the containing input\n       */\n      length: {\n        type: Number,\n      },\n      /**\n       * Determines the disabled state of the control\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The icon while in an error or warning state\n       */\n      errorIcon: {\n        type: String,\n        attribute: 'error-icon',\n      },\n      /**\n       * The icon while in an success state\n       */\n      successIcon: {\n        type: String,\n        attribute: 'success-icon',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.status = 'standard';\n    this.errorIcon = 'exclamation-triangle-fill';\n    this.successIcon = 'check-lg';\n\n    // listeners\n    this.addEventListener('kemet-input-focused', event => this.handleFocused(event));\n    this.addEventListener('kemet-input-status', event => this.handleStatus(event));\n    this.addEventListener('kemet-input-input', event => this.handleInput(event));\n    this.addEventListener('kemet-count-status', event => this.handleStatus(event));\n    this.addEventListener('kemet-combo-selection', event => this.handleSelection(event));\n  }\n\n  firstUpdated() {\n    this.slotInput = this.querySelector('[slot=\"input\"]');\n    this.slotCombo = this.querySelector('[slot=\"combo\"]');\n\n    if (this.slotInput.value) {\n      this.length = this.slotInput.value.length;\n    } else {\n      this.length = 0;\n    }\n  }\n\n  render() {\n    return html`\n      <label for=\"${this.slug}\" id=\"${this.slug}-label\" part=\"label\">\n        <span>${this.label}${this.makeStatusIcon()}</span>\n        <slot name=\"input\"></slot>\n      </label>\n      ${this.makeStatusMessage()}\n      <slot name=\"component\"></slot>\n    `;\n  }\n\n  makeStatusIcon() {\n    if (this.status === 'error' || this.status === 'warning') {\n      return html`<kemet-icon icon=\"${this.errorIcon}\" size=\"16\"></kemet-icon>`;\n    }\n\n    if (this.status === 'success') {\n      return html`<kemet-icon icon=\"${this.successIcon}\" size=\"16\"></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  makeStatusMessage() {\n    if (this.status !== 'standard') {\n      return html`<span class=\"message\" part=\"message\">${this.message}</span>`;\n    }\n\n    return null;\n  }\n\n  handleFocused(event) {\n    this.focused = event.detail;\n\n    if (!this.focused && this.slotCombo && this.slotCombo.options.length < 1) {\n      this.slotCombo.show = false;\n    }\n  }\n\n  handleStatus(event) {\n    this.status = event.detail.status;\n  }\n\n  handleInput(event) {\n    /**\n     * Fires when input fires on the input slot\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-field-input', {\n        bubbles: false,\n        detail: event.detail.length,\n      }),\n    );\n\n    if (event.detail === '') {\n      this.filled = false;\n    } else {\n      this.filled = true;\n    }\n  }\n\n  handleSelection(event) {\n    this.slotInput.setAttribute('aria-activedescendant', event.detail);\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-field') || customElements.define('kemet-field', KemetField);\n","import { html, css, LitElement } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { FormSubmitController } from '../../utilities/controllers/forms.js';\n\nexport default class KemetInput extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          position: relative;\n          display: block;\n        }\n\n        input {\n          display: block;\n          font-size: 1rem;\n          width: 100%;\n          height: var(--kemet-input-height, 50px);\n          padding: var(--kemet-input-padding, 0.5rem 1rem);\n          border: var(--kemet-input-border, 1px solid var(--kemet-color-primary));\n          appearance: none;\n          box-sizing: border-box;\n        }\n\n        input[type='color'] {\n          min-width: 10rem;\n        }\n\n        input[type='search']::-webkit-search-decoration,\n        input[type='search']::-webkit-search-cancel-button,\n        input[type='search']::-webkit-search-results-button,\n        input[type='search']::-webkit-search-results-decoration {\n          display: none;\n        }\n\n        :host([status='error']) input {\n          border: var(--kemet-input-border-color-error, 1px solid var(--kemet-color-error));\n        }\n\n        :host([status='success']) input {\n          border: var(--kemet-input-border-color-success, 1px solid var(--kemet-color-success));\n        }\n\n        :host([status='warning']) input {\n          border: var(--kemet-input-border-color-warning, 1px solid var(--kemet-color-warning));\n        }\n\n        :host([disabled]) input {\n          opacity: 0.5;\n        }\n\n        :host([icon-left]) input {\n          padding-left: var(--kemet-input-icon-left-padding, 3rem);\n        }\n\n        :host([icon-right]) input {\n          padding-right: var(--kemet-input-icon-right-padding, 3rem);\n        }\n\n        :host([rounded]) input {\n          border-radius: var(--kemet-input-border-radius-rounded, var(--kemet-border-radius));\n        }\n\n        :host([filled]) input {\n          border: var(--kemet-input-border-filled, none);\n          color: var(--kemet-input-color-filled, var(--kemet-color-white));\n          background-color: var(--kemet-input-background-color-filled, var(--kemet-color-primary));\n        }\n\n        :host([filled]) kemet-icon,\n        :host([filled]) input::placeholder {\n          color: var(--kemet-input-color-filled, var(--kemet-color-white));\n        }\n\n        :host([status='error'][filled]) input {\n          background-color: var(--kemet-input-background-color-error, var(--kemet-color-error));\n        }\n\n        :host([status='success'][filled]) input {\n          background-color: var(--kemet-input-background-color-success, var(--kemet-color-success));\n        }\n\n        :host([status='warning'][filled]) input {\n          background-color: var(--kemet-input-background-color-warning, var(--kemet-color-warning));\n        }\n\n        kemet-icon {\n          color: var(--kemet-color-primary);\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n        }\n\n        kemet-icon.left {\n          left: 1rem;\n        }\n\n        kemet-icon.right {\n          right: 1rem;\n        }\n\n        kemet-icon.eye,\n        kemet-icon.search {\n          cursor: pointer;\n        }\n\n        :host([status='error']) kemet-icon {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='warning']) kemet-icon {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='success']) kemet-icon {\n          color: var(--kemet-color-success);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Used for the id of the input. Should match the slug used in a control if applicable.\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * The name of the input\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The placeholder attribute\n       */\n      placeholder: {\n        type: String,\n      },\n      /**\n       * The minlength attribute\n       */\n      minlength: {\n        type: String,\n      },\n      /**\n       * The maxlength attribute\n       */\n      maxlength: {\n        type: String,\n      },\n      /**\n       * The min attribute\n       */\n      min: {\n        type: String,\n      },\n      /**\n       * The max attribute\n       */\n      max: {\n        type: String,\n      },\n      /**\n       * The step attribute\n       */\n      step: {\n        type: String,\n      },\n      /**\n       * The autocomplete attribute\n       */\n      autocomplete: {\n        type: String,\n      },\n      /**\n       * The pattern attribute\n       */\n      pattern: {\n        type: String,\n      },\n      /**\n       * The input mode attribute\n       */\n      inputmode: {\n        type: String,\n      },\n      /**\n       * The autofocus attribute\n       */\n      autofocus: {\n        type: Boolean,\n      },\n      /**\n       * The disable attribute\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The readonly attribute\n       */\n      readonly: {\n        type: Boolean,\n      },\n      /**\n       * The required attribute\n       */\n      required: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The type of input\n       */\n      type: {\n        type: String,\n      },\n      /**\n       * The input's value\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * States whether or not the input is invalid\n       */\n      invalid: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The status of the input\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Activates validation on blur\n       */\n      validateOnBlur: {\n        type: Boolean,\n        attribute: 'validate-on-blur',\n      },\n      /**\n       * Aria Autocomplete\n       */\n      ariaAutoComplete: {\n        type: String,\n        attribute: 'aria-autocomplete',\n      },\n      /**\n       * Aria Controls\n       */\n      ariaControls: {\n        type: String,\n        attribute: 'aria-controls',\n      },\n      /**\n       * Aria Active Descendant\n       */\n      ariaActiveDescendant: {\n        type: String,\n        attribute: 'aria-activedescendant',\n      },\n      /**\n       * Displays rounded corners\n       */\n      rounded: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Displays a filled input box\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Custom Icon to the right of the input\n       */\n      iconRight: {\n        type: String,\n        reflect: true,\n        attribute: 'icon-right',\n      },\n      /**\n       * Custom Icon to the left of the input\n       */\n      iconLeft: {\n        type: String,\n        reflect: true,\n        attribute: 'icon-left',\n      },\n      /**\n       * Size of the icons\n       */\n      iconSize: {\n        type: Number,\n      },\n      /**\n       * The HTML5 validity object.\n       */\n      validity: {\n        type: Object,\n      },\n      /**\n       * Manages password visibility\n       */\n      isPasswordVisible: {\n        type: Boolean,\n      },\n      /**\n       * Input Type of keypress handled through handleInput(e)\n       */\n      inputType: {\n        type: String,\n      },\n      /**\n       * Determines if the input is focused\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.name = 'input';\n    this.type = 'text';\n    this.value = '';\n    this.status = 'standard';\n    this.iconSize = 20;\n    this.validateOnBlur = false;\n    this.isPasswordVisible = false;\n    this.focused = false;\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  firstUpdated() {\n    // elements\n    this.input = this.shadowRoot.querySelector('input');\n    this.field = this.closest('kemet-field');\n    this.form = this.closest('form');\n    this.slug = this.field ? this.field.slug : 'input';\n\n    if (this.field) {\n      this.field.addEventListener('fmc-password-status', event => this.handleStatus(event));\n    }\n  }\n\n  render() {\n    return html`\n      <div>\n        ${this.makeIconLeft()}\n        <input\n          part=\"input\"\n          id=${this.slug}\n          name=${this.name}\n          placeholder=${ifDefined(this.placeholder)}\n          minlength=${ifDefined(this.minlength)}\n          maxlength=${ifDefined(this.maxlength)}\n          min=${ifDefined(this.min)}\n          max=${ifDefined(this.max)}\n          step=${ifDefined(this.step)}\n          autocomplete=${ifDefined(this.autocomplete)}\n          aria-autocomplete=${ifDefined(this.ariaAutoComplete)}\n          aria-controls=${ifDefined(this.ariaControls)}\n          aria-activedescendant=${ifDefined(this.ariaActiveDescendant)}\n          pattern=${ifDefined(this.pattern)}\n          inputmode=${ifDefined(this.inputmode)}\n          aria-invalid=${this.invalid ? 'true' : 'false'}\n          ?autofocus=${this.autofocus}\n          ?disabled=${this.disabled}\n          ?readonly=${this.readonly}\n          ?required=${this.required}\n          .type=\"${this.type === 'password' && this.isPasswordVisible ? 'text' : this.type}\"\n          .value=${live(this.value)}\n          @change=${this.handleChange}\n          @input=${this.handleInput}\n          @invalid=${this.handleInvalid}\n          @focus=${this.handleFocus}\n          @blur=${this.handleBlur}\n        />\n        ${this.makeIconRight()} ${this.makeIconClear()} ${this.makeVisibilityToggle()}\n      </div>\n    `;\n  }\n\n  /**\n   * Makes the right icon\n   * @private\n   * @returns {templateResult} A right icon\n   */\n  makeIconRight() {\n    if (this.iconRight) {\n      return html`\n        <kemet-icon class=\"right\" icon=\"${this.iconRight}\" size=\"${this.iconSize ? this.iconSize : 20}\"></kemet-icon>\n      `;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes the left icon\n   * @private\n   * @returns {templateResult} A left icon\n   */\n  makeIconLeft() {\n    if (this.iconLeft) {\n      return html`\n        <kemet-icon class=\"left\" icon=\"${this.iconLeft}\" size=\"${this.iconSize ? this.iconSize : 16}\"></kemet-icon>\n      `;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes a clear icon for search.\n   * @private\n   * @returns {templateResult} A search icon\n   */\n  makeIconClear() {\n    if (this.type === 'search' && this.value !== '') {\n      return html`\n        <kemet-icon class=\"search right\" icon=\"x-lg\" size=\"${this.iconSize}\" @click=${() => this.handleClear()}></kemet-icon>\n      `;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes a password visibility toggle button\n   * @returns {templateResult} A mask or unmask icon\n   */\n  makeVisibilityToggle() {\n    if (this.type === 'password') {\n      return html`<kemet-icon\n        class=\"eye right\"\n        icon=\"${this.setPasswordIcon()}\"\n        @click=${() => this.togglePasswordVisibility()}\n      ></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  setPasswordIcon() {\n    if (this.isPasswordVisible) {\n      return 'eye';\n    }\n\n    return 'eye-slash';\n  }\n\n  /**\n   * Handles when the input receives focus\n   * @private\n   */\n  handleFocus() {\n    this.focused = true;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input loses focus\n   * @private\n   */\n  handleBlur() {\n    if (this.validateOnBlur && this.form && !this.form.noValidate) {\n      this.input.checkValidity();\n      this.validity = this.input.validity;\n    }\n\n    this.focused = false;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input changes value\n   * @private\n   */\n  handleChange() {\n    this.value = this.input.value;\n\n    if (this.input.checkValidity() && this.checkLimitValidity() && this.status !== 'success') {\n      this.invalid = false;\n      this.status = 'standard';\n      this.validity = this.input.validity;\n\n      /**\n       * Fires when there's a change in status.\n       * This event includes an object that reports:\n       * 1) the status. 2) HTML5 validity object. 3) the component element.\n       * Use the validity object to support custom validation messages.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'standard',\n            validity: this.input.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Handles when the input receives input\n   * @private\n   */\n  handleInput() {\n    this.value = this.input.value;\n\n    /**\n     * Fires when the input receives input\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-input', {\n        bubbles: true,\n        composed: true,\n        detail: this.value,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input has an error\n   * @private\n   */\n  handleInvalid() {\n    this.validity = this.input.validity;\n\n    if (this.validateOnBlur) {\n      this.invalid = true;\n      this.status = 'error';\n\n      /**\n       * Fires when there's a change in status\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'error',\n            validity: this.input.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  handleStatus(event) {\n    this.status = event.detail.status;\n  }\n\n  /**\n   * Toggles password visibility\n   * @private\n   */\n  togglePasswordVisibility() {\n    this.isPasswordVisible = !this.isPasswordVisible;\n  }\n\n  /**\n   * Handles the clear button for search\n   * @private\n   */\n  handleClear() {\n    this.value = '';\n\n    /**\n     * Fires when the input receives input\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-input', {\n        bubbles: true,\n        composed: true,\n        detail: this.value,\n      }),\n    );\n  }\n\n  /**\n   * Checks the validity of the character limit for the count component\n   * @private\n   * @returns {boolean}\n   */\n  checkLimitValidity() {\n    if (this.field) {\n      const count = this.field.querySelector('kemet-count');\n      if (count) {\n        return this.value.length < count.limit;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks the validity of the standard input\n   * @public\n   * @returns {boolean}\n   */\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /**\n   * Focuses the standard input\n   * @public\n   */\n  focus() {\n    this.input.focus();\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-input') || customElements.define('kemet-input', KemetInput);\n","import { html, css, LitElement } from 'lit';\n\nexport default class KemetSortableItem extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          cursor: grab;\n          display: block;\n          padding: 1rem;\n          border: 1px solid var(--kemet-color-primary);\n        }\n\n        :host([ghost]) {\n          opacity: 0.5;\n          border-style: dashed;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /* Automatically set to true when an item is dragged to a new spot */\n      ghost: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  firstUpdated() {\n    this.draggable = true;\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-sortable-item') || customElements.define('kemet-sortable-item', KemetSortableItem);\n","import { html, css, LitElement } from 'lit';\nimport { polyfill } from 'mobile-drag-drop';\n\nconst getMouseOffset = (event) => {\n  const targetRect = event.target.getBoundingClientRect();\n  const offset = {\n    x: event.pageX - targetRect.left,\n    y: event.pageY - targetRect.top,\n  };\n\n  return offset;\n};\n\nconst getElementVerticalCenter = (element) => {\n  const rect = element.getBoundingClientRect();\n  return (rect.bottom - rect.top) / 2;\n};\n\nexport default class KemetSortable extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: flex;\n          gap: 1rem;\n          flex-direction: column;\n        }\n      `,\n    ];\n  }\n\n  firstUpdated() {\n    polyfill();\n\n    this.addEventListener('dragstart', event => this.handleDragStart(event), false);\n    this.addEventListener('dragenter', (event) => { event.preventDefault(); });\n  }\n\n  render() {\n    return html`<slot></slot>`;\n  }\n\n  handleDragStart(event) {\n    this.sortableItem = event.target;\n\n    this.addEventListener('dragover', dragOverEvent => this.handleDragOver(dragOverEvent), false);\n    this.addEventListener('dragend', dragEndEvent => this.handleDragEnd(dragEndEvent), false);\n\n    setTimeout(() => {\n      this.sortableItem.ghost = true;\n    }, 0);\n  }\n\n  handleDragOver(event) {\n    event.preventDefault();\n\n    const { target } = event;\n\n    if (target && target.tagName === 'KEMET-SORTABLE-ITEM') {\n      const offset = getMouseOffset(event);\n      const middleY = getElementVerticalCenter(event.target);\n\n      if (offset.y > middleY) {\n        this.insertBefore(this.sortableItem, target.nextSibling);\n      } else {\n        this.insertBefore(this.sortableItem, target);\n      }\n    }\n  }\n\n  handleDragEnd(event) {\n    event.preventDefault();\n    this.sortableItem.ghost = false;\n\n    /**\n     * Fires when an item has been moved to a new spot\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-sortable-drag-end', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          event,\n          current: this.sortableItem,\n          all: this.querySelectorAll('kemet-sortable-item'),\n        },\n      }),\n    );\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-sortable') || customElements.define('kemet-sortable', KemetSortable);\n","import { html, css, LitElement } from 'lit';\nimport { stylesLoaders } from './kemet-upload-file.loaders.styles.js';\n\nconst formatBytes = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  // eslint-disable-next-line no-restricted-properties\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n};\n\nexport default class KemetUploadFile extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          --kemet-upload-file-ripple-color: var(--kemet-color-primary);\n\n          color: var(--kemet-upload-file-color, var(--kemet-color-gray7));\n          display: grid;\n          gap: 1rem;\n          grid-template-columns: auto 1fr auto;\n          align-items: center;\n          padding: var(--kemet-upload-file-padding, 0.5rem 1rem);\n          border: var(--kemet-upload-file-border, 1px solid var(--kemet-color-primary));\n        }\n\n        :host([status='error']) {\n          border: 1px solid var(--kemet-color-error);\n        }\n\n        :host([status='complete']) {\n          border: 1px solid var(--kemet-color-success);\n        }\n\n        h3 {\n          margin: 0;\n        }\n\n        .percentage {\n          font-size: clamp(2rem, 3vw, 2.5rem);\n          align-self: center;\n          justify-self: center;\n        }\n\n        .indicator {\n          transform: scale(0.8);\n        }\n\n        :host([status='complete']) .message,\n        :host([status='complete']) .indicator {\n          color: var(--kemet-color-success);\n        }\n\n        :host([status='error']) .message,\n        :host([status='error']) .indicator {\n          color: var(--kemet-color-error);\n        }\n      `,\n      stylesLoaders,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the file\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The number of bytes loaded\n       */\n      loaded: {\n        type: Number,\n      },\n      /**\n       * The file size in bytes\n       */\n      size: {\n        type: Number,\n      },\n      /**\n       * The file type\n       */\n      type: {\n        type: String,\n      },\n      /**\n       * The status of the file. Values are complete | uploading | error.\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * A percentage of file completion that's calculated by the loaded property\n       */\n      percent: {\n        type: Number,\n      },\n      /**\n       * An error message to give to users\n       */\n      message: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.loaded = 0;\n    this.size = 0;\n    this.percent = 0;\n  }\n\n  updated() {\n    this.percent = this.calculatePercent();\n  }\n\n  render() {\n    return html`\n      <div class=\"percentage\" part=\"percentage\">\n        <span>${this.percent}%</span>\n      </div>\n      <div>\n        <h3 part=\"filename\">${this.name}</h3>\n        <span part=\"loaded\">${formatBytes(this.loaded)} / ${formatBytes(this.size)}</span>\n        ${this.message ? html`<div class=\"message\" part=\"message\">${this.message}</div>` : null}\n      </div>\n      <div class=\"indicator\" part=\"indicator\">\n        ${this.getStatusIcon()}\n      </div>\n    `;\n  }\n\n  calculatePercent() {\n    const percent = Math.round((this.loaded * 100.0) / this.size);\n    return percent > 100 ? 100 : percent;\n  }\n\n  getStatusIcon() {\n    if (this.status === 'uploading') {\n      return html`<div class=\"lds-ripple\"><div></div><div></div></div>`;\n    }\n\n    if (this.status === 'complete') {\n      return html`<kemet-icon icon=\"check-circle\" size=\"48\"></kemet-icon>`;\n    }\n\n    if (this.status === 'error') {\n      return html`<kemet-icon icon=\"exclamation-circle\" size=\"48\"></kemet-icon>`;\n    }\n\n    return null;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-upload-file') || customElements.define('kemet-upload-file', KemetUploadFile);\n","import { css } from 'lit';\n\nexport const stylesLoaders = css`\n  .lds-ripple {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n  }\n\n  .lds-ripple div {\n    position: absolute;\n    border: 4px solid var(--kemet-upload-file-ripple-color);\n    opacity: 1;\n    border-radius: 50%;\n    animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  }\n\n  .lds-ripple div:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n\n  @keyframes lds-ripple {\n    0% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 0;\n    }\n    4.9% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 0;\n    }\n    5% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 1;\n    }\n    100% {\n      top: 0px;\n      left: 0px;\n      width: 72px;\n      height: 72px;\n      opacity: 0;\n    }\n  }\n`;\n","import { html, css, LitElement } from 'lit';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nconst preventDefaults = (event) => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\nexport default class KemetUpload extends LitElement {\n  static get styles() {\n    return [\n      css`\n        :host {\n          color: var(--kemet-upload-color, var(--kemet-color-white));\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          height: var(--kemet-upload-height, 364px);\n          border: var(--kemet-upload-border, 1rem solid var(--kemet-color-white));\n          background-color: var(--kemet-upload-background-color, var(--kemet-color-primary));\n        }\n\n        :host([mobile]) {\n          display: block;\n          height: auto;\n        }\n\n        input {\n          display: none;\n        }\n\n        .button {\n          cursor: pointer;\n          font-size: 1rem;\n          display: block;\n          color: var(--kemet-color-white);\n          padding: 0.5rem 1rem;\n          border: 1px solid var(--kemet-color-white);\n          background-color: transparent;\n        }\n\n        .upload {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin: 1rem;\n          flex-direction: column;\n          border: 2px dashed var(--kemet-color-white);\n        }\n\n        :host([over]) .upload {\n          background-color: green;\n        }\n\n        :host([mobile]) .upload {\n          height: 280px;\n        }\n\n        .files {\n          display: flex;\n          gap: 1rem;\n          flex-direction: column;\n          padding: 0 1rem;\n          overflow: auto;\n          background-color: var(--kemet-color-white);\n        }\n\n        :host([mobile]) .files {\n          padding: 0;\n          max-height: 280px;\n        }\n\n        .heading {\n          font-size: 1.25rem;\n          margin: 0 0 2rem 0;\n        }\n\n        :host([no-drag-drop]) .heading {\n          display: none;\n        }\n\n        ::slotted(:first-child) {\n          margin-top: 1rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A unique identifier for the component\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * Determines what file types are accepted\n       */\n      accept: {\n        type: String,\n      },\n      /**\n       * Allows for multiple files\n       */\n      multiple: {\n        type: Boolean,\n      },\n      /**\n       * Automatically is true when a file is being dragged over the upload area\n       */\n      over: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Descriptive text for the upload area\n       */\n      heading: {\n        type: String,\n      },\n      /**\n       * Displays the component in a mobile context\n       */\n      mobile: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Controls the point at which the component is considered mobile\n       */\n      breakpoint: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * If true if drag and drop support is not detected\n       */\n      noDragDrop: {\n        type: Boolean,\n        reflect: true,\n        attribute: 'no-drag-drop',\n      },\n      /**\n       * The maximum file size for uploads\n       */\n      maxSize: {\n        type: Number,\n        attribute: 'max-size',\n      },\n      /**\n       * The browse files button text\n       */\n      buttonLabel: {\n        type: String,\n        attribute: 'button-label',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.slug = 'upload';\n    this.breakpoint = '600px';\n    this.buttonLabel = 'Browse Files';\n    this.heading = 'Drag & Drop Files';\n  }\n\n  firstUpdated() {\n    this.fileInputElement = this.shadowRoot.querySelector('[type=\"file\"]');\n    this.upload = this.shadowRoot.querySelector('.upload');\n\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {\n      this.upload.addEventListener(eventName, event => preventDefaults(event), false);\n    });\n\n    ['dragenter', 'dragover'].forEach((eventName) => {\n      this.upload.addEventListener(eventName, () => { this.over = true; }, false);\n    });\n\n    ['dragleave', 'drop'].forEach((eventName) => {\n      this.upload.addEventListener(eventName, () => { this.over = false; }, false);\n    });\n\n    this.isMobile();\n    this.hasDragDrop();\n\n    window.addEventListener('resize', () => { this.isMobile(); });\n    this.upload.addEventListener('drop', event => this.handleDrop(event), false);\n  }\n\n  render() {\n    return html`\n      <div class=\"upload\" part=\"upload\">\n        <kemet-icon icon=\"cloud-arrow-up\" size=\"128\"></kemet-icon>\n        <input\n          type=\"file\"\n          id=${this.slug}\n          ?multiple=${this.multiple}\n          accept=${ifDefined(this.accept) ? this.accept : null}\n          @change=${event => this.handleChange(event)}\n        />\n        <h3 class=\"heading\" part=\"heading\">${this.heading}</h3>\n        <label class=\"button\" part=\"button\" for=${this.slug}>${this.buttonLabel}</label>\n      </div>\n      <div class=\"files\" part=\"files\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  handleChange(event) {\n    /**\n     * Fires when files have been added\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-upload-change', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          event,\n          files: this.fileInputElement.files,\n          fileElement: this.fileInputElement,\n        },\n      }),\n    );\n  }\n\n  handleDrop(event) {\n    /**\n     * Fires when files have been added\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-upload-change', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          event,\n          files: event?.dataTransfer.files || [],\n          fileElement: this.fileInputElement,\n        },\n      }),\n    );\n  }\n\n  isMobile() {\n    const mediaQuery = window.matchMedia(`(max-width: ${this.breakpoint})`);\n    this.mobile = mediaQuery.matches;\n  }\n\n  hasDragDrop() {\n    if ('draggable' in document.createElement('span')) {\n      this.noDragDrop = false;\n    } else {\n      this.noDragDrop = true;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-upload') || customElements.define('kemet-upload', KemetUpload);\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t$2=window.ShadowRoot&&(void 0===window.ShadyCSS||window.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,e$4=Symbol(),n$3=new Map;class s$4{constructor(t,n){if(this._$cssResult$=!0,n!==e$4)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t;}get styleSheet(){let e=n$3.get(this.cssText);return t$2&&void 0===e&&(n$3.set(this.cssText,e=new CSSStyleSheet),e.replaceSync(this.cssText)),e}toString(){return this.cssText}}const o$4=t=>new s$4(\"string\"==typeof t?t:t+\"\",e$4),r$3=(t,...n)=>{const o=1===t.length?t[0]:n.reduce(((e,n,s)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(n)+t[s+1]),t[0]);return new s$4(o,e$4)},i$2=(e,n)=>{t$2?e.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((t=>{const n=document.createElement(\"style\"),s=window.litNonce;void 0!==s&&n.setAttribute(\"nonce\",s),n.textContent=t.cssText,e.appendChild(n);}));},S$1=t$2?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const n of t.cssRules)e+=n.cssText;return o$4(e)})(t):t;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var s$3;const e$3=window.trustedTypes,r$2=e$3?e$3.emptyScript:\"\",h$1=window.reactiveElementPolyfillSupport,o$3={toAttribute(t,i){switch(i){case Boolean:t=t?r$2:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t);}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t);}catch(t){s=null;}}return s}},n$2=(t,i)=>i!==t&&(i==i||t==t),l$4={attribute:!0,type:String,converter:o$3,reflect:!1,hasChanged:n$2};class a$1 extends HTMLElement{constructor(){super(),this._$Et=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Ei=null,this.o();}static addInitializer(t){var i;null!==(i=this.l)&&void 0!==i||(this.l=[]),this.l.push(t);}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,s)=>{const e=this._$Eh(s,i);void 0!==e&&(this._$Eu.set(e,s),t.push(e));})),t}static createProperty(t,i=l$4){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const s=\"symbol\"==typeof t?Symbol():\"__\"+t,e=this.getPropertyDescriptor(t,s,i);void 0!==e&&Object.defineProperty(this.prototype,t,e);}}static getPropertyDescriptor(t,i,s){return {get(){return this[i]},set(e){const r=this[t];this[i]=e,this.requestUpdate(t,r,s);},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l$4}static finalize(){if(this.hasOwnProperty(\"finalized\"))return !1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),this.elementProperties=new Map(t.elementProperties),this._$Eu=new Map,this.hasOwnProperty(\"properties\")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of i)this.createProperty(s,t[s]);}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(i){const s=[];if(Array.isArray(i)){const e=new Set(i.flat(1/0).reverse());for(const i of e)s.unshift(S$1(i));}else void 0!==i&&s.push(S$1(i));return s}static _$Eh(t,i){const s=i.attribute;return !1===s?void 0:\"string\"==typeof s?s:\"string\"==typeof t?t.toLowerCase():void 0}o(){var t;this._$Ep=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Em(),this.requestUpdate(),null===(t=this.constructor.l)||void 0===t||t.forEach((t=>t(this)));}addController(t){var i,s;(null!==(i=this._$Eg)&&void 0!==i?i:this._$Eg=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t));}removeController(t){var i;null===(i=this._$Eg)||void 0===i||i.splice(this._$Eg.indexOf(t)>>>0,1);}_$Em(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Et.set(i,this[i]),delete this[i]);}));}createRenderRoot(){var t;const s=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return i$2(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}));}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}));}attributeChangedCallback(t,i,s){this._$AK(t,s);}_$ES(t,i,s=l$4){var e,r;const h=this.constructor._$Eh(t,s);if(void 0!==h&&!0===s.reflect){const n=(null!==(r=null===(e=s.converter)||void 0===e?void 0:e.toAttribute)&&void 0!==r?r:o$3.toAttribute)(i,s.type);this._$Ei=t,null==n?this.removeAttribute(h):this.setAttribute(h,n),this._$Ei=null;}}_$AK(t,i){var s,e,r;const h=this.constructor,n=h._$Eu.get(t);if(void 0!==n&&this._$Ei!==n){const t=h.getPropertyOptions(n),l=t.converter,a=null!==(r=null!==(e=null===(s=l)||void 0===s?void 0:s.fromAttribute)&&void 0!==e?e:\"function\"==typeof l?l:null)&&void 0!==r?r:o$3.fromAttribute;this._$Ei=n,this[n]=a(i,t.type),this._$Ei=null;}}requestUpdate(t,i,s){let e=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||n$2)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===s.reflect&&this._$Ei!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):e=!1),!this.isUpdatePending&&e&&(this._$Ep=this._$E_());}async _$E_(){this.isUpdatePending=!0;try{await this._$Ep;}catch(t){Promise.reject(t);}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Et&&(this._$Et.forEach(((t,i)=>this[i]=t)),this._$Et=void 0);let i=!1;const s=this._$AL;try{i=this.shouldUpdate(s),i?(this.willUpdate(s),null===(t=this._$Eg)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(s)):this._$EU();}catch(t){throw i=!1,this._$EU(),t}i&&this._$AE(s);}willUpdate(t){}_$AE(t){var i;null===(i=this._$Eg)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t);}_$EU(){this._$AL=new Map,this.isUpdatePending=!1;}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$Ep}shouldUpdate(t){return !0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,i)=>this._$ES(i,this[i],t))),this._$EC=void 0),this._$EU();}updated(t){}firstUpdated(t){}}a$1.finalized=!0,a$1.elementProperties=new Map,a$1.elementStyles=[],a$1.shadowRootOptions={mode:\"open\"},null==h$1||h$1({ReactiveElement:a$1}),(null!==(s$3=globalThis.reactiveElementVersions)&&void 0!==s$3?s$3:globalThis.reactiveElementVersions=[]).push(\"1.3.2\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar t$1;const i$1=globalThis.trustedTypes,s$2=i$1?i$1.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,e$2=`lit$${(Math.random()+\"\").slice(9)}$`,o$2=\"?\"+e$2,n$1=`<${o$2}>`,l$3=document,h=(t=\"\")=>l$3.createComment(t),r$1=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,d=Array.isArray,u=t=>{var i;return d(t)||\"function\"==typeof(null===(i=t)||void 0===i?void 0:i[Symbol.iterator])},c=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,v=/-->/g,a=/>/g,f$1=/>|[ \t\\n\f\\r](?:([^\\s\"'>=/]+)([ \t\\n\f\\r]*=[ \t\\n\f\\r]*(?:[^ \t\\n\f\\r\"'`<>=]|(\"|')|))|$)/g,_=/'/g,m=/\"/g,g=/^(?:script|style|textarea|title)$/i,p=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),$=p(1),b=Symbol.for(\"lit-noChange\"),w=Symbol.for(\"lit-nothing\"),T=new WeakMap,x=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new N(i.insertBefore(h(),t),t,void 0,null!=s?s:{});}return l._$AI(t),l},A=l$3.createTreeWalker(l$3,129,null,!1),C=(t,i)=>{const o=t.length-1,l=[];let h,r=2===i?\"<svg>\":\"\",d=c;for(let i=0;i<o;i++){const s=t[i];let o,u,p=-1,$=0;for(;$<s.length&&(d.lastIndex=$,u=d.exec(s),null!==u);)$=d.lastIndex,d===c?\"!--\"===u[1]?d=v:void 0!==u[1]?d=a:void 0!==u[2]?(g.test(u[2])&&(h=RegExp(\"</\"+u[2],\"g\")),d=f$1):void 0!==u[3]&&(d=f$1):d===f$1?\">\"===u[0]?(d=null!=h?h:c,p=-1):void 0===u[1]?p=-2:(p=d.lastIndex-u[2].length,o=u[1],d=void 0===u[3]?f$1:'\"'===u[3]?m:_):d===m||d===_?d=f$1:d===v||d===a?d=c:(d=f$1,h=void 0);const y=d===f$1&&t[i+1].startsWith(\"/>\")?\" \":\"\";r+=d===c?s+n$1:p>=0?(l.push(o),s.slice(0,p)+\"$lit$\"+s.slice(p)+e$2+y):s+e$2+(-2===p?(l.push(void 0),i):y);}const u=r+(t[o]||\"<?>\")+(2===i?\"</svg>\":\"\");if(!Array.isArray(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return [void 0!==s$2?s$2.createHTML(u):u,l]};class E{constructor({strings:t,_$litType$:s},n){let l;this.parts=[];let r=0,d=0;const u=t.length-1,c=this.parts,[v,a]=C(t,s);if(this.el=E.createElement(v,n),A.currentNode=this.el.content,2===s){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes);}for(;null!==(l=A.nextNode())&&c.length<u;){if(1===l.nodeType){if(l.hasAttributes()){const t=[];for(const i of l.getAttributeNames())if(i.endsWith(\"$lit$\")||i.startsWith(e$2)){const s=a[d++];if(t.push(i),void 0!==s){const t=l.getAttribute(s.toLowerCase()+\"$lit$\").split(e$2),i=/([.?@])?(.*)/.exec(s);c.push({type:1,index:r,name:i[2],strings:t,ctor:\".\"===i[1]?M:\"?\"===i[1]?H:\"@\"===i[1]?I:S});}else c.push({type:6,index:r});}for(const i of t)l.removeAttribute(i);}if(g.test(l.tagName)){const t=l.textContent.split(e$2),s=t.length-1;if(s>0){l.textContent=i$1?i$1.emptyScript:\"\";for(let i=0;i<s;i++)l.append(t[i],h()),A.nextNode(),c.push({type:2,index:++r});l.append(t[s],h());}}}else if(8===l.nodeType)if(l.data===o$2)c.push({type:2,index:r});else {let t=-1;for(;-1!==(t=l.data.indexOf(e$2,t+1));)c.push({type:7,index:r}),t+=e$2.length-1;}r++;}}static createElement(t,i){const s=l$3.createElement(\"template\");return s.innerHTML=t,s}}function P(t,i,s=t,e){var o,n,l,h;if(i===b)return i;let d=void 0!==e?null===(o=s._$Cl)||void 0===o?void 0:o[e]:s._$Cu;const u=r$1(i)?void 0:i._$litDirective$;return (null==d?void 0:d.constructor)!==u&&(null===(n=null==d?void 0:d._$AO)||void 0===n||n.call(d,!1),void 0===u?d=void 0:(d=new u(t),d._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Cl)&&void 0!==l?l:h._$Cl=[])[e]=d:s._$Cu=d),void 0!==d&&(i=P(t,d._$AS(t,i.values),d,e)),i}class V{constructor(t,i){this.v=[],this._$AN=void 0,this._$AD=t,this._$AM=i;}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}p(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:l$3).importNode(s,!0);A.currentNode=o;let n=A.nextNode(),h=0,r=0,d=e[0];for(;void 0!==d;){if(h===d.index){let i;2===d.type?i=new N(n,n.nextSibling,this,t):1===d.type?i=new d.ctor(n,d.name,d.strings,this,t):6===d.type&&(i=new L(n,this,t)),this.v.push(i),d=e[++r];}h!==(null==d?void 0:d.index)&&(n=A.nextNode(),h++);}return o}m(t){let i=0;for(const s of this.v)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++;}}class N{constructor(t,i,s,e){var o;this.type=2,this._$AH=w,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cg=null===(o=null==e?void 0:e.isConnected)||void 0===o||o;}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cg}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=P(this,t,i),r$1(t)?t===w||null==t||\"\"===t?(this._$AH!==w&&this._$AR(),this._$AH=w):t!==this._$AH&&t!==b&&this.$(t):void 0!==t._$litType$?this.T(t):void 0!==t.nodeType?this.k(t):u(t)?this.S(t):this.$(t);}M(t,i=this._$AB){return this._$AA.parentNode.insertBefore(t,i)}k(t){this._$AH!==t&&(this._$AR(),this._$AH=this.M(t));}$(t){this._$AH!==w&&r$1(this._$AH)?this._$AA.nextSibling.data=t:this.k(l$3.createTextNode(t)),this._$AH=t;}T(t){var i;const{values:s,_$litType$:e}=t,o=\"number\"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=E.createElement(e.h,this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.m(s);else {const t=new V(o,this),i=t.p(this.options);t.m(s),this.k(i),this._$AH=t;}}_$AC(t){let i=T.get(t.strings);return void 0===i&&T.set(t.strings,i=new E(t)),i}S(t){d(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new N(this.M(h()),this.M(h()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e);}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i;}}setConnected(t){var i;void 0===this._$AM&&(this._$Cg=t,null===(i=this._$AP)||void 0===i||i.call(this,t));}}class S{constructor(t,i,s,e,o){this.type=1,this._$AH=w,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=w;}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=P(this,t,i,0),n=!r$1(t)||t!==this._$AH&&t!==b,n&&(this._$AH=t);else {const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=P(this,e[s+l],i,l),h===b&&(h=this._$AH[l]),n||(n=!r$1(h)||h!==this._$AH[l]),h===w?t=w:t!==w&&(t+=(null!=h?h:\"\")+o[l+1]),this._$AH[l]=h;}n&&!e&&this.C(t);}C(t){t===w?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:\"\");}}class M extends S{constructor(){super(...arguments),this.type=3;}C(t){this.element[this.name]=t===w?void 0:t;}}const k=i$1?i$1.emptyScript:\"\";class H extends S{constructor(){super(...arguments),this.type=4;}C(t){t&&t!==w?this.element.setAttribute(this.name,k):this.element.removeAttribute(this.name);}}class I extends S{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5;}_$AI(t,i=this){var s;if((t=null!==(s=P(this,t,i,0))&&void 0!==s?s:w)===b)return;const e=this._$AH,o=t===w&&e!==w||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==w&&(e===w||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t;}handleEvent(t){var i,s;\"function\"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t);}}class L{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s;}get _$AU(){return this._$AM._$AU}_$AI(t){P(this,t);}}const z=window.litHtmlPolyfillSupport;null==z||z(E,N),(null!==(t$1=globalThis.litHtmlVersions)&&void 0!==t$1?t$1:globalThis.litHtmlVersions=[]).push(\"2.2.3\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var l$2,o$1;class s$1 extends a$1{constructor(){super(...arguments),this.renderOptions={host:this},this._$Dt=void 0;}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Dt=x(i,this.renderRoot,this.renderOptions);}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!0);}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Dt)||void 0===t||t.setConnected(!1);}render(){return b}}s$1.finalized=!0,s$1._$litElement$=!0,null===(l$2=globalThis.litElementHydrateSupport)||void 0===l$2||l$2.call(globalThis,{LitElement:s$1});const n=globalThis.litElementPolyfillSupport;null==n||n({LitElement:s$1});(null!==(o$1=globalThis.litElementVersions)&&void 0!==o$1?o$1:globalThis.litElementVersions=[]).push(\"3.2.0\");\n\n/* eslint-disable no-console */\n\nclass KemetIcon extends s$1 {\n  static get properties() {\n    return {\n      /**\n       * The name of the icon to reference.\n       */\n      icon: {\n        type: String,\n      },\n      /**\n       * The sprite map from an open source project that an icon belongs too.\n       * Values include:\n       * (bootstrap | font-awesome-brand | font-awesome-regular | font-awesome-solid)\n       */\n      set: {\n        type: String,\n      },\n      /**\n       * The width and height of the icon in pixels.\n       */\n      size: {\n        type: Number,\n      },\n    };\n  }\n\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n        }\n      `,\n    ];\n  }\n\n  constructor() {\n    super();\n\n    this.set = 'bootstrap';\n    this.icon = 'alarm';\n    this.size = 16;\n  }\n\n  updated() {\n    this.getIcon();\n    this.style.width = `${this.size}px`;\n    this.style.height = `${this.size}px`;\n  }\n\n  render() {\n    return $``;\n  }\n\n  async getIcon() {\n    const parser = new DOMParser();\n    let svgString;\n\n    try {\n      svgString = await fetch(`${this.getUrl()}/${this.icon}.svg`)\n        .then(response => response.text());\n\n      if (svgString.indexOf('</svg>') < 0) {\n        throw new Error('Not a valid svg.');\n      }\n    } catch (error) {\n      svgString = '';\n      console.error(error);\n    }\n\n    const svgElement = parser.parseFromString(svgString, 'image/svg+xml').documentElement;\n    const svgPrevious = this.shadowRoot.querySelector('svg');\n\n    if (svgElement.tagName === 'svg') {\n      svgElement.setAttribute('id', this.icon);\n      svgElement.setAttribute('width', `${this.size}px`);\n      svgElement.setAttribute('height', `${this.size}px`);\n      svgElement.setAttribute('fill', 'currentColor');\n\n      if (svgPrevious) svgPrevious.remove();\n      this.shadowRoot.appendChild(svgElement);\n    } else {\n      console.error(`Could not find icon \"${this.icon}\" in set \"${this.set}\"`);\n\n      const errorIconString = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" id=\"kemet-error\" style=\"enable-background:new 0 0 512 512;\" version=\"1.1\" viewBox=\"0 0 512 512\" xml:space=\"preserve\" width=\"${this.size}\" height=\"${this.size}\">\n          <style type=\"text/css\">\n            .st0{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}\n            .st1{fill-rule:evenodd;clip-rule:evenodd;fill:#EC1C24;}\n          </style>\n          <g><path class=\"st0\" d=\"M256,0c70.7,0,134.7,28.7,181,75c46.3,46.3,75,110.3,75,181c0,70.7-28.7,134.7-75,181   c-46.3,46.3-110.3,75-181,75c-70.7,0-134.7-28.7-181-75C28.7,390.7,0,326.7,0,256c0-70.7,28.7-134.7,75-181S185.3,0,256,0z\"/><path class=\"st1\" d=\"M512,256c0-70.7-28.7-134.7-75-181C390.7,28.7,326.7,0,256,0C193,0,135.5,22.8,90.9,60.6l-0.1-0.1   C85.3,65.1,80,69.9,75,75c-5,5.1-9.9,10.3-14.5,15.8l0.1,0.1C22.8,135.5,0,193,0,256c0,70.7,28.7,134.7,75,181   c46.3,46.3,110.3,75,181,75c63,0,120.5-22.8,165.1-60.6l0.1,0.1c5.4-4.6,10.7-9.5,15.8-14.5c5-5,9.9-10.3,14.5-15.8l-0.1-0.1   C489.2,376.6,512,319,512,256z M256,42.9c58.9,0,112.1,23.9,150.7,62.4c38.6,38.6,62.4,91.9,62.4,150.7c0,51.1-18.1,98-48.1,134.8   L121.2,90.9C158,60.9,204.9,42.9,256,42.9z M256,469.1c-58.8,0-112.1-23.9-150.7-62.4C66.7,368.1,42.9,314.9,42.9,256   c0-51.1,18.1-98,48.1-134.8l299.8,299.8C354,451.1,307.1,469.1,256,469.1z\"/></g>\n        </svg>\n      `;\n\n      const errorIconElement = parser.parseFromString(errorIconString, 'image/svg+xml').documentElement;\n\n      if (svgPrevious) svgPrevious.remove();\n      this.shadowRoot.appendChild(errorIconElement);\n    }\n  }\n\n  getUrl() {\n    let url;\n\n    switch (this.set) {\n      case 'bootstrap': url = 'https://unpkg.com/bootstrap-icons@latest/icons'; break;\n      case 'font-awesome-brands': url = 'https://unpkg.com/@fortawesome/fontawesome-free@latest/svgs/brands'; break;\n      case 'font-awesome-regular': url = 'https://unpkg.com/@fortawesome/fontawesome-free@latest/svgs/regular'; break;\n      case 'font-awesome-solid': url = 'https://unpkg.com/@fortawesome/fontawesome-free@latest/svgs/solid'; break;\n      default: url = 'https://unpkg.com/bootstrap-icons@latest/icons';\n    }\n\n    return url;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-icon') || customElements.define('kemet-icon', KemetIcon);\n\nclass KemetAccordionPanel extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: block;\n          padding: 1.5rem 1rem;\n          border-bottom: 1px solid var(--kemet-color-primary);\n        }\n\n        .trigger {\n          cursor: pointer;\n          display: grid;\n          gap: 1rem;\n          grid-template-columns: 1fr auto;\n          width: 100%;\n          text-align: left;\n          padding: 0;\n          border: none;\n          background: none;\n        }\n\n        .body {\n          overflow: hidden;\n          transition: all var(--kemet-accordion-panel-transition-speed, 300ms) ease;\n        }\n\n        ::slotted([slot='body']) {\n          padding: 1rem 0;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines the opened state of the panel\n       */\n      opened: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Sets the max height of the panel's body\n       */\n      maxHeight: {\n        type: String,\n        attribute: 'max-height',\n      },\n      /**\n       * Uniquely identifies a panel for accessibility purposes\n       */\n      slug: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.opened = undefined;\n    this.maxHeight = '0px';\n    this.slug = 'panel';\n  }\n\n  firstUpdated() {\n    this.focusableSelector = 'body, a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\n    this.bodyElement = this.querySelector('[slot=\"body\"]');\n    this.bodyElementFirst = this.bodyElement.querySelector(':first-child');\n    this.bodyElementLast = this.bodyElement.querySelector(':last-child');\n\n    if (this.bodyElementFirst) this.bodyElementFirst.style.marginTop = 0;\n    if (this.bodyELementLast) this.bodyElementLast.style.marginBottom = 0;\n  }\n\n  updated(prevProps) {\n    if (!prevProps.get('opened') && this.opened === true) {\n      this.maxHeight = `${this.bodyElement.offsetHeight}px`;\n\n      /**\n       * Fires when a panel is opened\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-accordion-panel-opened', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    if (prevProps.get('opened') && this.opened === false) {\n      this.maxHeight = '0px';\n\n      /**\n       * Fires when a panel is closed\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-accordion-panel-closed', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    this.a11y();\n    this.focusableBodyElements();\n  }\n\n  render() {\n    return $`\n      <button\n        class=\"trigger\"\n        part=\"trigger\"\n        @click=${() => this.toggle()}\n        @keydown=${event => this.handleKeyDown(event)}\n      >\n        <slot name=\"trigger\"></slot>\n        <slot name=\"icon\"></slot>\n      </button>\n      <section class=\"body\" part=\"body\" style=\"max-height:${this.maxHeight};\">\n        <slot name=\"body\"></slot>\n      </section>\n    `;\n  }\n\n  toggle() {\n    this.opened = !this.opened;\n  }\n\n  focusableBodyElements() {\n    const focusableElements = this.bodyElement.querySelectorAll(this.focusableSelector);\n\n    if (this.opened) {\n      focusableElements.forEach((element) => {\n        element.removeAttribute('tabindex');\n      });\n    } else {\n      focusableElements.forEach((element) => {\n        element.setAttribute('tabindex', '-1');\n      });\n    }\n  }\n\n  a11y() {\n    const trigger = this.shadowRoot.querySelector('.trigger');\n    const body = this.shadowRoot.querySelector('.body');\n\n    trigger.setAttribute('id', `${this.slug}-button`);\n    trigger.setAttribute('aria-controls', `${this.slug}-content`);\n\n    body.setAttribute('id', `${this.slug}-content`);\n    body.setAttribute('aria-labelledby', `${this.slug}-button`);\n    body.setAttribute('aria-hidden', `${!this.opened}`);\n  }\n\n  handleKeyDown(event) {\n    if (event.key === 'Space' || event.key === 'Enter') {\n      this.toggle();\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-accordion-panel') || customElements.define('kemet-accordion-panel', KemetAccordionPanel);\n\nclass KemetAccordion extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: block;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The index value for the most recently opened panel\n       */\n      currentPanel: {\n        type: Number,\n      },\n      /**\n       * Support for closing all inactive panels when one is opened\n       */\n      togglePanels: {\n        type: Boolean,\n        attribute: 'toggle-panels',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.togglePanels = false;\n    this.currentPanel = undefined;\n\n    // bindings\n    this.addEventListener('kemet-accordion-panel-opened', this.handlePanelOpened.bind(this));\n  }\n\n  firstUpdated() {\n    this.onKeyDown = event => this.handleKeyDown(event);\n  }\n\n  render() {\n    return $`<slot @slotchange=${event => this.handleSlotChange(event)}></slot>`;\n  }\n\n  handleSlotChange() {\n    this.panels = this.querySelectorAll('kemet-accordion-panel');\n\n    this.panels.forEach((panel) => {\n      panel.removeEventListener('keydown', this.onKeyDown);\n      panel.addEventListener('keydown', this.onKeyDown);\n    });\n  }\n\n  handlePanelOpened(event) {\n    if (this.togglePanels) {\n      this.panels.forEach((panel) => {\n        if (panel !== event.detail) {\n          panel.opened = false;\n        }\n      });\n    }\n  }\n\n  navigatePanels(direction) {\n    switch (direction) {\n      case 'home':\n        this.currentPanel = 0;\n        break;\n      case 'end':\n        this.currentPanel = this.panels.length - 1;\n        break;\n      case 'next':\n        this.currentPanel += 1;\n        break;\n      case 'prev':\n        this.currentPanel -= 1;\n        break;\n      default:\n        this.currentPanelFocus = 0;\n        break;\n    }\n\n    if (this.currentPanel > this.panels.length - 1) this.currentPanel = 0;\n    if (this.currentPanel < 0) this.currentPanel = this.panels.length - 1;\n\n    this.panels[this.currentPanel].shadowRoot.querySelector('button').focus();\n  }\n\n  handleKeyDown(event) {\n    switch (event.key) {\n      case 'Enter':\n      case 'Space':\n        event.preventDefault();\n        event.target.click();\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        event.preventDefault();\n        this.navigatePanels('prev');\n        break;\n      case 'ArrowRight':\n      case 'ArrowDown':\n        event.preventDefault();\n        this.navigatePanels('next');\n        break;\n      case 'End':\n        event.preventDefault();\n        this.navigatePanels('end');\n        break;\n      case 'Home':\n        event.preventDefault();\n        this.navigatePanels('home');\n        break;\n    }\n  }\n\n  expandAll() {\n    this.panels.forEach((panel) => {\n      panel.opened = true;\n    });\n  }\n\n  collapseAll() {\n    this.panels.forEach((panel) => {\n      panel.opened = false;\n    });\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-accordion') || customElements.define('kemet-accordion', KemetAccordion);\n\nclass KemetBadge extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          padding: var(--kemet-badge-padding, 10px);\n          line-height: 1;\n          color: var(--kemet-color-white);\n        }\n\n        :host([status='primary']) {\n          background-color: var(--kemet-color-primary);\n        }\n\n        :host([status='success']) {\n          background-color: var(--kemet-color-success);\n        }\n\n        :host([status='standard']) {\n          background-color: var(--kemet-color-gray6);\n        }\n\n        :host([status='warning']) {\n          background-color: var(--kemet-color-warning);\n        }\n\n        :host([status='error']) {\n          background-color: var(--kemet-color-error);\n        }\n\n        :host([circle]) {\n          border-radius: 50%;\n        }\n\n        :host([pill]) {\n          border-radius: 99rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The status of the badge\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Displays the badge in a circle\n       */\n      circle: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Rounds the corners on the badge\n       */\n      pill: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Padding on the badge as a circle\n       */\n      circlePadding: {\n        type: Number,\n        attribute: 'circle-padding',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.status = 'primary';\n    this.pill = false;\n    this.circle = false;\n    this.circlePadding = 0;\n  }\n\n  render() {\n    return $`<slot @slotchange=${() => this.handleSlotChange()}></slot>`;\n  }\n\n  handleSlotChange() {\n    if (this.circle) {\n      this.style.height = `${this.offsetWidth + this.circlePadding}px`;\n      this.style.width = `${this.offsetWidth + this.circlePadding}px`;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-badge') || customElements.define('kemet-badge', KemetBadge);\n\nclass FormSubmitController {\n  host;\n  form;\n  options;\n\n  constructor(host, options) {\n    (this.host = host).addController(this);\n    this.options = {\n      form: (input) => input.closest('form'),\n      name: (input) => input.name,\n      value: (input) => input.value,\n      disabled: (input) => input.disabled,\n      checkValidity: (input) => (typeof input.checkValidity === 'function' ? input.checkValidity() : true),\n      ...options,\n    };\n\n    this.handleFormData = this.handleFormData.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n\n  hostConnected() {\n    this.form = this.options.form(this.host);\n\n    if (this.form) {\n      this.form.addEventListener('formdata', this.handleFormData);\n      this.form.addEventListener('submit', this.handleFormSubmit);\n    }\n  }\n\n  hostDisconnected() {\n    if (this.form) {\n      this.form.removeEventListener('formdata', this.handleFormData);\n      this.form.removeEventListener('submit', this.handleFormSubmit);\n      this.form = undefined;\n    }\n  }\n\n  handleFormData(event) {\n    const disabled = this.options.disabled(this.host);\n    const name = this.options.name(this.host);\n    const value = this.options.value(this.host);\n\n    if (!disabled && typeof name === 'string' && typeof value !== 'undefined') {\n      if (Array.isArray(value)) {\n        value.forEach((val) => {\n          event.formData?.append(name, val.toString());\n        });\n      } else {\n        event.formData?.append(name, value.toString());\n      }\n    }\n  }\n\n  handleFormSubmit(event) {\n    const disabled = this.options.disabled(this.host);\n    const checkValidity = this.options.checkValidity;\n\n    this.form = this.options.form(this.host);\n\n    if (this.form && !this.form.noValidate && !disabled && !checkValidity(this.host)) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      const components = this.form.querySelectorAll('kemet-input, kemet-textarea, kemet-select, kemet-checkbox, kemet-radios');\n\n      components.forEach((component) => {\n        component.checkValidity();\n\n        if (!component.checkValidity()) {\n          component.status = 'error';\n          component.invalid = true;\n\n          component.dispatchEvent(\n            new CustomEvent('kemet-input-status', {\n              bubbles: true,\n              composed: true,\n              detail: {\n                status: 'error',\n                validity: component.validity ? component.validity : {},\n                element: component,\n              },\n            })\n          );\n        }\n\n        if (component.checkLimitValidity && !component.checkLimitValidity()) {\n          component.status = 'error';\n          component.invalid = true;\n\n          component.dispatchEvent(\n            new CustomEvent('kemet-input-status', {\n              bubbles: true,\n              composed: true,\n              detail: {\n                status: 'error',\n                validity: { passedLimit: true },\n                element: component,\n              },\n            })\n          );\n        }\n      });\n    }\n  }\n\n  submit() {\n    const button = document.createElement('button');\n\n    if (this.form) {\n      button.type = 'submit';\n      button.style.position = 'absolute';\n      button.style.width = '0';\n      button.style.height = '0';\n      button.style.clip = 'rect(0 0 0 0)';\n      button.style.clipPath = 'inset(50%)';\n      button.style.overflow = 'hidden';\n      button.style.whiteSpace = 'nowrap';\n      this.form.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n}\n\nclass KemetButton extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: pointer;\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          font-size: var(--kemet-button-font-size, inherit);\n          color: var(--kemet-button-color, var(--kemet-color-white));\n          width: var(--kemet-button-width, auto);\n          height: var(--kemet-button-height, auto);\n          border: var(--kemet-button-border, 0);\n          border-radius: var(--kemet-button-border-radius, 0);\n          transition: filter var(--kemet-button-transition-speed, 300ms) ease;\n          background-color: var(--kemet-button-background-color, var(--kemet-color-primary));\n        }\n\n        :host(:hover:not([disabled])) {\n          filter: brightness(var(--kemet-button-hover-brightness, 1.25));\n        }\n\n        :host([disabled]) {\n          opacity: var(--kemet-button-disabled-opacity, 0.5);\n        }\n\n        .button {\n          cursor: pointer;\n          text-decoration: none;\n          display: flex;\n          gap: var(--kemet-button-gap, 0.5rem);\n          align-items: center;\n          color: inherit;\n          font-size: inherit;\n          padding: var(--kemet-button-padding, 1rem 1.25rem);\n          border: 0;\n          background: none;\n        }\n\n        :host([disabled]) .button {\n          cursor: not-allowed;\n        }\n\n        :host([type='text']) {\n          --kemet-button-color: var(--kemet-color-primary);\n          --kemet-button-background-color: none;\n        }\n\n        :host([type='text']:hover) {\n          text-decoration: var(--kemet-button-hover-decoration, underline);\n        }\n\n        :host([type='circle']) {\n          --kemet-button-border-radius: 50%;\n          --kemet-button-width: var(--kemet-button-circle-size, 50px);\n          --kemet-button-height: var(--kemet-button-circle-size, 50px);\n        }\n\n        :host([type='rounded']) {\n          --kemet-button-border-radius: var(--kemet-button-rounded-amount, 6px);\n        }\n\n        :host([type='pill']) {\n          --kemet-button-border-radius: 10rem;\n        }\n\n        :host([outlined]) {\n          --kemet-button-color: var(--kemet-color-primary);\n          --kemet-button-background-color: var(--kemet-color-white);\n          --kemet-button-border: var(--kemet-button-border-width, 1px) var(--kemet-button-border-style, solid) var(--kemet-button-border-color, var(--kemet-color-primary));\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines whether or not the button is active\n       */\n      active: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Is true when the button is hovered\n       */\n      hover: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Is true when the button is focused\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The url a button should link too\n       */\n      link: {\n        type: String,\n      },\n      /**\n       * Outline style for a button\n       */\n      outlined: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines whether not a button is disabled\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Controls the type of button\n       * standard | text | circle | rounded | pill\n       */\n      type: {\n        type: String,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.addEventListener('click', this.handleClick.bind(this));\n    this.addEventListener('mouseover', this.handleMouseOver.bind(this));\n    this.addEventListener('mouseout', this.handleMouseOut.bind(this));\n    this.addEventListener('blur', this.handleBlur.bind(this));\n    this.addEventListener('keyup', event => this.handleKeyUp(event));\n\n    this.type = 'standard';\n    this.outline = false;\n    this.disable = false;\n\n    /**\n      * Used only for form reactive controller\n      */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  render() {\n    if (this.link && !this.disabled) {\n      return $`\n        <a href=${this.link} class=\"button\" role=\"button\" part=\"button\">\n          <slot name=\"left\"></slot>\n          <slot></slot>\n          <slot name=\"right\"></slot>\n        </a>\n      `;\n    }\n\n    return $`\n      <button class=\"button\" part=\"button\" ?disabled=${this.disabled} aria-disabled=${this.disabled ? 'true' : 'false'}>\n        <slot name=\"left\"></slot>\n        <slot></slot>\n        <slot name=\"right\"></slot>\n      </button>\n    `;\n  }\n\n  /**\n   * Sets hover to true onMouseOver\n   * @private\n   */\n  handleMouseOver() {\n    this.hover = true;\n  }\n\n  /**\n   * Sets hover to false onMouseOut\n   * @private\n   */\n  handleMouseOut() {\n    this.hover = false;\n  }\n\n  /**\n   * Handles click behavior\n   * @private\n   */\n  handleClick() {\n    this.hover = false;\n    this.active = true;\n\n    setTimeout(() => {\n      this.active = false;\n    }, 300);\n\n    if (this.shadowRoot.querySelector('button')) {\n      this.formSubmitController.submit(this);\n    }\n  }\n\n  /**\n   * Handles blur\n   * @private\n   */\n  handleBlur() {\n    this.focused = false;\n    this.active = false;\n    this.hover = false;\n  }\n\n  /**\n   * Handles keyup\n   * @private\n   * @param {object} event - event object\n   */\n  handleKeyUp(event) {\n    if (event.key === 'Tab') {\n      this.focused = true;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-button') || customElements.define('kemet-button', KemetButton);\n\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const l$1=l=>null!=l?l:w;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e$1=t=>(...e)=>({_$litDirective$:t,values:e});class i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i;}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const r=o=>void 0===o.strings,f={},s=(o,i=f)=>o._$AH=i;\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const l=e$1(class extends i{constructor(r$1){if(super(r$1),r$1.type!==t.PROPERTY&&r$1.type!==t.ATTRIBUTE&&r$1.type!==t.BOOLEAN_ATTRIBUTE)throw Error(\"The `live` directive is not allowed on child or event bindings\");if(!r(r$1))throw Error(\"`live` bindings can only contain a single expression\")}render(r){return r}update(i,[t$1]){if(t$1===b||t$1===w)return t$1;const o=i.element,l=i.name;if(i.type===t.PROPERTY){if(t$1===o[l])return b}else if(i.type===t.BOOLEAN_ATTRIBUTE){if(!!t$1===o.hasAttribute(l))return b}else if(i.type===t.ATTRIBUTE&&o.getAttribute(l)===t$1+\"\")return b;return s(i),t$1}});\n\nclass KemetCheckbox extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: inline-block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n\n        label {\n          display: inline-flex;\n          gap: 0.5rem;\n          align-items: center;\n        }\n\n        input {\n          cursor: pointer;\n          margin: 0;\n          padding: 0;\n          width: var(--kemet-checkbox-size, 18px);\n          height: var(--kemet-checkbox-size, 18px);\n          position: absolute;\n          opacity: 0;\n        }\n\n        button {\n          margin: 0;\n          border: none;\n          background: none;\n        }\n\n        [part='checkbox'] {\n          color: var(--kemet-checkbox-color, var(--kemet-color-primary));\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: var(--kemet-checkbox-size, 18px);\n          height: var(--kemet-checkbox-size, 18px);\n          border: var(--kemet-checkbox-border, 1px solid var(--kemet-color-primary));\n        }\n\n        :host([rounded]) [part='checkbox'] {\n          border-radius: var(--kemet-checkbox-border-radius, 4px);\n        }\n\n        :host([filled][checked]) [part='checkbox'],\n        :host([filled][indeterminate]) [part='checkbox'] {\n          border: none;\n          background-color: var(--kemet-checkbox-filled-background-color, var(--kemet-color-primary));\n        }\n\n        [part='mark'] {\n          display: flex;\n          width: calc(var(--kemet-checkbox-size, 18px) - 4px);\n          height: calc(var(--kemet-checkbox-size, 18px) - 4px);\n        }\n\n        :host([filled][checked]) [part='mark'],\n        :host([filled][indeterminate]) [part='mark'] {\n          color: var(--kemet-checkbox-filled-color, var(--kemet-color-white));\n        }\n\n        [part='message'] {\n          display: block;\n          margin-top: 0.5rem;\n        }\n\n        :host([status='error']) [part='message'] {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='warning']) [part='message'] {\n          color: var(--kemet-color-error);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      label: {\n        type: String,\n      },\n      checked: {\n        type: Boolean,\n        reflect: true,\n      },\n      indeterminate: {\n        type: Boolean,\n        reflect: true,\n      },\n      name: {\n        type: String,\n      },\n      value: {\n        type: String,\n      },\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      required: {\n        type: Boolean,\n        reflect: true,\n      },\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      rounded: {\n        type: Boolean,\n        reflect: true,\n      },\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      status: {\n        type: String,\n        reflect: true,\n      },\n      message: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.label = '';\n    this.name = 'checkbox';\n    this.disabled = false;\n    this.required = false;\n    this.rounded = false;\n    this.filled = false;\n    this.status = 'standard';\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  firstUpdated() {\n    this.input = this.shadowRoot.querySelector('input');\n  }\n\n  render() {\n    return $`\n      <label part=\"label\">\n        <input\n          type=\"checkbox\"\n          name=${l$1(this.name)}\n          .value=${this.value}\n          .indeterminate=${l(this.indeterminate)}\n          .checked=${l(this.checked)}\n          .disabled=${this.disabled}\n          .required=${this.required}\n          aria-checked=${this.checked ? 'true' : 'false'}\n          @click=${() => this.handleClick()}\n          @blur=${() => this.handleBlur()}\n          @focus=${() => this.handleFocus()}\n          @change=${() => this.handleChange()}\n        />\n        <button part=\"checkbox\" aria-label=${this.label}>\n          ${this.makeCheckMark()}\n        </button>\n        <span part=\"text\">${this.label}</span>\n      </label>\n      ${this.makeMessage()}\n    `;\n  }\n\n  click() {\n    this.input.click();\n  }\n\n  handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n\n    /**\n     * Fires when the state of the checkbox changes\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-checkbox-change', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }),\n    );\n  }\n\n  handleBlur() {\n    this.focused = false;\n\n    /**\n     * Fires when the checkbox loses or receives focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-checkbox-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n  }\n\n  handleFocus() {\n    this.focused = true;\n    /**\n     * Fires when the checkbox loses or receives focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-checkbox-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  handleChange() {\n    this.value = this.checked;\n\n    if (this.input.checkValidity()) {\n      this.status = 'standard';\n    }\n  }\n\n  makeMessage() {\n    if (this.status === 'error' || this.status === 'warning') {\n      return $`<span part=\"message\">${this.message}</span>`;\n    }\n\n    return null;\n  }\n\n  makeCheckMark() {\n    if (this.checked) {\n      return $`\n        <span part=\"mark\">\n          <svg viewBox=\"0 0 16 16\">\n            <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n              <g stroke=\"currentColor\" stroke-width=\"2\">\n                <g transform=\"translate(3.428571, 3.428571)\">\n                  <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                  <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                </g>\n              </g>\n            </g>\n          </svg>\n        </span>\n      `;\n    }\n\n    if (!this.checked && this.indeterminate) {\n      return $`\n        <span part=\"mark\">\n          <svg viewBox=\"0 0 16 16\">\n            <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n              <g stroke=\"currentColor\" stroke-width=\"2\">\n                <g transform=\"translate(2.285714, 6.857143)\">\n                  <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                </g>\n              </g>\n            </g>\n          </svg>\n        </span>\n      `;\n    }\n\n    return null;\n  }\n\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-checkbox') || customElements.define('kemet-checkbox', KemetCheckbox);\n\nclass KemetCarouselCurrent extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: inline-block;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      current: {\n        type: Number,\n      },\n    };\n  }\n\n  firstUpdated() {\n    this.carousel = this.closest('kemet-carousel');\n  }\n\n  updated() {\n    this.current = this.carousel.index + 1;\n  }\n\n  render() {\n    return $`${this.current}`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-current') || customElements.define('kemet-carousel-current', KemetCarouselCurrent);\n\nclass KemetCarouselFirst extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: pointer;\n        }\n\n        :host([disabled]) {\n          cursor: not-allowed;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  render() {\n    return $`\n      <span tabindex=\"0\" @keyup=${() => this.first()} @click=${() => this.first()}>\n        <slot></slot>\n      </span>\n    `;\n  }\n\n  first() {\n    if (!this.disabled) {\n      this.dispatchEvent(new CustomEvent('kemet-carousel-first', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }));\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-first') || customElements.define('kemet-carousel-first', KemetCarouselFirst);\n\nclass KemetCarouselLast extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: pointer;\n        }\n\n        :host([disabled]) {\n          cursor: not-allowed;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  render() {\n    return $`\n      <span tabindex=\"0\" @keyup=${() => this.last()} @click=${() => this.last()}>\n        <slot></slot>\n      </span>\n    `;\n  }\n\n  last() {\n    if (!this.disabled) {\n      this.dispatchEvent(new CustomEvent('kemet-carousel-last', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }));\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-last') || customElements.define('kemet-carousel-last', KemetCarouselLast);\n\nclass KemetCarouselPrev extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: pointer;\n        }\n\n        :host([disabled]) {\n          cursor: not-allowed;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  render() {\n    return $`\n      <span tabindex=\"0\" @keyup=${() => this.prev()} @click=${() => this.prev()}>\n        <slot></slot>\n      </span>\n    `;\n  }\n\n  prev() {\n    if (!this.disabled) {\n      this.dispatchEvent(new CustomEvent('kemet-carousel-prev', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }));\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-prev') || customElements.define('kemet-carousel-prev', KemetCarouselPrev);\n\nclass KemetCarouselLink extends s$1 {\n  static get properties() {\n    return {\n      slide: {\n        type: Number,\n        reflect: true,\n      },\n      selected: {\n        type: Boolean,\n        reflect: true,\n      },\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  static get styles() {\n    return [\n      r$3`\n        :host([selected]) {\n          color: var(--kemet-carousel-link-selected-color, var(--kemet-color-primary));\n        }\n\n        :host(:not([selected])) {\n          cursor: pointer;\n        }\n\n        :host([disabled]) {\n          cursor: not-allowed;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return $`\n      <span tabindex=\"0\" @keyup=${() => this.changed()} @click=${() => this.changed()}>\n        <slot></slot>\n      </span>\n    `;\n  }\n\n  changed() {\n    if (!this.disabled) {\n      this.dispatchEvent(new CustomEvent('kemet-carousel-link', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }));\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-link') || customElements.define('kemet-carousel-link', KemetCarouselLink);\n\nclass KemetCarouselNext extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: pointer;\n        }\n\n        :host([disabled]) {\n          cursor: not-allowed;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  render() {\n    return $`\n      <span tabindex=\"0\" @keyup=${() => this.next()} @click=${() => this.next()}>\n        <slot></slot>\n      </span>\n    `;\n  }\n\n  next() {\n    if (!this.disabled) {\n      this.dispatchEvent(new CustomEvent('kemet-carousel-next', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }));\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-next') || customElements.define('kemet-carousel-next', KemetCarouselNext);\n\nclass KemetCarouselSlide extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host,\n        :host *,\n        :host *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          flex: 0 0 auto;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines if the slide is selected\n       */\n      selected: {\n        type: Boolean,\n        reflect: true,\n      },\n      'aria-hidden': {\n        type: String,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.selected = false;\n    this['aria-hidden'] = 'true';\n  }\n\n  render() {\n    return $`\n      <slot></slot>\n    `;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-slide') || customElements.define('kemet-carousel-slide', KemetCarouselSlide);\n\nclass KemetCarouselTotal extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: inline-block;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      total: {\n        type: Number,\n      },\n    };\n  }\n\n  firstUpdated() {\n    this.carousel = this.closest('kemet-carousel');\n  }\n\n  updated() {\n    this.total = this.carousel.total;\n  }\n\n  render() {\n    return $`${this.total}`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel-total') || customElements.define('kemet-carousel-total', KemetCarouselTotal);\n\nclass KemetCarousel extends s$1 {\n  static get styles() {\n    return r$3`\n      :host,\n      *,\n      *::before,\n      *::after {\n        box-sizing: border-box;\n      }\n\n      :host {\n        position: relative;\n        display: grid;\n        grid-template-columns: minmax(0, 1fr);\n        align-items: center;\n        width: var(--kemet-carousel-width, 100%);\n        height: var(--kemet-carousel-height, auto);\n        overflow: visible;\n      }\n\n      :host([arrows]) {\n        grid-template-columns: auto minmax(0, 1fr) auto;\n      }\n\n      .toolbar {\n        display: flex;\n        gap: var(--kemet-carousel-toolbar-gap, 1rem);\n        align-items: center;\n        justify-content: var(--kemet-carousel-toolbar-justify-content, center);\n        line-height: 1;\n        padding: var(--kemet-carousel-toolbar-padding, 1rem);\n      }\n\n      :host([inner]) .toolbar {\n        width: var(--kemet-carousel-toolbar-inner-width, 100%);\n        position: absolute;\n        bottom: var(--kemet-carousel-toolbar-inner-bottom, 0);\n        top: var(--kemet-carousel-toolbar-inner-top, auto);\n        color: var(--kemet-carousel-toolbar-inner-color, var(--kemet-color-white));\n        background-color: var(--kemet-carousel-toolbar-inner-background-color, rgba(0, 0, 0, 0.4));\n      }\n\n      .slides {\n        overflow: hidden;\n        position: relative;\n        padding: 1rem 0;\n        border: var(--kemet-carousel-slides-border, 1px solid var(--kemet-color-gray1));\n      }\n\n      .slider {\n        display: flex;\n        flex-wrap: nowrap;\n        transition: transform var(--kemet-carousel-transition-speed, 300ms) ease;\n      }\n\n      ::slotted([slot='next']),\n      ::slotted([slot='prev']) {\n        opacity: var(--kemet-carousel-arrows-opacity, 0.25);\n        transition: opacity var(--kemet-carousel-arrows-transition-speed, 300ms) ease-in-out;\n      }\n\n      :host(:hover) ::slotted([slot='next']),\n      :host(:hover) ::slotted([slot='prev']) {\n        opacity: var(--kemet-carousel-arrows-opacity-hover, 1);\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The current slide index.\n       */\n      index: {\n        type: Number,\n        reflect: true,\n      },\n      /**\n       * The total amount of slides\n       */\n      total: {\n        type: Number,\n      },\n      /**\n       * The width of the slider\n       */\n      sliderWidth: {\n        type: String,\n      },\n      /**\n       * The X position of the slider\n       */\n      sliderTranslateX: {\n        type: String,\n      },\n      /**\n       * Displays the toolbar inside the carousel container\n       */\n      inner: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines whether or not to display arrows\n       */\n      arrows: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Default options for the carousel\n       */\n      options: {\n        type: Object,\n      },\n      /**\n       * Options are different breakpoints for the carousel. Is mobile first.\n       */\n      breakpoints: {\n        type: Object,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.index = 0;\n    this.total = 0;\n    this.sliderWidth = 'auto';\n    this.sliderTranslateX = '0';\n    this.inner = false;\n    this.arrows = false;\n    this.options = {\n      perView: 1,\n      perMove: 1,\n      gap: 12,\n      slideshow: 0,\n      rewind: true,\n      center: false,\n    };\n    this.breakpoints = {\n      768: {\n        perView: 2,\n        gap: 24,\n        rewind: false,\n      },\n      1280: {\n        perView: 2.5,\n        center: true,\n      },\n    };\n\n    // bindings\n    this.addEventListener('kemet-carousel-first', this.handleFirst.bind(this));\n    this.addEventListener('kemet-carousel-last', this.handleLast.bind(this));\n    this.addEventListener('kemet-carousel-next', this.handleNext.bind(this));\n    this.addEventListener('kemet-carousel-prev', this.handlePrev.bind(this));\n    this.addEventListener('kemet-carousel-link', this.handleLink.bind(this));\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.slides = [];\n    this.links = [];\n\n    // elements\n    this.containerElement = this.shadowRoot.querySelector('[part=\"container\"]');\n    this.slidesElement = this.shadowRoot.querySelector('[part=\"slides\"]');\n    this.sliderElement = this.shadowRoot.querySelector('[part=\"slider\"]');\n    this.toolbarElement = this.shadowRoot.querySelector('[part=\"toolbar\"]');\n    this.toolbarSlotElement = this.querySelector('[slot=\"toolbar\"]');\n    this.informationElement = this.querySelector('kemet-carousel-information');\n\n    // events\n    window.addEventListener('resize', () => {\n      this.setSlideSize();\n      this.setToolbarSize();\n      this.updateIndex(this.index);\n    });\n\n    this.sliderElement.addEventListener('transitionend', this.handleTransitionEnd.bind(this));\n\n    // methods\n    this.swipeMove = (event) => {\n      event.preventDefault();\n\n      const pageX = event.touches ? event.touches[0].pageX : event.pageX;\n      const currentSlide = this.slides[this.index];\n\n      this.sliderTranslateX = `${pageX - this.startX - currentSlide.offsetLeft}px`;\n    };\n\n    this.handleSlideShow = () => {\n      if (this.getOption('slideshow') > 0) {\n        this.updateIndex(this.index + 1);\n        clearTimeout(this.handleSlideShow);\n      }\n    };\n\n    // setup\n    this.setSlideSize();\n    this.goToSlide(this.index);\n  }\n\n  updated(prevProps) {\n    this.setSlideSize();\n    this.setToolbarSize();\n\n    if (prevProps.has('index')) {\n      this.updateIndex(this.index);\n      setTimeout(this.handleSlideShow, this.getOption('slideshow') * 1000);\n    }\n  }\n\n  render() {\n    return $`\n      <slot name=\"prev\" @slotchange=${this.handleArrows}></slot>\n      <div class=\"container\" part=\"container\">\n        <section\n          class=\"slides\"\n          part=\"slides\"\n          @mousedown=${this.swipeStart}\n          @mouseup=${this.swipeEnd}\n          @touchstart=${this.swipeStart}\n          @touchend=${this.swipeEnd}\n          @mouseleave=${this.swipeLeave}\n        >\n          <div class=\"slider\" part=\"slider\" style=\"width:${this.sliderWidth}; transform:translateX(${this.sliderTranslateX});\">\n            <slot name=\"slides\" @slotchange=\"${this.handleSlotChange}\"></slot>\n          </div>\n        </section>\n        ${this.makeToolbar()}\n      </div>\n      <slot name=\"next\" @slotchange=${this.handleArrows}></slot>\n    `;\n  }\n\n  swipeStart(event) {\n    this.startX = event.touches ? event.touches[0].pageX : event.pageX;\n\n    this.addEventListener('mousemove', this.swipeMove);\n    this.addEventListener('touchmove', this.swipeMove);\n  }\n\n  swipeEnd(event) {\n    this.updateIndex(this.swipeUpdate(event));\n    this.removeEventListener('mousemove', this.swipeMove, false);\n    this.removeEventListener('touchmove', this.swipeMove, false);\n  }\n\n  swipeUpdate(event) {\n    const pageX = event.changedTouches ? event.changedTouches[0].pageX : event.pageX;\n    const direction = this.startX > pageX ? 'right' : 'left';\n    const threshold = this.slidesElement.offsetWidth / 3;\n    const diff = this.startX - pageX;\n    const shouldUpdate = Math.abs(diff) > threshold;\n\n    let { index } = this;\n\n    if (shouldUpdate && direction === 'right') {\n      index = this.index >= this.slides.length - 1 ? this.index : this.index + 1;\n    }\n\n    if (shouldUpdate && direction === 'left') {\n      index = this.index < 1 ? 0 : this.index - 1;\n    }\n\n    return index;\n  }\n\n  swipeLeave() {\n    this.updateIndex(this.index);\n    this.removeEventListener('mousemove', this.swipeMove, false);\n    this.removeEventListener('touchmove', this.swipeMove, false);\n  }\n\n  setSlideSize() {\n    this.slideWidth = this.containerElement.offsetWidth / this.getOption('perView');\n\n    this.slides.forEach((slide) => {\n      slide.style.marginLeft = `${this.getOption('gap') / 2}px`;\n      slide.style.marginRight = `${this.getOption('gap') / 2}px`;\n      slide.style.width = `${this.slideWidth - this.getOption('gap')}px`;\n    });\n\n    this.sliderWidth = `${this.slideWidth * this.slides.length}px`;\n  }\n\n  setToolbarSize() {\n    if (this.inner && this.toolbarElement) {\n      const width = this.slidesElement.offsetWidth;\n      this.toolbarElement.style.width = `${width}px`;\n    }\n  }\n\n  makeToolbar() {\n    if (this.toolbarSlotElement) {\n      return $`\n        <section class=\"toolbar\" part=\"toolbar\">\n          <slot name=\"toolbar\"></slot>\n        </section>\n      `;\n    }\n\n    return null;\n  }\n\n  handleSlotChange() {\n    const slides = this.querySelectorAll('kemet-carousel-slide');\n    const links = this.querySelectorAll('kemet-carousel-link');\n\n    // handle slides\n    slides.forEach((slide) => {\n      this.slides.push(slide);\n    });\n\n    this.updateInformation();\n    this.total = slides.length;\n    slides[this.index].selected = true;\n\n    // handle links\n    links.forEach((link) => {\n      this.links.push(link);\n    });\n  }\n\n  handleArrows() {\n    this.arrows = true;\n  }\n\n  handleFirst() {\n    this.updateIndex(0);\n  }\n\n  handleLast() {\n    this.updateIndex(this.slides.length - 1);\n  }\n\n  handleNext() {\n    let newIndex = this.index + this.getOption('perMove');\n\n    if (newIndex >= this.slides.length) {\n      if (this.getOption('rewind')) {\n        newIndex = 0;\n      } else {\n        newIndex = this.index;\n      }\n    }\n\n    this.updateIndex(newIndex);\n  }\n\n  handlePrev() {\n    let newIndex = this.index - this.getOption('perMove');\n\n    // send them to the last slide\n    if (newIndex < 0) {\n      if (this.getOption('rewind')) {\n        newIndex = this.slides.length - 1;\n      } else {\n        newIndex = this.index;\n      }\n    }\n\n    this.updateIndex(newIndex);\n  }\n\n  updateIndex(newIndex) {\n    let currentSlide = this.slides[this.index];\n    let currentLink = this.links[newIndex];\n\n    // remove selected from all links\n    this.links.forEach((link) => {\n      link.selected = false;\n    });\n\n    // if current link is invalid assume it's the first link\n    if (!currentLink) {\n      [currentLink] = this.links;\n    }\n\n    // add selected to current link\n    if (currentLink) {\n      currentLink.selected = true;\n    }\n\n    if (currentSlide) {\n      currentSlide.setAttribute('aria-hidden', 'true');\n\n      // correct for invalid indexes\n      if (newIndex > -1 && newIndex < this.slides.length) {\n        this.index = newIndex;\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('An invalid index number was entered. The kemet-carousel has been reset to the first slide.');\n        this.index = 0;\n      }\n\n      // move\n      this.goToSlide(this.index);\n\n      // update new slide\n      currentSlide = this.slides[this.index];\n      currentSlide.setAttribute('aria-hidden', 'false');\n\n      this.slides.forEach((slide) => {\n        slide.selected = false;\n      });\n\n      currentSlide.selected = true;\n\n      // notify consumers of slide change\n\n      /**\n       * Fires with the a slide has begun to change\n       */\n      this.dispatchEvent(new CustomEvent('kemet-carousel-change-start', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }));\n\n      // update information element\n      this.updateInformation();\n    }\n  }\n\n  updateInformation() {\n    this.informationSlot = this.slides[this.index].querySelector('[slot=\"information\"]');\n\n    if (this.informationElement) {\n      if (this.informationSlot) {\n        this.informationElement.innerHTML = this.informationSlot.outerHTML;\n      } else {\n        this.informationElement.innerHTML = '';\n      }\n    }\n  }\n\n  goToSlide(index) {\n    if (this.getOption('center') === true) {\n      const slidesCenter = this.slidesElement.offsetWidth / 2;\n      const slideX = this.slideWidth * index;\n      this.sliderTranslateX = `${slideX - (slideX - slidesCenter) - this.slideWidth / 2 - slideX}px`;\n    } else {\n      this.sliderTranslateX = `${(this.slideWidth * index) * -1}px`;\n    }\n  }\n\n  handleTransitionEnd() {\n    const currentElement = this.querySelector('kemet-carousel-current');\n\n    if (currentElement) {\n      currentElement.current = this.index + 1;\n    }\n\n    /**\n     * Fires when a slide has changed and finished animating\n     */\n    this.dispatchEvent(new CustomEvent('kemet-carousel-change-finished', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n\n  handleLink(event) {\n    this.updateIndex(event.detail.slide);\n  }\n\n  getOption(option) {\n    const breakpoints = Object.keys(this.breakpoints);\n    let value = this.options[option];\n\n    breakpoints.forEach((breakpoint) => {\n      if (window.matchMedia(`(min-width: ${breakpoint}px)`).matches && this.breakpoints[breakpoint][option] !== undefined) {\n        value = this.breakpoints[breakpoint][option];\n      }\n\n      return value;\n    });\n\n    return value;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-carousel') || customElements.define('kemet-carousel', KemetCarousel);\n\nclass KemetCombo extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          opacity: 0;\n          width: var(--kemet-combo-width, calc(100% - 2px));\n          margin: var(--kemet-combo-margin, 1rem auto);\n          pointer-events: none;\n          display: block;\n          position: relative;\n          transition: opacity 0.3s ease-in-out;\n        }\n\n        :host([show]) {\n          opacity: 1;\n          pointer-events: auto;\n        }\n\n        ul {\n          width: 100%;\n          max-height: var(--kemet-combo-max-height, calc(5 * 3rem));\n          position: absolute;\n          z-index: 1;\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          overflow-y: scroll;\n          border: var(--kemet-combo-border, 1px solid var(--kemet-color-primary));\n          border-radius: var(--kemet-combo-border-radius, var(--kemet-border-radius));\n          background-color: var(--kemet-combo-background-color, var(--kemet-color-white));\n          box-shadow: var(--kemet-combo-shadow, 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1));\n        }\n        li {\n          line-height: 3rem;\n          padding: 0 1.5rem;\n          cursor: pointer;\n        }\n        li:hover,\n        li:focus {\n          color: var(--kemet-combo-hover-color, var(--kemet-color-white));\n          outline: none;\n          background-color: var(--kemet-combo-hover-background-color, var(--kemet-color-primary));\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Uniquely identifies the component. Should match the slug used in a control.\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * An array of items listed for the combo box\n       */\n      options: {\n        type: Array,\n      },\n      /**\n       * Used internally\n       */\n      filteredOptions: {\n        type: Array,\n      },\n      /**\n       * Controls the display of the combo box\n       */\n      show: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.options = [];\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.field = this.closest('kemet-field');\n    this.input = this.field.querySelector('[slot=\"input\"]');\n\n    // managed properties\n    this.slug = this.field.slug || 'slug';\n\n    // events listeners\n    this.input.addEventListener('kemet-input-input', this.handleInput.bind(this));\n    this.input.addEventListener('keydown', event => this.handleInputKeyDown(event));\n  }\n\n  render() {\n    return $`\n      <div\n        role=\"combobox\"\n        aria-expanded=${this.show}\n        aria-controls=\"${this.slug}-listbox\"\n        aria-haspopup=\"listbox\"\n        id=\"${this.slug}-combobox\"\n        aria-label=\"${this.field?.label}\"\n      >\n        <ul role=\"listbox\" aria-labelledby=\"${this.slug}-label\" id=\"${this.slug}-listbox\">\n          ${this.makeOptions()}\n        </ul>\n      </div>\n    `;\n  }\n\n  makeOptions() {\n    if (this.input) {\n      this.filteredOptions = this.options.filter(\n        option => option.toLowerCase().indexOf(this.input.value?.toLowerCase()) !== -1,\n      );\n\n      const options = this.filteredOptions.map(\n        (option, index) => $`<li\n            id=\"${this.slug}-option-${index}\"\n            role=\"option\"\n            tabindex=\"0\"\n            aria-selected=\"false\"\n            @click=${event => this.handleSelection(event)}\n            @keydown=${event => this.handleOptionKeyDown(event)}\n          >\n            ${option}\n          </li>`,\n      );\n\n      return options;\n    }\n\n    return null;\n  }\n\n  handleInput(event) {\n    this.makeOptions();\n\n    if (event.detail.length > 0) {\n      this.show = true;\n    } else {\n      this.show = false;\n    }\n  }\n\n  handleSelection(event) {\n    this.input.value = event.target.innerText;\n    this.show = false;\n\n    /**\n     * Fires when a selection has been made\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-combo-selection', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          element: event.target,\n          text: event.target.innerText,\n          id: event.target.getAttribute('id'),\n        },\n      }),\n    );\n  }\n\n  handleOptionKeyDown(event) {\n    event.preventDefault();\n\n    if (event.code === 'ArrowDown') {\n      const next = event.target.nextElementSibling;\n\n      if (next) {\n        next.focus();\n      } else {\n        this.shadowRoot.querySelector('li').focus();\n      }\n    }\n\n    if (event.code === 'ArrowUp') {\n      const previous = event.target.previousElementSibling;\n\n      if (previous) {\n        previous.focus();\n      } else {\n        this.shadowRoot.querySelector('li:last-child').focus();\n      }\n    }\n\n    if (event.code === 'Escape' || event.code === 'Tab') {\n      this.show = false;\n      this.input.focus();\n    }\n\n    if (event.code === 'Enter' || event.code === 'Space') {\n      this.handleSelection(event);\n    }\n  }\n\n  handleInputKeyDown(event) {\n    if (event.code === 'ArrowDown') {\n      this.shadowRoot.querySelector('li').focus();\n    }\n\n    if (event.code === 'Escape') {\n      this.show = false;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-combo') || customElements.define('kemet-combo', KemetCombo);\n\nclass KemetCount extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: block;\n          font-size: var(--kemet-count-font-size, 90%);\n          margin-top: 0.8rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The text label shown to users\n       */\n      message: {\n        type: String,\n      },\n      /**\n       * The number of characters remaining\n       */\n      remaining: {\n        type: Number,\n      },\n      /**\n       * The maximum number of characters allowed\n       */\n      limit: {\n        type: Number,\n      },\n      /**\n       * Set to true if the field should validate as soon as the character limit is reached\n       */\n      validateImmediately: {\n        type: Boolean,\n        attribute: 'validate-immediately',\n      },\n    };\n  }\n\n  firstUpdated() {\n    this.field = this.closest('kemet-field');\n    this.inputSlot = this.field.querySelector('[slot=\"input\"]');\n\n    this.remaining = this.limit - this.field.length;\n\n    this.field.addEventListener('kemet-field-input', (event) => {\n      this.remaining = this.limit - event.detail;\n\n      const nativeElement = this.input || this.textarea;\n\n      if (nativeElement) {\n        if (this.remaining < 0) {\n          nativeElement.validity.passedLimit = true;\n\n          if (this.validateImmediately) {\n            this.inputSlot.status = 'error';\n            this.inputSlot.invalid = true;\n\n            /**\n             * Fires when there's a change in status.\n             */\n            this.dispatchEvent(\n              new CustomEvent('kemet-count-status', {\n                bubbles: true,\n                composed: true,\n                detail: {\n                  status: 'error',\n                  validity: nativeElement.validity,\n                  element: this.inputSlot,\n                },\n              }),\n            );\n          }\n        } else {\n          this.inputSlot.status = 'standard';\n          nativeElement.checkValidity();\n\n          /**\n           * Fires when there's a change in status.\n           */\n          this.dispatchEvent(\n            new CustomEvent('kemet-count-status', {\n              bubbles: true,\n              composed: true,\n              detail: {\n                status: 'standard',\n                validity: nativeElement.validity,\n                element: this.inputSlot,\n              },\n            }),\n          );\n        }\n      }\n    });\n\n    this.input = this.inputSlot.shadowRoot.querySelector('input');\n    this.textarea = this.inputSlot.shadowRoot.querySelector('textarea');\n  }\n\n  render() {\n    return $`${this.remaining} ${this.message}`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-count') || customElements.define('kemet-count', KemetCount);\n\nclass KemetDraggable extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        display: inline-block;\n      }\n\n      #draggable {\n        position: absolute;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A unique identifier used to store the element's position in local storage.\n       */\n      memory: {\n        type: String,\n      },\n      /**\n       * The elements top position in pixels.\n       */\n      top: {\n        type: String,\n      },\n      /**\n       * The element's left position in pixels.\n       */\n      left: {\n        type: String,\n      },\n      /**\n       * If set to true, will measure the width and height\n       * of the element's content and apply it to the host element.\n       */\n      measure: {\n        type: Boolean,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties defaults\n    this.top = 'auto';\n    this.left = 'auto';\n    this.measure = false;\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.position1 = 0;\n    this.position2 = 0;\n    this.position3 = 0;\n    this.position4 = 0;\n    this.mouseMove = event => this.drag(event);\n    this.mouseUp = () => this.stopDrag();\n    this.draggableElement = this.shadowRoot.getElementById('draggable');\n\n    const savedPosition = JSON.parse(localStorage.getItem(this.memory));\n\n    if (savedPosition) {\n      this.top = savedPosition.top;\n      this.left = savedPosition.left;\n    }\n\n    if (this.measure) {\n      this.measureContent();\n    }\n  }\n\n  render() {\n    return $`\n      <div id=\"draggable\" @mousedown=${event => this.startDrag(event)} style=\"top:${this.top}; left:${this.left}\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  startDrag(event) {\n    if (event) {\n      event.preventDefault();\n\n      this.position3 = event.clientX;\n      this.position4 = event.clientY;\n    }\n\n    document.addEventListener('mouseup', this.mouseUp);\n    document.addEventListener('mousemove', this.mouseMove);\n\n    this.dispatchEvent(new CustomEvent('kemet-draggable-start', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n\n  drag(event) {\n    event.preventDefault();\n\n    this.position1 = this.position3 - event.clientX;\n    this.position2 = this.position4 - event.clientY;\n    this.position3 = event.clientX;\n    this.position4 = event.clientY;\n\n    this.top = `${this.draggableElement.offsetTop - this.position2}px`;\n    this.left = `${this.draggableElement.offsetLeft - this.position1}px`;\n  }\n\n  stopDrag() {\n    document.removeEventListener('mouseup', this.mouseUp);\n    document.removeEventListener('mousemove', this.mouseMove);\n\n    if (this.memory) {\n      const savedPosition = {\n        top: this.top,\n        left: this.left,\n      };\n\n      localStorage.setItem(this.memory, JSON.stringify(savedPosition));\n    }\n\n    this.dispatchEvent(new CustomEvent('kemet-draggable-stop', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n\n  measureContent() {\n    this.style.width = `${this.draggableElement.offsetWidth}px`;\n    this.style.height = `${this.draggableElement.offsetHeight}px`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-draggable') || customElements.define('kemet-draggable', KemetDraggable);\n\nconst documentHeight = `${document.documentElement.scrollHeight}px`;\n\nconst stylesBase$1 = r$3`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  :host {\n    width: 100%;\n  }\n\n  .off-canvas {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .off-canvas__nav {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: 100;\n    visibility: hidden;\n    height: 100%;\n    transition: all 0.5s;\n  }\n\n  .off-canvas__nav::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.2);\n    content: '';\n    opacity: 1;\n    transition: opacity 0.5s;\n  }\n\n  :host([opened]) .off-canvas__nav::after {\n    width: 0;\n    height: 0;\n    opacity: 0;\n    transition: opacity 0.5s, width 0.1s 0.5s, height 0.1s 0.5s;\n  }\n\n  .off-canvas__pusher {\n    position: relative;\n    left: 0;\n    z-index: 99;\n    height: 100%;\n    transition: transform 0.5s;\n  }\n\n  :host([overlay]) .off-canvas__pusher::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 0;\n    height: 0;\n    background: var(--kemet-drawer-overlay-color, rgba(0, 0, 0, 0.2));\n    content: '';\n    opacity: 0;\n    transition: opacity 0.5s, width 0.1s 0.5s, height 0.1s 0.5s;\n  }\n\n  :host([opened]) .off-canvas__pusher::after {\n    width: 100%;\n    height: 100%;\n    opacity: 1;\n    transition: opacity 0.5s;\n    transform: scale(2);\n  }\n\n  .off-canvas__content {\n    position: relative;\n    /* overflow-y: scroll; */\n    min-height: 100vh;\n  }\n\n  .off-canvas__wrapper {\n    position: relative;\n  }\n\n  ::slotted([slot=\"content\"]) {\n    min-height: 100vh;\n  }\n\n  /* -------------------------------------- */\n  /* custom properties */\n  /* -------------------------------------- */\n\n  .off-canvas__nav {\n    width: var(--kemet-drawer-width, 300px);\n    height: var(--kemet-drawer-height, 100%);\n    color: var(--kemet-drawer-color, #fafafa);\n    background: var(--kemet-drawer-background-color, #202020);\n  }\n`;\n\nconst stylesEffects$1 = r$3`\n  /* slide */\n  :host([effect='slide']) .off-canvas__nav {\n    visibility: visible;\n    transform: translate3d(-100%, 0, 0);\n  }\n\n  :host([effect='slide'][opened]) .off-canvas__nav {\n    visibility: visible;\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='slide']) .off-canvas__nav:after {\n    display: none;\n  }\n\n  :host([effect='slide'][side='right']) .off-canvas__nav {\n    transform: translate3d(100vw, 0, 0);\n  }\n\n  :host([effect='slide'][side='right'][opened]) .off-canvas__nav {\n    transform: translate3d(calc(100vw - var(--kemet-drawer-width, 300px)), 0, 0);\n  }\n\n  :host([effect='slide'][side='top']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, calc(var(--kemet-drawer-height, 100vh) * -1), 0);\n  }\n\n  :host([effect='slide'][side='top'][opened]) .off-canvas__nav {\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='slide'][side='bottom']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, ${o$4(documentHeight)}, 0);\n  }\n\n  :host([effect='slide'][side='bottom'][opened]) .off-canvas__nav {\n    transform: translate3d(0, calc(100vh - var(--kemet-drawer-height, 100vh)), 0);\n  }\n\n  /* reveal */\n  :host([effect='reveal'][opened]) .off-canvas__pusher {\n    transform: translate3d(var(--kemet-drawer-width, 300px), 0, 0);\n  }\n\n  :host([effect='reveal']) .off-canvas__nav {\n    z-index: 1;\n  }\n\n  :host([effect='reveal'][opened]) .off-canvas__nav {\n    visibility: visible;\n    transition: transform 0.5s;\n  }\n\n  :host([effect='reveal']) .off-canvas__nav::after {\n    display: none;\n  }\n\n  :host([effect='reveal'][side='right'][opened]) .off-canvas__pusher {\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='reveal'][side='right']) .off-canvas__nav {\n    transform: translate3d(100vw, 0, 0);\n  }\n\n  :host([effect='reveal'][side='right'][opened]) .off-canvas__nav {\n    transform: translate3d(calc(100vw - var(--kemet-drawer-width, 300px)), 0, 0);\n  }\n\n  :host([effect='reveal'][side='top']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, calc(var(--kemet-drawer-height, 100vh) * -1), 0);\n  }\n\n  :host([effect='reveal'][side='top'][opened]) .off-canvas__nav {\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='reveal'][side='top'][opened]) .off-canvas__pusher {\n    transform: translate3d(0, var(--kemet-drawer-height, 100vh), 0);\n  }\n\n  :host([effect='reveal'][side='bottom']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, ${o$4(documentHeight)}, 0);\n  }\n\n  :host([effect='reveal'][side='bottom'][opened]) .off-canvas__nav {\n    transform: translate3d(0, calc(100vh - var(--kemet-drawer-height, 100vh)), 0);\n  }\n\n  :host([effect='reveal'][side='bottom'][opened]) .off-canvas__pusher {\n    transform: translate3d(0, calc(var(--kemet-drawer-height, 100vh) * -1), 0);\n  }\n\n  /* push */\n  :host([effect='push'][opened]) .off-canvas__pusher {\n    transform: translate3d(var(--kemet-drawer-width, 300px), 0, 0);\n  }\n\n  :host([effect='push']) .off-canvas__nav {\n    transform: translate3d(-100%, 0, 0);\n  }\n\n  :host([effect='push'][opened]) .off-canvas__nav {\n    visibility: visible;\n    transition: transform 0.5s;\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='push']) .off-canvas__nav::after {\n    display: none;\n  }\n\n  :host([effect='push'][side='right'][opened]) .off-canvas__pusher {\n    transform: translate3d(calc(var(--kemet-drawer-width, 300px) * -1), 0, 0);\n  }\n\n  :host([effect='push'][side='right']) .off-canvas__nav {\n    transform: translate3d(100vw, 0, 0);\n  }\n\n  :host([effect='push'][side='right'][opened]) .off-canvas__nav {\n    transform: translate3d(calc(100vw - var(--kemet-drawer-width, 300px)), 0, 0);\n  }\n\n  :host([effect='push'][side='top']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, calc(var(--kemet-drawer-height, 100vh) * -1), 0);\n  }\n\n  :host([effect='push'][side='top'][opened]) .off-canvas__nav {\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='push'][side='top'][opened]) .off-canvas__pusher {\n    transform: translate3d(0, var(--kemet-drawer-height, 100vh), 0);\n  }\n\n  :host([effect='push'][side='bottom']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, ${o$4(documentHeight)}, 0);\n  }\n\n  :host([effect='push'][side='bottom'][opened]) .off-canvas__nav {\n    transform: translate3d(0, calc(100vh - var(--kemet-drawer-height, 100vh)), 0);\n  }\n\n  :host([effect='push'][side='bottom'][opened]) .off-canvas__pusher {\n    transform: translate3d(0, calc(var(--kemet-drawer-height, 100vh) * -1), 0);\n  }\n\n  /* scale */\n  :host([effect='scale']) .off-canvas__pusher {\n    transform-style: preserve-3d;\n  }\n\n  :host([effect='scale'][opened]) .off-canvas__pusher {\n    transform: translate3d(0, 0, 0) scale(0.95);\n  }\n\n  :host([effect='scale']) .off-canvas__nav {\n    opacity: 1;\n    transform: translate3d(-100%, 0, 0);\n  }\n\n  :host([effect='scale'][opened]) .off-canvas__nav {\n    visibility: visible;\n    transition: transform 0.5s;\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='scale']) .off-canvas__nav::after {\n    display: none;\n  }\n\n  :host([effect='scale'][side='right']) .off-canvas__nav {\n    transform: translate3d(100vw, 0, 0);\n  }\n\n  :host([effect='scale'][side='right'][opened]) .off-canvas__nav {\n    transform: translate3d(calc(100vw - var(--kemet-drawer-width, 300px)), 0, 0);\n  }\n\n  :host([effect='scale'][side='top']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, calc(var(--kemet-drawer-height, 100vh) * -1), 0);\n  }\n\n  :host([effect='scale'][side='top'][opened]) .off-canvas__nav {\n    transform: translate3d(0, 0, 0);\n  }\n\n  :host([effect='scale'][side='bottom']) .off-canvas__nav {\n    width: 100vw;\n    height: var(--kemet-drawer-height, 100vh);\n    transform: translate3d(0, ${o$4(documentHeight)}, 0);\n  }\n\n  :host([effect='scale'][side='bottom'][opened]) .off-canvas__nav {\n    transform: translate3d(0, calc(100vh - var(--kemet-drawer-height, 100vh)), 0);\n  }\n`;\n\nclass KemetDrawer extends s$1 {\n  static get styles() {\n    return [stylesBase$1, stylesEffects$1];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines if the drawer is opened or not.\n       */\n      opened: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The animation effect for opening and closing the drawer.\n       * Values include: (slide | reveal | push | scale)\n       */\n      effect: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Allows you to control which side the drawer opens from.\n       * Values include: (left | right | top | bottom)\n       */\n      side: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Adds a overlay over the content section of the Drawer when opened\n       */\n      overlay: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.opened = undefined;\n    this.effect = 'slide';\n    this.side = 'left';\n    this.overlay = false;\n  }\n\n  firstUpdated() {\n    this.addEventListener('click', (event) => {\n      if (this.opened && event.target.tagName.toLowerCase() === 'kemet-drawer') {\n        this.opened = false;\n      }\n    });\n  }\n\n  updated(prevProps) {\n    if (!prevProps.get('opened') && this.opened === true) {\n      /**\n       * Fires when the drawer opens.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-drawer-opened', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    if (prevProps.get('opened') && this.opened === false) {\n      /**\n       * Fires when the drawer closes.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-drawer-closed', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n  }\n\n  render() {\n    return $`\n      <section class=\"off-canvas\" part=\"container\">\n        <nav class=\"off-canvas__nav\" part=\"drawer\" title=\"Drawer\">\n          <slot name=\"navigation\"></slot>\n        </nav>\n        <div class=\"off-canvas__pusher\" part=\"pusher\">\n          <main class=\"off-canvas__content\" part=\"content\">\n            <div class=\"off-canvas__wrapper\" part=\"wrapper\">\n              <slot name=\"content\"></slot>\n            </div>\n          </main>\n        </div>\n      </section>\n    `;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-drawer') || customElements.define('kemet-drawer', KemetDrawer);\n\nclass KemetFAB extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          --kemet-fab-size: 50px;\n\n          display: inline-block;\n          position: relative;\n        }\n\n        button {\n          color: var(--kemet-fab-color, var(--kemet-color-white));\n          font-size: inherit;\n          display: inline-flex;\n          padding: 0;\n          position: relative;\n          min-height: var(--kemet-fab-size);\n          min-width: var(--kemet-fab-size);\n          max-width: var(--kemet-fab-size);\n          align-items: center;\n          justify-content: flex-start;\n          transition: all 0.4s ease;\n          border: none;\n          background-color: var(--kemet-fab-background-color, var(--kemet-color-primary));\n        }\n\n        :host([outlined]) button {\n          color: var(--kemet-fab-outlined-color, var(--kemet-color-primary));\n          border: var(--kemet-fab-outlined-border, 1px solid var(--kemet-color-primary));\n          background-color: transparent;\n        }\n\n        :host([pill]) button {\n          border-radius: var(--kemet-fab-pill-radius, 10rem);\n        }\n\n        button::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          z-index: -1;\n          width: 100%;\n          height: 100%;\n          transition: background-color 0.3s ease-in-out;\n          background-color: var(--kemet-fab-background-color, var(--kemet-color-primary));\n        }\n\n        :host([pill]) button::before {\n          border-radius: var(--kemet-fab-pill-radius, 10rem);\n        }\n\n        :host([outlined]) button::before {\n          border: var(--kemet-fab-outline-border, 1px solid var(--kemet-color-primary));\n          background-color: transparent;\n        }\n\n        :host([expanded]) button {\n          max-width: 99rem;\n          padding: 0 1.35rem 0 0.25rem;\n        }\n\n        :host([disabled]) button {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n\n        .icon {\n          width: var(--kemet-fab-size);\n          height: var(--kemet-fab-size);\n          display: flex;\n          flex: 0 0 auto;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .text {\n          color: var(--kemet-fab-color, var(--kemet-color-white));\n          z-index: 1;\n          white-space: nowrap;\n          pointer-events: none;\n          opacity: 0;\n          transition: opacity 0.2s ease-in-out;\n        }\n\n        :host([outlined]) .text {\n          color: var(--kemet-fab-outlined-color, var(--kemet-color-primary));\n        }\n\n        :host([expanded]) .text {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The expanded state of the button\n       */\n      expanded: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Outline style for a button\n       */\n      outlined: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines whether not a button is disabled\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Displays the fab with rounded corners\n       */\n      pill: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The distance, in pixels, where the fab should automatically expand\n       */\n      expandPoint: {\n        type: Number,\n        attribute: 'expand-point',\n      },\n      /**\n       * The distance, in pixels, where the fab should automatically collapse\n       */\n      collapsePoint: {\n        type: Number,\n        attribute: 'collapse-point',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.outlined = false;\n    this.disabled = false;\n    this.expanded = false;\n  }\n\n  firstUpdated() {\n    // events\n    window.addEventListener('scroll', this.handleScroll.bind(this));\n    this.addEventListener('mouseover', this.handleMouseOver.bind(this));\n    this.addEventListener('mouseout', this.handleMouseOut.bind(this));\n  }\n\n  render() {\n    return $`\n      <button class=\"button\" part=\"button\" ?disabled=${this.disabled} aria-disabled=${this.disabled ? 'true' : 'false'}>\n        <span class=\"icon\" part=\"icon\">\n          <slot name=\"icon\"></slot>\n        </span>\n        <span class=\"text\" part=\"text\">\n          <slot></slot>\n        </span>\n      </button>\n    `;\n  }\n\n  handleMouseOver() {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  handleMouseOut() {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  handleScroll() {\n    if (window.scrollY > this.expandPoint) {\n      this.expanded = true;\n    }\n\n    if (window.scrollY < this.expandPoint) {\n      this.expanded = false;\n    }\n\n    if (window.scrollY > this.collapsePoint) {\n      this.expanded = false;\n    }\n\n    if (window.scrollY < this.collapsePoint) {\n      this.expanded = true;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-fab') || customElements.define('kemet-fab', KemetFAB);\n\nclass KemetField extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n\n        label {\n          position: relative;\n          display: block;\n        }\n\n        label span {\n          color: inherit;\n          display: inline-flex;\n          gap: 0.5rem;\n          align-items: center;\n          margin-bottom: 0.8rem;\n        }\n\n        :host([status='error']) kemet-icon {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='success']) kemet-icon {\n          color: var(--kemet-color-success);\n        }\n\n        :host([status='warning']) kemet-icon {\n          color: var(--kemet-color-warning);\n        }\n\n        .message {\n          font-size: 0.9rem;\n          line-height: 1;\n          display: block;\n          margin-top: 0.8rem;\n        }\n\n        :host([status='error']) .message {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='success']) .message {\n          color: var(--kemet-color-success);\n        }\n\n        :host([status='warning']) .message {\n          color: var(--kemet-color-warning);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Uniquely identifies the control. Use the same slug for slotted sub components.\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * The label text\n       */\n      label: {\n        type: String,\n      },\n      /**\n       * The validation message for error or success\n       */\n      message: {\n        type: String,\n      },\n      /**\n       * Determines if the containing input is focused\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The validation status of standard, error, or success\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Is true when the containing input has a value\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The length of the containing input\n       */\n      length: {\n        type: Number,\n      },\n      /**\n       * Determines the disabled state of the control\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The icon while in an error or warning state\n       */\n      errorIcon: {\n        type: String,\n        attribute: 'error-icon',\n      },\n      /**\n       * The icon while in an success state\n       */\n      successIcon: {\n        type: String,\n        attribute: 'success-icon',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.status = 'standard';\n    this.errorIcon = 'exclamation-triangle-fill';\n    this.successIcon = 'check-lg';\n\n    // listeners\n    this.addEventListener('kemet-input-focused', event => this.handleFocused(event));\n    this.addEventListener('kemet-input-status', event => this.handleStatus(event));\n    this.addEventListener('kemet-input-input', event => this.handleInput(event));\n    this.addEventListener('kemet-count-status', event => this.handleStatus(event));\n    this.addEventListener('kemet-combo-selection', event => this.handleSelection(event));\n  }\n\n  firstUpdated() {\n    this.slotInput = this.querySelector('[slot=\"input\"]');\n    this.slotCombo = this.querySelector('[slot=\"combo\"]');\n\n    if (this.slotInput.value) {\n      this.length = this.slotInput.value.length;\n    } else {\n      this.length = 0;\n    }\n  }\n\n  render() {\n    return $`\n      <label for=\"${this.slug}\" id=\"${this.slug}-label\" part=\"label\">\n        <span>${this.label}${this.makeStatusIcon()}</span>\n        <slot name=\"input\"></slot>\n      </label>\n      ${this.makeStatusMessage()}\n      <slot name=\"component\"></slot>\n    `;\n  }\n\n  makeStatusIcon() {\n    if (this.status === 'error' || this.status === 'warning') {\n      return $`<kemet-icon icon=\"${this.errorIcon}\" size=\"16\"></kemet-icon>`;\n    }\n\n    if (this.status === 'success') {\n      return $`<kemet-icon icon=\"${this.successIcon}\" size=\"16\"></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  makeStatusMessage() {\n    if (this.status !== 'standard') {\n      return $`<span class=\"message\" part=\"message\">${this.message}</span>`;\n    }\n\n    return null;\n  }\n\n  handleFocused(event) {\n    this.focused = event.detail;\n\n    if (!this.focused && this.slotCombo && this.slotCombo.options.length < 1) {\n      this.slotCombo.show = false;\n    }\n  }\n\n  handleStatus(event) {\n    this.status = event.detail.status;\n  }\n\n  handleInput(event) {\n    /**\n     * Fires when input fires on the input slot\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-field-input', {\n        bubbles: false,\n        detail: event.detail.length,\n      }),\n    );\n\n    if (event.detail === '') {\n      this.filled = false;\n    } else {\n      this.filled = true;\n    }\n  }\n\n  handleSelection(event) {\n    this.slotInput.setAttribute('aria-activedescendant', event.detail);\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-field') || customElements.define('kemet-field', KemetField);\n\nclass KemetFlipcardTrigger extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n\n  firstUpdated() {\n    this.keyCodes = {\n      ENTER: 13,\n      SPACE: 32,\n    };\n  }\n\n  render() {\n    return $`\n      <slot tabindex=\"0\" @click=${() => this.trigger()} @keypress=${event => this.handleKeyup(event)}></slot>\n    `;\n  }\n\n  trigger() {\n    this.dispatchEvent(new CustomEvent('kemet-flipcard-flipped', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n\n  handleKeyup(event) {\n    event.preventDefault();\n\n    if (event.keyCode === this.keyCodes.ENTER) {\n      this.trigger();\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-flipcard-trigger') || customElements.define('kemet-flipcard-trigger', KemetFlipcardTrigger);\n\nclass KemetFlipcard extends s$1 {\n  static get styles() {\n    return r$3`\n      *,\n      ::after,\n      ::before {\n        box-sizing: border-box;\n      }\n\n      :host {\n        display: inline-block;\n        width: var(--kemet-flipcard-width, 100%);\n        height: var(--kemet-flipcard-height, auto);\n        aspect-ratio: var(--kemet-flipcard-ratio, 16/9);\n        perspective: 1000px;\n      }\n\n      section {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        transition: transform 0.8s;\n        transform-style: preserve-3d;\n      }\n\n      .front,\n      .back {\n        position: absolute;\n        display: flex;\n        width: 100%;\n        height: 100%;\n        backface-visibility: hidden;\n        /* overflow: hidden; */\n        border-radius: var(--kemet-flipcard-border-radius, 0);\n        border: var(--kemet-flipcard-border, 2px solid var(--kemet-color-primary));\n      }\n\n      :host([rounded]) .front,\n      :host([rounded]) .back {\n        border-radius: var(--kemet-border-radius);\n      }\n\n      .front {\n        color: var(--kemet-flipcard-front-color, #202020);\n        background-color: var(--kemet-flipcard-front-background-color, #fafafa);\n      }\n\n      :host([flipped]) .front {\n        z-index: -1;\n      }\n\n      .back {\n        color: var(--kemet-flipcard-back-color, #202020);\n        background-color: var(--kemet-flipcard-back-background-color, #fafafa)\n      }\n\n      :host([axis=\"horizontal\"]) .back {\n        transform: rotateY(180deg);\n      }\n\n      :host([flipped][axis=\"horizontal\"]) section {\n        transform: rotateY(180deg);\n      }\n\n      :host([axis=\"vertical\"]) .back {\n        transform: rotateX(180deg);\n      }\n\n      :host([flipped][axis=\"vertical\"]) section {\n        transform: rotateX(180deg);\n      }\n\n      :host([flip-on-hover]) section {\n        cursor: pointer;\n      }\n\n      ::slotted([slot=\"front\"]),\n      ::slotted([slot=\"back\"]) {\n        display: inline-block;\n        margin: auto;\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      axis: {\n        type: String,\n        reflect: true,\n      },\n\n      flipped: {\n        type: Boolean,\n        reflect: true,\n      },\n\n      flipOnHover: {\n        type: Boolean,\n        attribute: 'flip-on-hover',\n      },\n\n      height: {\n        type: String,\n      },\n\n      measure: {\n        type: Boolean,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.axis = 'horizontal';\n    this.flipped = false;\n    this.flipOnHover = false;\n    this.height = 'auto';\n    this.measure = false;\n\n    this.addEventListener('kemet-flipcard-flipped', () => {\n      this.flipped = !this.flipped;\n    });\n  }\n\n  firstUpdated() {\n    this.frontChildren = this.shadowRoot.querySelector('[name=\"front\"]').assignedNodes({ flatten: true });\n    this.backChildren = this.shadowRoot.querySelector('[name=\"back\"]').assignedNodes({ flatten: true });\n\n    [this.frontElement] = this.frontChildren;\n    [this.backElement] = this.backChildren;\n\n    window.addEventListener('resize', this.determineHeight.bind(this));\n  }\n\n  updated() {\n    this.determineHeight();\n  }\n\n  render() {\n    return $`\n      <section\n        tabindex=\"0\"\n        part=\"wrapper\"\n        @blur=${() => { if (this.flipOnHover) this.flipped = false; }}\n        @focus=${() => { if (this.flipOnHover) this.flipped = true; }}\n        @mouseover=${() => { if (this.flipOnHover) this.flipped = true; }}\n        @mouseout=${() => { if (this.flipOnHover) this.flipped = false; }}>\n        <div id=\"front\" class=\"front\" part=\"front\">\n          <slot name=\"front\" @slotchange=\"${() => this.determineHeight()}\"></slot>\n        </div>\n        <div id=\"back\" class=\"back\" part=\"back\">\n          <slot name=\"back\" @slotchange=\"${() => this.determineHeight()}\"></slot>\n        </div>\n      </section>\n    `;\n  }\n\n  determineHeight() {\n    // setTimeout is need to simulate a DOM repaint\n    // without the repaint, offsetHeight on Custom Elements = 0\n    // so this is needed for 'measure' to work correctly\n\n    setTimeout(() => {\n      if (this.measure) {\n        if (this.frontElement.offsetHeight > this.backElement.offsetHeight) {\n          this.height = `${this.frontElement.offsetHeight}px`;\n        } else {\n          this.height = `${this.backElement.offsetHeight}px`;\n        }\n\n        this.style.height = this.height;\n      } else {\n        this.style.removeProperty('height');\n      }\n    }, 0);\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-flipcard') || window.customElements.define('kemet-flipcard', KemetFlipcard);\n\nclass KemetInput extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          position: relative;\n          display: block;\n        }\n\n        input {\n          display: block;\n          font-size: 1rem;\n          width: 100%;\n          height: var(--kemet-input-height, 50px);\n          padding: var(--kemet-input-padding, 0.5rem 1rem);\n          border: var(--kemet-input-border, 1px solid var(--kemet-color-primary));\n          appearance: none;\n          box-sizing: border-box;\n        }\n\n        input[type='color'] {\n          min-width: 10rem;\n        }\n\n        input[type='search']::-webkit-search-decoration,\n        input[type='search']::-webkit-search-cancel-button,\n        input[type='search']::-webkit-search-results-button,\n        input[type='search']::-webkit-search-results-decoration {\n          display: none;\n        }\n\n        :host([status='error']) input {\n          border: var(--kemet-input-border-color-error, 1px solid var(--kemet-color-error));\n        }\n\n        :host([status='success']) input {\n          border: var(--kemet-input-border-color-success, 1px solid var(--kemet-color-success));\n        }\n\n        :host([status='warning']) input {\n          border: var(--kemet-input-border-color-warning, 1px solid var(--kemet-color-warning));\n        }\n\n        :host([disabled]) input {\n          opacity: 0.5;\n        }\n\n        :host([icon-left]) input {\n          padding-left: var(--kemet-input-icon-left-padding, 3rem);\n        }\n\n        :host([icon-right]) input {\n          padding-right: var(--kemet-input-icon-right-padding, 3rem);\n        }\n\n        :host([rounded]) input {\n          border-radius: var(--kemet-input-border-radius-rounded, var(--kemet-border-radius));\n        }\n\n        :host([filled]) input {\n          border: var(--kemet-input-border-filled, none);\n          color: var(--kemet-input-color-filled, var(--kemet-color-white));\n          background-color: var(--kemet-input-background-color-filled, var(--kemet-color-primary));\n        }\n\n        :host([filled]) kemet-icon,\n        :host([filled]) input::placeholder {\n          color: var(--kemet-input-color-filled, var(--kemet-color-white));\n        }\n\n        :host([status='error'][filled]) input {\n          background-color: var(--kemet-input-background-color-error, var(--kemet-color-error));\n        }\n\n        :host([status='success'][filled]) input {\n          background-color: var(--kemet-input-background-color-success, var(--kemet-color-success));\n        }\n\n        :host([status='warning'][filled]) input {\n          background-color: var(--kemet-input-background-color-warning, var(--kemet-color-warning));\n        }\n\n        kemet-icon {\n          color: var(--kemet-color-primary);\n          position: absolute;\n          top: 50%;\n          transform: translateY(-50%);\n        }\n\n        kemet-icon.left {\n          left: 1rem;\n        }\n\n        kemet-icon.right {\n          right: 1rem;\n        }\n\n        kemet-icon.eye,\n        kemet-icon.search {\n          cursor: pointer;\n        }\n\n        :host([status='error']) kemet-icon {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='warning']) kemet-icon {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='success']) kemet-icon {\n          color: var(--kemet-color-success);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Used for the id of the input. Should match the slug used in a control if applicable.\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * The name of the input\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The placeholder attribute\n       */\n      placeholder: {\n        type: String,\n      },\n      /**\n       * The minlength attribute\n       */\n      minlength: {\n        type: String,\n      },\n      /**\n       * The maxlength attribute\n       */\n      maxlength: {\n        type: String,\n      },\n      /**\n       * The min attribute\n       */\n      min: {\n        type: String,\n      },\n      /**\n       * The max attribute\n       */\n      max: {\n        type: String,\n      },\n      /**\n       * The step attribute\n       */\n      step: {\n        type: String,\n      },\n      /**\n       * The autocomplete attribute\n       */\n      autocomplete: {\n        type: String,\n      },\n      /**\n       * The pattern attribute\n       */\n      pattern: {\n        type: String,\n      },\n      /**\n       * The input mode attribute\n       */\n      inputmode: {\n        type: String,\n      },\n      /**\n       * The autofocus attribute\n       */\n      autofocus: {\n        type: Boolean,\n      },\n      /**\n       * The disable attribute\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The readonly attribute\n       */\n      readonly: {\n        type: Boolean,\n      },\n      /**\n       * The required attribute\n       */\n      required: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The type of input\n       */\n      type: {\n        type: String,\n      },\n      /**\n       * The input's value\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * States whether or not the input is invalid\n       */\n      invalid: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The status of the input\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Activates validation on blur\n       */\n      validateOnBlur: {\n        type: Boolean,\n        attribute: 'validate-on-blur',\n      },\n      /**\n       * Aria Autocomplete\n       */\n      ariaAutoComplete: {\n        type: String,\n        attribute: 'aria-autocomplete',\n      },\n      /**\n       * Aria Controls\n       */\n      ariaControls: {\n        type: String,\n        attribute: 'aria-controls',\n      },\n      /**\n       * Aria Active Descendant\n       */\n      ariaActiveDescendant: {\n        type: String,\n        attribute: 'aria-activedescendant',\n      },\n      /**\n       * Displays rounded corners\n       */\n      rounded: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Displays a filled input box\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Custom Icon to the right of the input\n       */\n      iconRight: {\n        type: String,\n        reflect: true,\n        attribute: 'icon-right',\n      },\n      /**\n       * Custom Icon to the left of the input\n       */\n      iconLeft: {\n        type: String,\n        reflect: true,\n        attribute: 'icon-left',\n      },\n      /**\n       * Size of the icons\n       */\n      iconSize: {\n        type: Number,\n      },\n      /**\n       * The HTML5 validity object.\n       */\n      validity: {\n        type: Object,\n      },\n      /**\n       * Manages password visibility\n       */\n      isPasswordVisible: {\n        type: Boolean,\n      },\n      /**\n       * Input Type of keypress handled through handleInput(e)\n       */\n      inputType: {\n        type: String,\n      },\n      /**\n       * Determines if the input is focused\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.name = 'input';\n    this.type = 'text';\n    this.value = '';\n    this.status = 'standard';\n    this.iconSize = 20;\n    this.validateOnBlur = false;\n    this.isPasswordVisible = false;\n    this.focused = false;\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  firstUpdated() {\n    // elements\n    this.input = this.shadowRoot.querySelector('input');\n    this.field = this.closest('kemet-field');\n    this.form = this.closest('form');\n    this.slug = this.field ? this.field.slug : 'input';\n\n    if (this.field) {\n      this.field.addEventListener('fmc-password-status', event => this.handleStatus(event));\n    }\n  }\n\n  render() {\n    return $`\n      <div>\n        ${this.makeIconLeft()}\n        <input\n          part=\"input\"\n          id=${this.slug}\n          name=${this.name}\n          placeholder=${l$1(this.placeholder)}\n          minlength=${l$1(this.minlength)}\n          maxlength=${l$1(this.maxlength)}\n          min=${l$1(this.min)}\n          max=${l$1(this.max)}\n          step=${l$1(this.step)}\n          autocomplete=${l$1(this.autocomplete)}\n          aria-autocomplete=${l$1(this.ariaAutoComplete)}\n          aria-controls=${l$1(this.ariaControls)}\n          aria-activedescendant=${l$1(this.ariaActiveDescendant)}\n          pattern=${l$1(this.pattern)}\n          inputmode=${l$1(this.inputmode)}\n          aria-invalid=${this.invalid ? 'true' : 'false'}\n          ?autofocus=${this.autofocus}\n          ?disabled=${this.disabled}\n          ?readonly=${this.readonly}\n          ?required=${this.required}\n          .type=\"${this.type === 'password' && this.isPasswordVisible ? 'text' : this.type}\"\n          .value=${l(this.value)}\n          @change=${this.handleChange}\n          @input=${this.handleInput}\n          @invalid=${this.handleInvalid}\n          @focus=${this.handleFocus}\n          @blur=${this.handleBlur}\n        />\n        ${this.makeIconRight()} ${this.makeIconClear()} ${this.makeVisibilityToggle()}\n      </div>\n    `;\n  }\n\n  /**\n   * Makes the right icon\n   * @private\n   * @returns {templateResult} A right icon\n   */\n  makeIconRight() {\n    if (this.iconRight) {\n      return $`\n        <kemet-icon class=\"right\" icon=\"${this.iconRight}\" size=\"${this.iconSize ? this.iconSize : 20}\"></kemet-icon>\n      `;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes the left icon\n   * @private\n   * @returns {templateResult} A left icon\n   */\n  makeIconLeft() {\n    if (this.iconLeft) {\n      return $`\n        <kemet-icon class=\"left\" icon=\"${this.iconLeft}\" size=\"${this.iconSize ? this.iconSize : 16}\"></kemet-icon>\n      `;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes a clear icon for search.\n   * @private\n   * @returns {templateResult} A search icon\n   */\n  makeIconClear() {\n    if (this.type === 'search' && this.value !== '') {\n      return $`\n        <kemet-icon class=\"search right\" icon=\"x-lg\" size=\"${this.iconSize}\" @click=${() => this.handleClear()}></kemet-icon>\n      `;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes a password visibility toggle button\n   * @returns {templateResult} A mask or unmask icon\n   */\n  makeVisibilityToggle() {\n    if (this.type === 'password') {\n      return $`<kemet-icon\n        class=\"eye right\"\n        icon=\"${this.setPasswordIcon()}\"\n        @click=${() => this.togglePasswordVisibility()}\n      ></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  setPasswordIcon() {\n    if (this.isPasswordVisible) {\n      return 'eye';\n    }\n\n    return 'eye-slash';\n  }\n\n  /**\n   * Handles when the input receives focus\n   * @private\n   */\n  handleFocus() {\n    this.focused = true;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input loses focus\n   * @private\n   */\n  handleBlur() {\n    if (this.validateOnBlur && this.form && !this.form.noValidate) {\n      this.input.checkValidity();\n      this.validity = this.input.validity;\n    }\n\n    this.focused = false;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input changes value\n   * @private\n   */\n  handleChange() {\n    this.value = this.input.value;\n\n    if (this.input.checkValidity() && this.checkLimitValidity() && this.status !== 'success') {\n      this.invalid = false;\n      this.status = 'standard';\n      this.validity = this.input.validity;\n\n      /**\n       * Fires when there's a change in status.\n       * This event includes an object that reports:\n       * 1) the status. 2) HTML5 validity object. 3) the component element.\n       * Use the validity object to support custom validation messages.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'standard',\n            validity: this.input.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Handles when the input receives input\n   * @private\n   */\n  handleInput() {\n    this.value = this.input.value;\n\n    /**\n     * Fires when the input receives input\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-input', {\n        bubbles: true,\n        composed: true,\n        detail: this.value,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input has an error\n   * @private\n   */\n  handleInvalid() {\n    this.validity = this.input.validity;\n\n    if (this.validateOnBlur) {\n      this.invalid = true;\n      this.status = 'error';\n\n      /**\n       * Fires when there's a change in status\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'error',\n            validity: this.input.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  handleStatus(event) {\n    this.status = event.detail.status;\n  }\n\n  /**\n   * Toggles password visibility\n   * @private\n   */\n  togglePasswordVisibility() {\n    this.isPasswordVisible = !this.isPasswordVisible;\n  }\n\n  /**\n   * Handles the clear button for search\n   * @private\n   */\n  handleClear() {\n    this.value = '';\n\n    /**\n     * Fires when the input receives input\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-input', {\n        bubbles: true,\n        composed: true,\n        detail: this.value,\n      }),\n    );\n  }\n\n  /**\n   * Checks the validity of the character limit for the count component\n   * @private\n   * @returns {boolean}\n   */\n  checkLimitValidity() {\n    if (this.field) {\n      const count = this.field.querySelector('kemet-count');\n      if (count) {\n        return this.value.length < count.limit;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks the validity of the standard input\n   * @public\n   * @returns {boolean}\n   */\n  checkValidity() {\n    return this.input.checkValidity();\n  }\n\n  /**\n   * Focuses the standard input\n   * @public\n   */\n  focus() {\n    this.input.focus();\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-input') || customElements.define('kemet-input', KemetInput);\n\nclass KemetModalClose extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          position: absolute;\n          top: -0.5rem;\n          right: -0.5rem;\n          border: 2px solid white;\n          border-radius: 50%;\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return $`\n      <slot @keyup=${() => this.close()} @click=${() => this.close()}></slot>\n    `;\n  }\n\n  close() {\n    /**\n     * Fires when the close button is pressed\n     */\n    this.dispatchEvent(new CustomEvent('kemet-modal-close-pressed', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-modal-close') || customElements.define('kemet-modal-close', KemetModalClose);\n\nconst stylesBase = r$3`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  :host {\n    position: fixed;\n    display: flex;\n    top: 0;\n    left: 0;\n    z-index: 99;\n    width: 100%;\n    height: 100vh;\n    visibility: hidden;\n    backface-visibility: hidden;\n  }\n\n  :host([opened]) {\n    visibility: visible;\n  }\n\n  .content {\n    position: relative;\n    z-index: 3;\n    margin: auto;\n    min-width: var(--kemet-modal-content-min-width, 0);\n    max-width: var(--kemet-modal-content-max-width, none);\n  }\n\n  :host([mobile]) .content {\n    min-width: var(--kemet-modal-content-mobile-min-width, 100%);\n    min-height: var(--kemet-modal-content-mobile-min-height, 80vh);\n    padding: var(--kemet-modal-content-mobile-padding, 1rem);\n  }\n\n  .overlay {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    visibility: hidden;\n    top: 0;\n    left: 0;\n    z-index: 1;\n    opacity: 0;\n    background: var(--kemet-modal-overlay-background-color, rgba(0,0,0,0.2));\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([opened]) .overlay {\n    opacity: 1;\n    visibility: visible;\n  }\n`;\n\nconst stylesEffects = r$3`\n  /* fadein-scaleup */\n  :host([effect=\"fadein-scaleup\"]) .content {\n    transform: scale(0.7);\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"fadein-scaleup\"][opened]) .content {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  /* slide-right */\n  :host([effect=\"slide-right\"]) .content {\n    transform: translateX(20%);\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s) cubic-bezier(0.25, 0.5, 0.5, 0.9);\n  }\n\n  :host([effect=\"slide-right\"][opened]) .content {\n    transform: translateX(0);\n    opacity: 1;\n  }\n\n  /* slide-bottom */\n  :host([effect=\"slide-bottom\"]) .content {\n    transform: translateY(20%);\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"slide-bottom\"][opened]) .content {\n    transform: translateY(0);\n    opacity: 1;\n  }\n\n  /* newspaper */\n  :host([effect=\"newspaper\"]) .content {\n    transform: scale(0) rotate(720deg);\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"newspaper\"][opened]) .content {\n    transform: scale(1) rotate(0deg);\n    opacity: 1;\n  }\n\n  /* fall */\n  :host([effect=\"fall\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"fall\"]) .content {\n    transform-style: preserve-3d;\n    transform: translateZ(600px) rotateX(20deg);\n    opacity: 0;\n  }\n\n  :host([effect=\"fall\"][opened]) .content {\n    transition: all var(--kemet-modal-transition-speed, 0.3s) ease-in;\n    transform: translateZ(0px) rotateX(0deg);\n    opacity: 1;\n  }\n\n  /* side-fall */\n  :host([effect=\"side-fall\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"side-fall\"]) .content {\n    transform-style: preserve-3d;\n    transform: translate(30%) translateZ(600px) rotate(10deg);\n    opacity: 0;\n  }\n\n  :host([effect=\"side-fall\"][opened]) .content {\n    transition: all var(--kemet-modal-transition-speed, 0.3s) ease-in;\n    transform: translate(0%) translateZ(0) rotate(0deg);\n    opacity: 1;\n  }\n\n  /* flip-horizontal */\n  :host([effect=\"flip-horizontal\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"flip-horizontal\"]) .content {\n    transform-style: preserve-3d;\n    transform: rotateY(-70deg);\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n    opacity: 0;\n  }\n\n  :host([effect=\"flip-horizontal\"][opened]) .content {\n    transform: rotateY(0deg);\n    opacity: 1;\n  }\n\n  /* flip-vertical */\n  :host([effect=\"flip-vertical\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"flip-vertical\"]) .content {\n    transform-style: preserve-3d;\n    transform: rotateX(-70deg);\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n    opacity: 0;\n  }\n\n  :host([effect=\"flip-vertical\"][opened]) .content {\n    transform: rotateX(0deg);\n    opacity: 1;\n  }\n\n  /* sign-3d */\n  :host([effect=\"sign-3d\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"sign-3d\"]) .content {\n    transform-style: preserve-3d;\n    transform: rotateX(-60deg);\n    transform-origin: 50% 0;\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"sign-3d\"][opened]) .content {\n    transform: rotateX(0deg);\n    opacity: 1;\n  }\n\n  /* super-scaled */\n  :host([effect=\"super-scaled\"]) .content {\n    transform: scale(2);\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"super-scaled\"][opened]) .content {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  /* slit */\n  :host([effect=\"slit\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"slit\"]) .content {\n    transform-style: preserve-3d;\n    transform: translateZ(-3000px) rotateY(90deg);\n    opacity: 0;\n  }\n\n  :host([effect=\"slit\"][opened]) .content {\n    animation: slit .7s forwards ease-out;\n  }\n\n  @keyframes slit {\n    50% {\n      transform: translateZ(-250px) rotateY(89deg);\n      opacity: 1;\n      animation-timing-function: ease-in;}\n    100% {\n      transform: translateZ(0) rotateY(0deg);\n      opacity: 1;\n    }\n  }\n\n  /* rotate-bottom */\n  :host([effect=\"rotate-bottom\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"rotate-bottom\"]) .content {\n    transform-style: preserve-3d;\n    transform: translateY(100%) rotateX(90deg);\n    transform-origin: 0 100%;\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s) ease-out;\n  }\n\n  :host([effect=\"rotate-bottom\"][opened]) .content {\n    transform: translateY(0%) rotateX(0deg);\n    opacity: 1;\n  }\n\n  /* rotate-left */\n  :host([effect=\"rotate-left\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"rotate-left\"]) .content {\n    transform-style: preserve-3d;\n    transform: translateZ(100px) translateX(-30%) rotateY(90deg);\n    transform-origin: 0 100%;\n    opacity: 0;\n    transition: all var(--kemet-modal-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"rotate-left\"][opened]) .content {\n    transform: translateZ(0px) translateX(0%) rotateY(0deg);\n    opacity: 1;\n  }\n`;\n\nclass KemetModal extends s$1 {\n  static get styles() {\n    return [\n      stylesBase,\n      stylesEffects,\n    ];\n  }\n\n  static get properties() {\n    return {\n      opened: {\n        type: Boolean,\n        reflect: true,\n      },\n      effect: {\n        type: String,\n        reflect: true,\n      },\n      closeOnClick: {\n        type: Boolean,\n        attribute: 'close-on-click',\n      },\n      breakpoint: {\n        type: String,\n      },\n      mobile: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.opened = false;\n    this.closeOnClick = false;\n    this.breakpoint = '600px';\n\n    // bindings\n    this.addEventListener('kemet-modal-close-pressed', () => { this.opened = false; });\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.focusableSelector = 'body, a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]';\n    this.focusableElements = this.querySelectorAll(this.focusableSelector);\n\n    // events\n    this.addEventListener('keyup', (event) => {\n      if (event.key === 'Escape') {\n        this.opened = false;\n      }\n    });\n\n    this.addEventListener('click', (event) => {\n      if (this.opened && this.closeOnClick && event.target.tagName.toLowerCase() === 'kemet-modal') {\n        this.opened = false;\n      }\n    });\n\n    window.addEventListener('resize', () => {\n      this.isMobile();\n    });\n\n    this.focusableElements.forEach((element) => {\n      element.addEventListener('keydown', event => this.handleFocusableDown(event));\n    });\n  }\n\n  updated(prevProps) {\n    if (!prevProps.get('opened') && this.opened === true) {\n      setTimeout(() => {\n        this.focusableElements[0]?.focus();\n      }, 100);\n\n      /**\n       * Fires when the modal opens\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-modal-opened', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    if (prevProps.get('opened') && this.opened === false) {\n      /**\n       * Fires when the modal closes\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-modal-closed', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    this.isMobile();\n  }\n\n  render() {\n    return $`\n      <div class=\"content\" part=\"content\">\n        <slot></slot>\n      </div>\n      <div class=\"overlay\" part=\"overlay\"></div>\n    `;\n  }\n\n  isMobile() {\n    const mediaQuery = window.matchMedia(`(max-width: ${this.breakpoint})`);\n    this.mobile = mediaQuery.matches;\n  }\n\n  handleFocusableDown(event) {\n    const firstFocusable = this.focusableElements[0];\n    const lastFocusable = this.focusableElements[this.focusableElements.length - 1];\n\n    if (event.key === 'Tab') {\n      if (event.shiftKey && document.activeElement === firstFocusable) {\n        event.preventDefault();\n        lastFocusable.focus();\n      } else if (!event.shiftKey && document.activeElement === lastFocusable) {\n        event.preventDefault();\n        firstFocusable.focus();\n      }\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-modal') || customElements.define('kemet-modal', KemetModal);\n\nclass KemetPassword extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          color: inherit;\n          display: none;\n        }\n\n        :host([show]) {\n          display: block;\n        }\n\n        p {\n          margin: 1.6rem 0;\n        }\n\n        .status {\n          display: grid;\n          align-items: center;\n          grid-template-columns: 1fr auto;\n          line-height: 1;\n          margin-top: 0.8rem;\n        }\n\n        .status > span {\n          text-transform: capitalize;\n        }\n\n        .status--weak,\n        .status--better {\n          color: var(--kemet-color-error);\n        }\n\n        .status--strong {\n          color: var(--kemet-color-success);\n        }\n\n        .indicator {\n          display: flex;\n          gap: 0.4rem;\n          margin: 0;\n          list-style: none;\n        }\n\n        .indicator li {\n          width: 1.6rem;\n          height: 0.2rem;\n          background-color: var(--fds-color--gray2);\n        }\n\n        .status--weak .indicator li:nth-child(1) {\n          background-color: var(--kemet-color-error);\n        }\n\n        .status--better .indicator li:nth-child(1),\n        .status--better .indicator li:nth-child(2) {\n          background-color: var(--kemet-color-error);\n        }\n\n        .status--strong .indicator li {\n          background-color: var(--kemet-color-success);\n        }\n\n        .rules {\n          color: var(--kemet-color-primary);\n          list-style: none;\n          font-size: 90%;\n          padding-left: 2rem;\n        }\n\n        .rules li {\n          position: relative;\n        }\n\n        .rules kemet-icon {\n          color: var(--kemet-color-success);\n          position: absolute;\n          left: -2.4rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * An array of objects containing the rules the password must meet\n       */\n      rules: {\n        type: Array,\n      },\n      /**\n       * Controls the display of the component\n       */\n      show: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The value of the input component\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * A message that is above the rules\n       */\n      message: {\n        type: String,\n      },\n      /**\n       * The strength of the password. Weak | Better | Strong\n       */\n      strength: {\n        type: String,\n      },\n      icon: {\n        type: String,\n      },\n      iconSize: {\n        type: Number,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.rules = [\n      { pattern: '(?=.{8,}$)', message: 'At least 8 characters long' },\n      { pattern: '(?=.*[a-z])(?=.*[A-Z])', message: 'Uppercase and lowercase' },\n      { pattern: '(?=.*[0-9])', message: 'At least one number (0-9)' },\n    ];\n    this.message = 'Please make sure you meet all the requirements.';\n    this.icon = 'check2';\n    this.iconSize = 16;\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.field = this.closest('kemet-field');\n    this.input = this.field.querySelector('[slot=\"input\"]');\n\n    // managed properties\n    this.slug = this.field.slug;\n\n    // events listeners\n    this.input.addEventListener('kemet-input-input', this.handleInput.bind(this));\n  }\n\n  render() {\n    return $`\n      <div role=\"alert\" aria-live=\"assertive\">\n        <div class=\"status status--${this.strength}\" part=\"status\">\n          <span>${this.strength}</span>\n          <ul class=\"indicator\" part=\"indicator\">\n            <li></li>\n            <li></li>\n            <li></li>\n          </ul>\n        </div>\n        <p class=\"message\" part=\"message\">${this.message}</p>\n        <ul class=\"rules\" part=\"rules\">\n          ${this.makeRules()}\n        </ul>\n      </div>\n    `;\n  }\n\n  /**\n   * Makes the list of rules\n   * @private\n   * @returns {templateResults} the criteria rules\n   */\n  makeRules() {\n    if (this.input) {\n      const rules = this.rules.map((rule, index) => {\n        const regExp = new RegExp(rule.pattern);\n        const meetsCriteria = regExp.test(this.input.value);\n        this.rules[index].meetsCriteria = meetsCriteria;\n        return $`<li>${this.makeCheckIcon(meetsCriteria)} ${rule.message}</li>`;\n      });\n\n      return rules;\n    }\n\n    return null;\n  }\n\n  /**\n   * Makes the check icon if the criteria has been met\n   * @param {boolean} meetsCriteria\n   * @private\n   * @returns {templateResults} an icon component\n   */\n  makeCheckIcon(meetsCriteria) {\n    if (meetsCriteria) {\n      return $`<kemet-icon icon=${this.icon} size=${this.iconSize}></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles the kemet-input-input event\n   * @param {*} event\n   * @private\n   */\n  handleInput(event) {\n    this.value = event.detail;\n    this.setStrength();\n    this.visibility();\n  }\n\n  /**\n   * Determines the strength of the password\n   * @private\n   */\n  setStrength() {\n    // We use a setTimeout here because makeRules adds the meetsCriteria\n    // property to the rules. We need that to be set by render() before\n    // setting the Strength because the percentage calc is based on it\n    setTimeout(() => {\n      const totalRules = this.rules.length;\n      const metRules = this.rules.filter(rule => rule.meetsCriteria).length;\n      const metRulesPercentage = Math.round((metRules / totalRules) * 100) / 100;\n\n      if (metRulesPercentage <= 0.33) {\n        this.strength = 'weak';\n        this.status = 'error';\n      }\n\n      if (metRulesPercentage > 0.33 && metRulesPercentage <= 0.67) {\n        this.strength = 'better';\n        this.status = 'error';\n      }\n\n      if (metRulesPercentage > 0.67) {\n        this.strength = 'strong';\n        this.status = 'success';\n      }\n\n      /**\n       * Fires when there's a change in status.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-password-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: this.status,\n            validity: { meetsPasswordCriteria: this.status === 'success' },\n            element: this,\n          },\n        }),\n      );\n    }, 1);\n  }\n\n  /**\n   * Determines whether to show or hide the component\n   * @private\n   */\n  visibility() {\n    if (this.value.length > 0) {\n      this.show = true;\n    } else {\n      this.show = false;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-password') || customElements.define('kemet-password', KemetPassword);\n\nconst keyCodes$1 = {\n  ENTER: 13,\n  SPACE: 32,\n  ESC: 27,\n};\n\nclass KemetPopoverClose extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        button {\n          font: inherit;\n          color: inherit;\n          cursor: pointer;\n          border: 0;\n          background: transparent;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return $`\n      <button @click=${() => this.close()} @keyup=${event => this.handleKeyboard(event)}>\n        <slot></slot>\n      </button>\n    `;\n  }\n\n  close() {\n    this.dispatchEvent(\n      new CustomEvent('kemet-popover-close-btn', {\n        bubbles: true,\n        composed: true,\n        detail: this,\n      }),\n    );\n  }\n\n  handleKeyboard(event) {\n    event.preventDefault();\n\n    if (event.keyCode === keyCodes$1.SPACE || event.keyCode === keyCodes$1.ENTER) {\n      this.close();\n    }\n  }\n}\n\nwindow.customElements.define('kemet-popover-close', KemetPopoverClose);\n\nconst fade = r$3`\n  :host([effect=\"fade\"]) #content {\n    opacity: 0;\n    transition: all var(--kemet-popover-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"fade\"][opened]) #content {\n    opacity: 1;\n  }\n`;\n\nconst scale = r$3`\n  :host([effect=\"scale\"]) #content {\n    opacity: 0;\n    transition: all var(--kemet-popover-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"scale\"][opened]) #content {\n    opacity: 1;\n  }\n\n  :host([effect=\"scale\"][position=\"top\"]) #content,\n  :host([effect=\"scale\"][position=\"bottom\"]) #content {\n    transform: translateX(-50%) scale(0.7);\n  }\n\n  :host([effect=\"scale\"][position=\"top\"][opened]) #content,\n  :host([effect=\"scale\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) scale(1);\n  }\n\n  :host([effect=\"scale\"][position=\"left\"]) #content,\n  :host([effect=\"scale\"][position=\"right\"]) #content {\n    transform: translateY(-50%) scale(0.7);\n  }\n\n  :host([effect=\"scale\"][position=\"left\"][opened]) #content,\n  :host([effect=\"scale\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) scale(1);\n  }\n`;\n\nconst slide = r$3`\n  :host([effect=\"slide\"]) #content {\n    opacity: 0;\n    transition: all var(--kemet-popover-transition-speed, 0.3s) cubic-bezier(0.25, 0.5, 0.5, 0.9);\n  }\n\n  :host([effect=\"slide\"][opened]) #content {\n    opacity: 1;\n  }\n\n  :host([effect=\"slide\"][position=\"top\"]) #content {\n    transform: translateX(-50%) translateY(20%);\n  }\n\n  :host([effect=\"slide\"][position=\"top\"][opened]) #content {\n    transform: translateX(-50%) translateY(0);\n  }\n\n  :host([effect=\"slide\"][position=\"bottom\"]) #content {\n    transform: translateX(-50%) translateY(-20%);\n  }\n\n  :host([effect=\"slide\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) translateY(0);\n  }\n\n  :host([effect=\"slide\"][position=\"right\"]) #content {\n    transform: translateY(-50%) translateX(-20%);\n  }\n\n  :host([effect=\"slide\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) translateX(0);\n  }\n\n  :host([effect=\"slide\"][position=\"left\"]) #content {\n    transform: translateY(-50%) translateX(20%);\n  }\n\n  :host([effect=\"slide\"][position=\"left\"][opened]) #content {\n    transform: translateY(-50%) translateX(0);\n  }\n`;\n\nconst fall = r$3`\n  :host([effect=\"fall\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"fall\"]) #content {\n    transform-style: preserve-3d;\n    opacity: 0;\n  }\n\n  :host([effect=\"fall\"][opened]) #content {\n    transition: all var(--kemet-popover-transition-speed, 0.3s) ease-in;\n    opacity: 1;\n  }\n\n  :host([effect=\"fall\"][position=\"top\"]) #content {\n    transform: translateX(-50%) translateZ(600px) rotateX(20deg);\n  }\n\n  :host([effect=\"fall\"][position=\"top\"][opened]) #content {\n    transform: translateX(-50%) translateZ(0px) rotateX(0deg);\n  }\n\n  :host([effect=\"fall\"][position=\"bottom\"]) #content {\n    transform: translateX(-50%) translateZ(600px) rotateX(20deg);\n  }\n\n  :host([effect=\"fall\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) translateZ(0px) rotateX(0deg);\n  }\n\n  :host([effect=\"fall\"][position=\"right\"]) #content {\n    transform: translateY(-50%) translateZ(600px) rotateX(20deg);\n  }\n\n  :host([effect=\"fall\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) translateZ(0px) rotateX(0deg);\n  }\n\n  :host([effect=\"fall\"][position=\"left\"]) #content {\n    transform: translateY(-50%) translateZ(600px) rotateX(20deg);\n  }\n\n  :host([effect=\"fall\"][position=\"left\"][opened]) #content {\n    transform: translateY(-50%) translateZ(0px) rotateX(0deg);\n  }\n`;\n\nconst flipHorizontal = r$3`\n  :host([effect=\"flip-horizontal\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"flip-horizontal\"]) #content {\n    transform-style: preserve-3d;\n    transition: all var(--kemet-popover-transition-speed, 0.3s);\n    opacity: 0;\n  }\n\n  :host([effect=\"flip-horizontal\"][opened]) #content {\n    opacity: 1;\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"top\"]) #content {\n    transform: translateX(-50%) rotateY(-70deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"top\"][opened]) #content {\n    transform: translateX(-50%) rotateY(0deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"bottom\"]) #content {\n    transform: translateX(-50%) rotateY(-70deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) rotateY(0deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"right\"]) #content {\n    transform: translateY(-50%) rotateY(-70deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) rotateY(0deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"left\"]) #content {\n    transform: translateY(-50%) rotateY(-70deg);\n  }\n\n  :host([effect=\"flip-horizontal\"][position=\"left\"][opened]) #content {\n    transform: translateY(-50%) rotateY(0deg);\n  }\n`;\n\nconst flipVertical = r$3`\n  :host([effect=\"flip-vertical\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"flip-vertical\"]) #content {\n    transform-style: preserve-3d;\n    transition: all var(--kemet-popover-transition-speed, 0.3s);\n    opacity: 0;\n  }\n\n  :host([effect=\"flip-vertical\"][opened]) #content {\n    opacity: 1;\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"top\"]) #content {\n    transform: translateX(-50%) rotateX(-70deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"top\"][opened]) #content {\n    transform: translateX(-50%) rotateX(0deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"bottom\"]) #content {\n    transform: translateX(-50%) rotateX(-70deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) rotateX(0deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"right\"]) #content {\n    transform: translateY(-50%) rotateX(-70deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) rotateX(0deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"left\"]) #content {\n    transform: translateY(-50%) rotateX(-70deg);\n  }\n\n  :host([effect=\"flip-vertical\"][position=\"left\"][opened]) #content {\n    transform: translateY(-50%) rotateX(0deg);\n  }\n`;\n\nconst sign = r$3`\n  :host([effect=\"sign\"]) {\n    perspective: 1300px;\n  }\n\n  :host([effect=\"sign\"]) #content {\n    transform-style: preserve-3d;\n    transition: all var(--kemet-popover-transition-speed, 0.3s);\n    opacity: 0;\n  }\n\n  :host([effect=\"sign\"][opened]) #content {\n    opacity: 1;\n  }\n\n  :host([effect=\"sign\"][position=\"top\"]) #content {\n    transform-origin: 0 100%;\n    transform: translateX(-50%) rotateX(90deg);\n  }\n\n  :host([effect=\"sign\"][position=\"top\"][opened]) #content {\n    transform: translateX(-50%) rotateX(0deg);\n  }\n\n  :host([effect=\"sign\"][position=\"bottom\"]) #content {\n    transform-origin: 100% 0;\n    transform: translateX(-50%) rotateX(90deg);\n  }\n\n  :host([effect=\"sign\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) rotateX(0deg);\n  }\n\n  :host([effect=\"sign\"][position=\"right\"]) #content {\n    transform-origin: 0 100%;\n    transform: translateY(-50%) rotateY(90deg);\n  }\n\n  :host([effect=\"sign\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) rotateY(0deg);\n  }\n\n  :host([effect=\"sign\"][position=\"left\"]) #content {\n    transform-origin: 100% 0;\n    transform: translateY(-50%) rotateY(90deg);\n  }\n\n  :host([effect=\"sign\"][position=\"left\"][opened]) #content {\n    transform: translateY(-50%) rotateY(0deg);\n  }\n`;\n\nconst superScaled = r$3`\n  :host([effect=\"super-scaled\"]) #content {\n    opacity: 0;\n    transition: all var(--kemet-popover-transition-speed, 0.3s);\n  }\n\n  :host([effect=\"super-scaled\"][opened]) #content {\n    opacity: 1;\n  }\n\n  :host([effect=\"super-scaled\"][position=\"top\"]) #content,\n  :host([effect=\"super-scaled\"][position=\"bottom\"]) #content {\n    transform: translateX(-50%) scale(2);\n  }\n\n  :host([effect=\"super-scaled\"][position=\"top\"][opened]) #content,\n  :host([effect=\"super-scaled\"][position=\"bottom\"][opened]) #content {\n    transform: translateX(-50%) scale(1);\n  }\n\n  :host([effect=\"super-scaled\"][position=\"left\"]) #content,\n  :host([effect=\"super-scaled\"][position=\"right\"]) #content {\n    transform: translateY(-50%) scale(2);\n  }\n\n  :host([effect=\"super-scaled\"][position=\"left\"][opened]) #content,\n  :host([effect=\"super-scaled\"][position=\"right\"][opened]) #content {\n    transform: translateY(-50%) scale(1);\n  }\n`;\n\nconst tooltip = r$3`\n  #tooltip {\n    display: flex;\n    position: absolute;\n  }\n\n  #tooltip polygon {\n    fill: var(--kemet-popover-background-color, #202020);\n  }\n\n  :host([position=\"top\"]) #tooltip {\n    left: 50%;\n    transform: translateX(-50%);\n  }\n\n  :host([position=\"right\"]) #tooltip {\n    right: 100%;\n    top: 50%;\n    transform-origin: top;\n    transform: translateY(-50%);\n  }\n\n  :host([position=\"bottom\"]) #tooltip {\n    bottom: 100%;\n    left: 50%;\n    transform-origin: left;\n    transform: translateX(-50%);\n  }\n\n  :host([position=\"left\"]) #tooltip {\n    left: 100%;\n    top: 50%;\n    transform-origin: top;\n    transform: translateY(-50%);\n  }\n\n  /* svg */\n  #tooltip svg {\n    position: relative;\n  }\n\n  :host([position=\"right\"]) svg {\n    transform: rotate(90deg);\n    right: -8px;\n  }\n\n  :host([position=\"bottom\"]) svg {\n    transform: rotate(180deg);\n    right: -8px;\n  }\n\n  :host([position=\"left\"]) svg {\n    transform: rotate(270deg);\n    right: 8px;\n  }\n`;\n\nconst customTooltip = r$3`\n  #custom-tooltip {\n    display: flex;\n    position: absolute;\n    z-index: 3;\n  }\n\n  :host([position=\"top\"]) #custom-tooltip {\n    left: 50%;\n    transform: translateX(-50%);\n  }\n\n  :host([position=\"right\"]) #custom-tooltip {\n    right: 100%;\n    top: 50%;\n    transform-origin: top;\n    transform: translateY(-50%);\n  }\n\n  :host([position=\"bottom\"]) #custom-tooltip {\n    bottom: 100%;\n    left: 50%;\n    transform-origin: left;\n    transform: translateX(-50%);\n  }\n\n  :host([position=\"left\"]) #custom-tooltip {\n    left: 100%;\n    top: 50%;\n    transform-origin: top;\n    transform: translateY(-50%);\n  }\n\n  ::slotted([slot=\"custom-tooltip\"]) {\n    display: flex;\n  }\n`;\n\nconst keyCodes = {\n  ENTER: 13,\n  SPACE: 32,\n  ESC: 27,\n};\n\nclass KemetPopover extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: inline-block;\n          position: relative;\n          z-index: unset;\n        }\n\n        #trigger {\n          display: inline-block;\n          cursor: pointer;\n        }\n\n        ::slotted([slot=\"trigger\"]) {\n          position: relative;\n          /* z-index: 2; */\n        }\n\n        #content {\n          visibility: hidden;\n          pointer-events: none;\n          width: var(--kemet-popover-width, 100%);\n          height: var(--kemet-popover-height, auto);\n          position: absolute;\n          z-index: -1;\n        }\n\n        :host([opened]) #content {\n          visibility: visible;\n          z-index: 9;\n          pointer-events: auto;\n        }\n\n        ::slotted([slot=\"content\"]) {\n          color: var(--kemet-popover-color, #fafafa);\n          display: block;\n          position: relative;\n          z-index: 2;\n          cursor: default;\n          width: 100%;\n          padding: 1rem;\n          box-sizing: border-box;\n          background-color: var(--kemet-popover-background-color, #202020);\n          transform: translate(var(--kemet-popover-content-offset-x, 0), var(--kemet-popover-content-offset-y, 0));\n        }\n\n        :host([position=\"top\"]) #content {\n          bottom: calc(100% + var(--kemet-popover-gap, 1rem));\n          left: 50%;\n          transform: translateX(-50%);\n        }\n\n        :host([position=\"right\"]) #content {\n          left: calc(100% + var(--kemet-popover-gap, 1rem));\n          top: 50%;\n          transform: translateY(-50%);\n        }\n\n        :host([position=\"bottom\"]) #content {\n          top: calc(100% + var(--kemet-popover-gap, 1rem));\n          left: 50%;\n          transform: translateX(-50%);\n        }\n\n        :host([position=\"left\"]) #content {\n          right: calc(100% + var(--kemet-popover-gap, 1rem));\n          top: 50%;\n          transform: translateY(-50%);\n        }\n\n        #overlay {\n          display: none;\n        }\n\n        :host([opened]) #overlay {\n          display: block;\n          position: fixed;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          z-index: 1;\n          width: 100%;\n          height: 100%;\n          min-height: 100vh;\n        }\n      `,\n      tooltip,\n      customTooltip,\n      fade,\n      scale,\n      slide,\n      fall,\n      flipHorizontal,\n      flipVertical,\n      sign,\n      superScaled,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines whether or not the popover displays.\n       */\n      opened: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The opening and closing effect of the popover. Is optional.\n       * Values include:\n       * (fade | scale | slide | fall | flip horizontal | flip vertical | sign | super scaled)\n       */\n      effect: {\n        string: String,\n        reflect: true,\n      },\n      /**\n       * Determines the placement of the popover.\n       * Values include: (top | right | bottom | left)\n       */\n      position: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Adds a built in tooltip to the popover.\n       */\n      tooltip: {\n        type: Boolean,\n      },\n      /**\n       * Adds a custom tooltip to the popover.\n       * Use the custom-tooltip slot to specify the custom tooltip.\n       */\n      customTooltip: {\n        type: Boolean,\n        attribute: 'custom-tooltip',\n      },\n      /**\n       * Controls how the trigger should activate the popover.\n       * Values include: (click | hover)\n       */\n      fireOn: {\n        type: String,\n        attribute: 'fire-on',\n      },\n      /**\n       * Allows the popover to be closed by clicking outside of its content.\n       */\n      clickOutside: {\n        type: Boolean,\n        attribute: 'click-outside',\n      },\n      /**\n       * Intelligently positions the popover.\n       */\n      smart: {\n        type: Boolean,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.opened = false;\n    this.effect = null;\n    this.position = 'top';\n    this.tooltip = false;\n    this.customTooltip = false;\n    this.fireOn = 'hover';\n    this.clickOutside = false;\n    this.smart = true;\n\n    this.addEventListener('kemet-popover-close-btn', this.close.bind(this));\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.focusableSelector = 'body, a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable], kemet-popover-close';\n    this.focusableElements = this.querySelectorAll(this.focusableSelector);\n\n    // eslint-disable-next-line prefer-destructuring\n    this.contentElement = this.shadowRoot\n      .querySelector('slot[name=\"content\"]')\n      .assignedNodes({ flatten: true })[0];\n\n    window.addEventListener('resize', () => {\n      this.smartContent();\n    });\n\n    if (this.fireOn === 'click') {\n      this.focusableElements.forEach((element) => {\n        element.addEventListener('keydown', event => this.handleFocusableDown(event));\n      });\n    }\n  }\n\n  updated(prevProps) {\n    if (!prevProps.get('opened') && this.opened === true) {\n      /**\n       * Fires when the popover opens.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-popover-opened', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    if (prevProps.get('opened') && this.opened === false) {\n      /**\n       * Fires when the popover closes.\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-popover-closed', {\n          bubbles: true,\n          composed: true,\n          detail: this,\n        }),\n      );\n    }\n\n    this.smartContent();\n  }\n\n  render() {\n    return $`\n      <div\n        id=\"trigger\"\n        part=\"trigger\"\n        tabIndex=\"0\"\n        @click=${this.fireOn === 'click' ? event => this.toggle(event) : null}\n        @keyup=${this.fireOn === 'click' ? event => this.handleKeyUp(event) : null}\n        @mouseover=${this.fireOn !== 'click' ? () => this.open() : null}\n        @focus=${this.fireOn !== 'click' ? () => this.open() : null}\n        @mouseout=${this.fireOn !== 'click' ? () => this.close() : null}\n        @blur=${this.fireOn !== 'click' ? () => this.close() : null}>\n        <slot name=\"trigger\"></slot>\n        <div id=\"content\" part=\"content\">\n          <slot name=\"content\"></slot>\n          ${this.makeTooltip()}\n        </div>\n      </div>\n      ${this.makeOverlay()}\n    `;\n  }\n\n  open() {\n    this.opened = true;\n  }\n\n  close() {\n    this.opened = false;\n  }\n\n  toggle(event) {\n    const isSlotTrigger = event.target.getAttribute('slot') === 'trigger';\n    const isPartTrigger = event.target.getAttribute('part') === 'trigger';\n\n    if (isSlotTrigger || isPartTrigger) {\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n  }\n\n  handleKeyUp(event) {\n    event.preventDefault();\n\n    if (event.keyCode === keyCodes.ESC) {\n      this.close();\n    }\n\n    if (event.keyCode === keyCodes.ENTER || event.keyCode === keyCodes.SPACE) {\n      this.toggle();\n    }\n  }\n\n  handleFocusableDown(event) {\n    const firstFocusable = this.focusableElements[0];\n    const lastFocusable = this.focusableElements[this.focusableElements.length - 1];\n\n    if (event.key === 'Tab') {\n      if (event.shiftKey && document.activeElement === firstFocusable) {\n        event.preventDefault();\n        lastFocusable.focus();\n      } else if (!event.shiftKey && document.activeElement === lastFocusable) {\n        event.preventDefault();\n        firstFocusable.focus();\n      }\n    }\n  }\n\n  makeTooltip() {\n    if (this.customTooltip) {\n      return $`\n        <div id=\"custom-tooltip\" part=\"custom-tooltip\">\n          <slot name=\"custom-tooltip\"></slot>\n        </div>\n      `;\n    }\n\n    if (this.tooltip) {\n      return $`\n        <div id=\"tooltip\" part=\"tooltip\">\n          <svg width=\"29px\" height=\"14px\" enable-background=\"new 0 0 29 14\" viewBox=\"0 0 29 14\">\n            <polygon points=\"0.15,0 14.5,14.35 28.85,0 \"/>\n          </svg>\n        </div>\n      `;\n    }\n\n    return null;\n  }\n\n  makeOverlay() {\n    if (this.clickOutside) {\n      return $`\n        <div id=\"overlay\" @keyup=${() => this.close()} @click=${() => this.close()}></div>\n      `;\n    }\n\n    return null;\n  }\n\n  smartContent() {\n    if (this.smart) {\n      // order here is important. to properly detect an offscreen popover,\n      // we must remove the direction properties before getting contentRect\n      this.contentElement.style.removeProperty('left');\n      this.contentElement.style.removeProperty('right');\n      this.contentElement.style.removeProperty('top');\n      this.contentElement.style.removeProperty('bottom');\n\n      const contentRect = this.contentElement.getBoundingClientRect();\n\n      const padding = 24;\n      const isOffScreenLeft = contentRect.left < 0;\n      const isOffScreenRight = window.innerWidth - contentRect.right < 0;\n      const isOffScreenTop = contentRect.top < 0;\n      const isOffScreenBottom = contentRect.bottom > window.innerHeight;\n\n      // adjust positioning\n      if (this.position === 'top' && isOffScreenTop) {\n        this.setPosition(contentRect);\n      }\n\n      if (this.position === 'right' && isOffScreenRight) {\n        this.setPosition(contentRect);\n      }\n\n      if (this.position === 'bottom' && isOffScreenBottom) {\n        this.setPosition(contentRect);\n      }\n\n      if (this.position === 'left' && isOffScreenLeft) {\n        this.setPosition(contentRect);\n      }\n\n      // adjust content\n      if (isOffScreenLeft) {\n        this.contentElement.style.left = `${Math.abs(contentRect.left - padding)}px`;\n      } else {\n        this.contentElement.style.removeProperty('left');\n      }\n\n      if (isOffScreenRight) {\n        this.contentElement.style.right = `${Math.abs(window.innerWidth - contentRect.right - padding)}px`;\n      } else {\n        this.contentElement.style.removeProperty('right');\n      }\n\n      if (isOffScreenTop) {\n        this.contentElement.style.top = `${Math.abs(contentRect.top - padding)}px`;\n      } else {\n        this.contentElement.style.removeProperty('top');\n      }\n\n      if (isOffScreenBottom) {\n        this.contentElement.style.bottom = `${Math.abs(contentRect.bottom - window.innerHeight - padding)}px`;\n      } else {\n        this.contentElement.style.removeProperty('bottom');\n      }\n    }\n  }\n\n  setPosition(contentRect) {\n    if (contentRect.top > 0) {\n      this.position = 'top';\n    } else if (contentRect.right < window.innerWidth) {\n      this.position = 'right';\n    } else if (contentRect.bottom < window.innerHeight) {\n      this.position = 'bottom';\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-popover') || customElements.define('kemet-popover', KemetPopover);\n\nclass KemetRadio extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: inline-block;\n        }\n\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n\n        label {\n          cursor: pointer;\n          display: inline-flex;\n          gap: 0.5rem;\n          align-items: center;\n          margin-right: 0.5rem;\n        }\n\n        input {\n          cursor: pointer;\n          margin: 0;\n          padding: 0;\n          width: var(--kemet-radio-size, 18px);\n          height: var(--kemet-radio-size, 18px);\n          position: absolute;\n          opacity: 0;\n        }\n\n        button {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          width: var(--kemet-radio-size, 18px);\n          height: var(--kemet-radio-size, 18px);\n          padding: 0;\n          border-radius: 50%;\n          background: none;\n          border: var(--kemet-radio-border, 1px solid var(--kemet-color-primary));\n        }\n\n        [part='dot'] {\n          display: inline-flex;\n          border-radius: 50%;\n          width: var(--kemet-radio-size, 18px);\n          height: var(--kemet-radio-size, 18px);\n          background: var(--kemet-radio-dot-color, var(--kemet-color-primary));\n          border: var(--kemet-radio-border, 1px solid var(--kemet-color-primary));\n          box-shadow: inset 0px 0px 0px var(--kemet-radio-dot-border-width, 3px) var(--kemet-radio-dot-border-color, var(--kemet-color-white));\n        }\n\n        :host([filled]) [part='dot'] {\n          background: var(--kemet-radio-dot-color-filled, var(--kemet-color-white));\n          box-shadow: inset 0px 0px 0px var(--kemet-radio-dot-border-width, 4px) var(--kemet-radio-dot-border-color, var(--kemet-color-primary));\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The text next to the radio button\n       */\n      label: {\n        type: String,\n      },\n      /**\n       * Determines whether or not the button is checked\n       */\n      checked: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The name of the field\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The value of the radio button\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * Determines if the button should be disabled\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Is true when the button is focused on\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Displayed the button as a filled button\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.label = '';\n    this.name = this.closest('kemet-radios').name || 'radio-button';\n    this.disabled = false;\n  }\n\n  firstUpdated() {\n    this.input = this.shadowRoot.querySelector('input');\n    this.setAttribute('role', 'radio');\n\n    if (this.checked) {\n      this.setAttribute('aria-checked', 'true');\n    } else {\n      this.setAttribute('aria-checked', 'false');\n    }\n  }\n\n  render() {\n    return $`\n      <label part=\"label\">\n        <input\n          type=\"radio\"\n          name=${l$1(this.name)}\n          .value=${this.value}\n          .checked=${l(this.checked)}\n          .disabled=${this.disabled}\n          @blur=${() => this.handleBlur()}\n          @focus=${() => this.handleFocus()}\n        />\n        <button part=\"button\" aria-label=${this.label}>${this.makeDot()}</button>\n        <span part=\"text\">${this.label}</span>\n      </label>\n    `;\n  }\n\n  click() {\n    this.input.click();\n  }\n\n  blur() {\n    this.input.blur();\n  }\n\n  focus() {\n    this.input.focus();\n  }\n\n  handleBlur() {\n    this.focused = false;\n\n    /**\n     * Fires when the checkbox loses or receives focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-radio-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n  }\n\n  handleFocus() {\n    this.focused = true;\n\n    /**\n     * Fires when the checkbox loses or receives focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-radio-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  makeDot() {\n    if (this.checked) {\n      return $`\n        <span part=\"dot\"></span>\n      `;\n    }\n\n    return null;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-radio') || customElements.define('kemet-radio', KemetRadio);\n\nclass KemetRadios extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        *,\n        *::before,\n        *::after {\n          box-sizing: border-box;\n        }\n\n        :host {\n          display: block;\n        }\n\n        fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n          display: flex;\n          gap: 0.5rem;\n        }\n\n        legend {\n          margin-bottom: 1rem;\n        }\n\n        :host([axis='vertical']) fieldset {\n          flex-direction: column;\n        }\n\n        [part='message'] {\n          display: block;\n          margin-top: 0.5rem;\n        }\n\n        :host([status='error']) [part='message'] {\n          color: var(--kemet-color-error);\n        }\n\n        :host([status='warning']) [part='message'] {\n          color: var(--kemet-color-error);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The legend text for the fieldset\n       */\n      legend: {\n        type: String,\n      },\n      /**\n       * The direction of the button's layout\n       */\n      axis: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * The value of the selected radio button\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * The name of the radio button set\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The status of the radio button set\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Validation message for the user\n       */\n      message: {\n        type: String,\n      },\n      /**\n       * Determines whether or not the radio button set is required\n       */\n      required: {\n        type: Boolean,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.legend = '';\n    this.axis = 'horizontal';\n    this.name = 'radios';\n    this.status = 'standard';\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  firstUpdated() {\n    this.radios = this.querySelectorAll('kemet-radio');\n    this.setAttribute('role', 'radiogroup');\n  }\n\n  render() {\n    return $`\n      <fieldset part=\"fieldset\">\n        ${this.legend !== '' ? $`<legend part=\"legend\">${this.legend}</legend>` : null}\n        <slot @click=${event => this.handleClick(event)} @keydown=${event => this.handleKeyDown(event)} @slotchange=${() => this.handleSlotChange()}></slot>\n      </fieldset>\n      ${this.makeMessage()}\n    `;\n  }\n\n  handleClick(event) {\n    const { target } = event;\n\n    this.radios.forEach((radio) => {\n      radio.checked = false;\n      radio.tabIndex = radio === target ? 0 : -1;\n      radio.setAttribute('aria-checked', 'false');\n    });\n\n    if (!target.disabled) {\n      target.checked = true;\n      target.setAttribute('aria-checked', 'true');\n      this.value = target.value;\n      this.status = 'standard';\n\n      /**\n       * Fires when the state of the checkbox changes\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-radios-change', {\n          bubbles: true,\n          composed: true,\n          detail: target,\n        }),\n      );\n    }\n  }\n\n  handleKeyDown(event) {\n    const radios = Array.from(this.radios);\n    const arrowKeys = ['ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft'];\n    const forwardKeys = ['ArrowRight', 'ArrowDown'];\n    const shift = forwardKeys.includes(event.key) ? 1 : -1;\n    const checkedIndex = radios.findIndex(radio => radio.checked) ?? radios[0];\n\n    let index = checkedIndex + shift;\n\n    if (arrowKeys.includes(event.key)) {\n      if (index < 0) {\n        index = radios.length - 1;\n      }\n\n      if (index > radios.length - 1) {\n        index = 0;\n      }\n\n      this.radios.forEach((radio) => {\n        radio.checked = false;\n        radio.tabIndex = -1;\n      });\n\n      this.radios[index].focus();\n      this.radios[index].checked = true;\n      this.radios[index].tabIndex = 0;\n    }\n  }\n\n  handleSlotChange() {\n    const radios = Array.from(this.radios);\n    const checkedRadio = radios.find(radio => radio.checked);\n\n    this.radios.forEach((radio) => {\n      radio.tabIndex = -1;\n      radio.input.tabIndex = -1;\n    });\n\n    if (checkedRadio) {\n      checkedRadio.tabIndex = 0;\n    }\n  }\n\n  makeMessage() {\n    if (this.status === 'error' || this.status === 'warning') {\n      return $`<span part=\"message\">${this.message}</span>`;\n    }\n\n    return null;\n  }\n\n  checkValidity() {\n    if (this.required) {\n      return !!this.value;\n    }\n\n    return true;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-radios') || customElements.define('kemet-radios', KemetRadios);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends i{constructor(i){if(super(i),this.it=w,i.type!==t.CHILD)throw Error(this.constructor.directiveName+\"() can only be used in child bindings\")}render(r){if(r===w||null==r)return this.ft=void 0,this.it=r;if(r===b)return r;if(\"string\"!=typeof r)throw Error(this.constructor.directiveName+\"() called with a non-string value\");if(r===this.it)return this.ft;this.it=r;const s=[r];return s.raw=s,this.ft={_$litType$:this.constructor.resultType,strings:s,values:[]}}}e.directiveName=\"unsafeHTML\",e.resultType=1;const o=e$1(e);\n\nclass KemetRotator extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        display: flex;\n      }\n\n      .rotator__slide {\n        pointer-events: none;\n      }\n\n      .rotator__slide--active {\n        pointer-events: auto;\n      }\n\n      /* fade effect */\n      :host([effect=\"fade\"]) .rotator {\n        display: inline-flex;\n        flex-wrap: nowrap;\n        flex-direction: row;\n      }\n\n      :host([effect=\"fade\"]) .rotator__slide {\n        width: 100%;\n        flex: none;\n        opacity: 0;\n        box-sizing: border-box;\n        transition: all var(--kemet-rotator-transition-speed, 500ms) ease;\n      }\n\n      :host([effect=\"fade\"]) .rotator__slide:not(:first-child) {\n        margin-left: -100%; /* this is the bulk of the overlay trick */\n      }\n\n      :host([effect=\"fade\"]) .rotator__slide--active {\n        opacity: 1;\n      }\n\n      /* flip effect */\n      :host([effect=\"flip\"]) .rotator {\n        display: flex;\n        position: relative;\n\n        perspective: 500;\n      }\n\n      :host([effect=\"flip\"]) .rotator__slide {\n        display: block;\n        width: auto;\n        position: absolute;\n        top: -20px;\n        left: 0;\n\n        opacity: 0;\n\n        transform: rotateX(90deg);\n        transform-origin: 0% 0%;\n        transition: all var(--kemet-rotator-transition-speed, 500ms) ease;\n      }\n\n      :host([effect=\"flip\"]) .rotator__slide--active {\n        top: 0;\n        opacity: 1;\n\n        transform: rotateX(0deg);\n      }\n\n      :host([effect=\"flip\"]) .rotator__slide--prev {\n        top: 40px;;\n        transform: rotateX(-90deg);\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The index number for the current slide.\n       */\n      activeSlide: {\n        type: Number,\n      },\n      /**\n       * The width of the rotator block.\n       */\n      width: {\n        type: String,\n      },\n      /**\n       * The height of the rotator block.\n       */\n      height: {\n        type: String,\n      },\n      /**\n       * Text in the rotator. Supports HTML.\n       */\n      messages: {\n        type: Array,\n      },\n      /**\n       * The transition effect type.\n       */\n      effect: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * How fast, in seconds, each slide lasts. Stop the rotator with 0.\n       */\n      rotationSpeed: {\n        type: Number,\n        attribute: 'rotation-speed',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.activeSlide = 0;\n    this.messages = [];\n    this.effect = 'fade';\n    this.rotationSpeed = 3;\n    this.width = 'auto';\n    this.height = 'auto';\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.prevSlide = null;\n\n    window.addEventListener('resize', this.setDimensions.bind(this));\n  }\n\n  updated(changed) {\n    const widthHasChanged = !!changed.get('width');\n    const heightHasChanged = !!changed.get('height');\n\n    this.setDimensions();\n\n    // only trigger slide updates when width and height has not changed\n    if (!widthHasChanged && !heightHasChanged) {\n      setTimeout(() => {\n        if (this.rotationSpeed > 0) {\n          this.nextSlide();\n        }\n      }, this.rotationSpeed * 1000);\n    }\n  }\n\n  render() {\n    const setWidth = this.effect === 'flip' ? `width:${this.width};` : '';\n    const setHeight = this.effect === 'flip' ? `height:${this.height};` : '';\n\n    return $`\n      <span class=\"rotator\" style=\"${setWidth} ${setHeight}\">\n        ${this.makeMessages()}\n      </span>\n    `;\n  }\n\n  makeMessages() {\n    const messages = this.messages.map((message, index) => {\n      const setActiveClass = this.activeSlide === index ? 'rotator__slide--active' : '';\n      const setPrevClass = this.prevSlide === index ? 'rotator__slide--prev' : '';\n\n      return $`\n        <span class=\"rotator__slide ${setActiveClass} ${setPrevClass}\">\n          ${o(message)}\n        </span>\n      `;\n    });\n\n    return messages;\n  }\n\n  setDimensions() {\n    if (this.effect === 'flip') {\n      this.width = `${this.offsetWidth}px`;\n\n      const slides = this.shadowRoot.querySelectorAll('.rotator__slide');\n      let tallest = 0;\n\n      slides.forEach((slide) => {\n        if (slide.offsetHeight > tallest) {\n          tallest = slide.offsetHeight;\n        }\n      });\n\n      this.height = `${tallest}px`;\n    }\n  }\n\n  nextSlide() {\n    if (this.activeSlide < this.messages.length - 1) {\n      this.activeSlide += 1;\n      this.prevSlide = this.activeSlide - 1;\n    } else {\n      this.activeSlide = 0;\n      this.prevSlide = this.messages.length - 1;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-rotator') || customElements.define('kemet-rotator', KemetRotator);\n\nclass KemetScrollLink extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        cursor: pointer;\n        display: inline-block;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A DOM element that establishes the context of scrolling.\n       */\n      element: {\n        type: Object,\n      },\n      /**\n       * A DOM element that represents the destination of the scroll link.\n       * If no target is specified it will default to the top of the page.\n       */\n      target: {\n        type: Object,\n      },\n      /**\n       * Allows the horizontal scrolling to stop short of the given value.\n       */\n      xOffset: {\n        type: Number,\n        attribute: 'x-offset',\n        reflect: true,\n      },\n      /**\n       * Allows the vertical scrolling to stop short of the given value.\n       */\n      yOffset: {\n        type: Number,\n        attribute: 'y-offset',\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.element = this.element || window;\n    this.target = this.target || document.querySelector('body');\n    this.xOffset = 0;\n    this.yOffset = 0;\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.keyCodes = {\n      ENTER: 13,\n      SPACE: 32,\n    };\n    this.isSmoothSupported = 'scrollBehavior' in document.documentElement.style;\n  }\n\n  render() {\n    return $`\n      <div tabindex=\"0\" @click=${() => this.handleScroll()} @keyup=${event => this.handleKeyup(event)}>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  handleKeyup(event) {\n    if (event.keyCode === this.keyCodes.ENTER || event.keyCode === this.keyCodes.SPACE) {\n      this.handleScroll();\n    }\n  }\n\n  handleScroll() {\n    const scrollTop = this.target.offsetTop + this.yOffset;\n    const scrollLeft = this.target.offsetLeft + this.xOffset;\n\n    if (this.isSmoothSupported) {\n      this.element.scrollTo({\n        top: scrollTop,\n        left: scrollLeft,\n        behavior: 'smooth',\n      });\n    } else {\n      this.element.scrollTo(scrollLeft, scrollTop);\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-scroll-link') || customElements.define('kemet-scroll-link', KemetScrollLink);\n\nclass KemetScrollNav extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: block;\n          box-sizing: border-box;\n          padding: var(--kemet-scroll-nav-padding, 1rem 2rem);\n          background-color: var(--kemet-scroll-nav-background, #fafafa);\n          transition: all var(--kemet-scroll-nav-transition, 300ms) ease;\n        }\n\n        :host([transform]),\n        :host([effect=\"resize\"]) {\n          position: fixed;\n          top: 0;\n          width: 100%;\n        }\n\n        :host([effect=\"resize\"]) {\n          height: var(--kemet-scroll-nav-resize-height, 400px);\n        }\n\n        :host([transform][effect=\"resize\"]) {\n          height: var(--kemet-scroll-nav-resize-height-transformed, 100px);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines where the transform point is activated. Values include: (sticky | resize)\n       */\n      effect: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Whether or not the nav has shifted into a new state.\n       */\n      transform: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Allows for an arbitrary adjustment of the transform point in pixels.\n       * Works with negative values.\n       */\n      offset: {\n        type: Number,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.effect = 'sticky';\n    this.transform = false;\n    this.offset = 0;\n  }\n\n  render() {\n    return $`\n      <slot></slot>\n    `;\n  }\n\n  firstUpdated() {\n    const stickPoint = this.offsetTop;\n    const elementHeight = this.offsetHeight;\n\n    window.addEventListener('scroll', () => {\n      // we pass stickPoint and elementHeight as recorded constants\n      // so that it does not update for each call to handleScroll\n      this.handleScroll(stickPoint, elementHeight);\n    });\n  }\n\n  handleScroll(stickPoint, elementHeight) {\n    const transformPoint = (this.effect === 'sticky')\n      ? stickPoint + this.offset\n      : elementHeight + this.offset;\n\n    if (window.pageYOffset >= transformPoint) {\n      this.transform = true;\n    } else {\n      this.transform = false;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-scroll-nav') || customElements.define('kemet-scroll-nav', KemetScrollNav);\n\nclass KemetScrollSnapPaginator extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        margin: auto;\n        padding: var(--kemet-scroll-snap-paginator-padding, 1rem 0);\n      }\n\n      nav {\n        display: flex;\n        gap: var(--kemet-scroll-snap-paginator-gap, 0.5rem);\n      }\n\n      :host([center]) nav {\n        justify-content: center;\n      }\n\n      .link {\n        cursor: pointer;\n        color: var(--kemet-scroll-snap-paginator-link-color, var(--kemet-color-primary));\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Information about each slide.\n       */\n      slides: {\n        type: Array,\n      },\n      /**\n       * A string representing which icon to use for pagination. Supports icons used in kemet-icon.\n       */\n      icon: {\n        type: String,\n      },\n      /**\n       * The size in pixels of the icons.\n       */\n      size: {\n        type: Number,\n      },\n      /**\n       * Determines whether to center the pagination items.\n       */\n      center: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Will hide inactive pagination items if set to true.\n       */\n      hideFocusedLinks: {\n        type: Boolean,\n        attribute: 'hide-focused-links',\n      },\n      /**\n       * If set to true, the pages in the pagination iterator will appear as a set of numbers.\n       */\n      useNumberPages: {\n        type: Boolean,\n        reflect: true,\n        attribute: 'use-number-pages',\n      },\n      /**\n       * If set to true, the pages in the pagination iterator will appear as the label set on\n       * the slide.\n       */\n      useLabelPages: {\n        type: Boolean,\n        reflect: true,\n        attribute: 'use-label-pages',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.slides = [];\n    this.icon = 'circle-fill';\n    this.size = 16;\n    this.hideFocusedLinks = false;\n    this.useNumberPages = false;\n    this.useLabelPages = false;\n  }\n\n  updated() {\n    const scrollSnapElement = this.closest('kemet-scroll-snap');\n\n    if (scrollSnapElement) {\n      scrollSnapElement.addEventListener('kemet-scroll-snap-make-slides', (event) => {\n        this.slides = event.detail;\n      });\n    }\n  }\n\n  render() {\n    return $`\n      <nav part=\"nav\">${this.makePagination()}</nav>\n    `;\n  }\n\n  makePagination() {\n    let counter = 0;\n\n    if (this.slides) {\n      return this.slides.map((slide) => {\n        counter = counter += 1;\n\n        if (slide.focused) {\n          return $`\n            <span part=\"span\">${this.pageDisplay(slide, counter)}</span>\n          `;\n        }\n\n        return $`\n          <span\n            class=\"link\"\n            tabindex=\"0\"\n            role=\"button\"\n            @keyup=\"${event => this.handleKeyboardInput(event, slide.id)}\"\n            @click=${() => this.slideLink(slide.id)}\n            aria-label=\"${slide.label}\">\n            ${this.pageDisplay(slide, counter)}\n          </span>\n        `;\n      });\n    }\n\n    return null;\n  }\n\n  pageDisplay(slide, visibleIndex) {\n    if (this.useNumberPages) {\n      return visibleIndex;\n    }\n\n    if (this.useLabelPages) {\n      return slide.label;\n    }\n\n    return $`<kemet-icon icon=${this.icon} size=${this.size}></kemet-icon>`;\n  }\n\n  slideLink(index) {\n    /**\n     * Fires when a set of slides are focused on.\n     */\n    this.dispatchEvent(new CustomEvent('kemet-scroll-snap-focus', {\n      bubbles: true,\n      composed: true,\n      detail: index,\n    }));\n  }\n\n  handleKeyboardInput(event, id) {\n    if (event.code === 'Enter' || event.code === 'Space') {\n      this.slideLink(id);\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-scroll-snap-paginator') || customElements.define('kemet-scroll-snap-paginator', KemetScrollSnapPaginator);\n\nclass KemetScrollSnapSlide extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        display: block;\n        flex: 0 0 auto;\n        width: var(--kemet-scroll-snap-slide-width, 100%);\n        scroll-snap-align: var(--kemet-scroll-snap-slide-align, center);\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Is true when the slide is fully visible in it's container.\n       */\n      focused: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Identifies the slide.\n       */\n      index: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Labels the slide.\n       */\n      label: {\n        type: String,\n        reflect: true,\n      },\n    };\n  }\n\n  updated() {\n    this.addTabIndex();\n  }\n\n  render() {\n    return $`\n      <slot></slot>\n    `;\n  }\n\n  addTabIndex() {\n    this.setAttribute('tabindex', '0');\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-scroll-snap-slide') || customElements.define('kemet-scroll-snap-slide', KemetScrollSnapSlide);\n\nclass KemetScrollSnap extends s$1 {\n  static get styles() {\n    return r$3`\n      *,\n      *::after,\n      *::before {\n        box-sizing: border-box;\n      }\n\n      :host {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n      }\n\n      :host([axis='horizontal']) {\n        margin: auto;\n        max-width: var(--kemet-scroll-snap-horizontal-max-width, 1024px);\n      }\n\n      :host([pagination=\"left\"]),\n      :host([pagination=\"right\"]) {\n        flex-direction: row;\n      }\n\n      :host([pagination=\"none\"]) ::slotted([slot=\"pagination\"]) {\n        display: none;\n      }\n\n      :host([pagination=\"top\"]) ::slotted([slot=\"pagination\"]),\n      :host([pagination=\"left\"]) ::slotted([slot=\"pagination\"]) {\n        order: -1;\n      }\n\n\n      ::slotted([slot=\"slides\"]) {\n        display: flex;\n        gap: var(--kemet-scroll-snap-gap, 1.5rem);\n        scroll-snap-type: x mandatory;\n        overflow-x: scroll;\n      }\n\n      /* vertical */\n      :host([axis=\"vertical\"]) {\n        height: var(--kemet-scroll-snap-vertical-height, 100vh);\n      }\n\n      :host([axis=\"vertical\"]) ::slotted([slot=\"slides\"]) {\n        flex-direction: column;\n        overflow-x: hidden;\n        scroll-snap-type: y mandatory;\n        padding: var(--kemet-scroll-snap-slides-vertical-padding, 0 2rem);\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Determines the direction the component flows. Values include: (horizontal|vertical)\n       */\n      axis: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Determines where to display the paginator. Values include: (top | right | bottom | left)\n       */\n      pagination: {\n        type: String,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.axis = 'horizontal';\n    this.pagination = 'bottom';\n\n    this.addEventListener('kemet-scroll-snap-focus', (event) => {\n      this.focusSlide(event.detail);\n    });\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.isTouchDevice = 'ontouchstart' in document.documentElement;\n    this.slides = [];\n\n    this.setFocusedSlides();\n  }\n\n  updated() {\n    this.setVerticalAttribute();\n  }\n\n  render() {\n    return $`\n      <slot name=\"slides\"></slot>\n      <slot name=\"pagination\"></slot>\n    `;\n  }\n\n  setFocusedSlides() {\n    // reference: https://24ways.org/2019/beautiful-scrolling-experiences-without-libraries/\n    // reference: https://css-tricks.com/an-explanation-of-how-the-intersection-observer-watches/\n    const slides = this.querySelectorAll('kemet-scroll-snap-slide');\n    const container = this.querySelector('[slot=\"slides\"]');\n\n    const options = {\n      root: container,\n      rootMargin: '0px',\n      threshold: 0.5,\n    };\n\n    const callback = (entries) => {\n      entries.forEach((entry) => {\n        const { target } = entry;\n\n        if (entry.intersectionRatio >= 0.5) {\n          target.focused = true;\n        } else {\n          target.focused = false;\n        }\n      });\n\n      this.makeSlides();\n    };\n\n    const observer = new IntersectionObserver(callback, options);\n\n    slides.forEach((slide) => {\n      observer.observe(slide);\n    });\n  }\n\n  makeSlides() {\n    const slides = [];\n\n    this.querySelectorAll('kemet-scroll-snap-slide').forEach((element, index) => {\n      const slide = element;\n\n      slide.index = index;\n      slides.push({\n        id: index,\n        focused: slide.focused,\n        label: slide.label,\n      });\n    });\n\n    this.slides = slides;\n\n    /**\n     * Fires when slide data has been created.\n     */\n    this.dispatchEvent(new CustomEvent('kemet-scroll-snap-make-slides', {\n      bubbles: true,\n      composed: true,\n      detail: this.slides,\n    }));\n  }\n\n  focusSlide(index) {\n    const activeSlide = this.querySelector(`kemet-scroll-snap-slide[index=\"${index}\"]`);\n    activeSlide.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n  }\n\n  setVerticalAttribute() {\n    if (this.axis === 'vertical') {\n      document.querySelector('html').setAttribute('kemet-scroll-snap-axis', 'vertical');\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-scroll-snap') || customElements.define('kemet-scroll-snap', KemetScrollSnap);\n\nclass KemetOption extends s$1 {\n  static get properties() {\n    return {\n      /**\n       * The label of the option\n       */\n      label: {\n        type: String,\n      },\n      /**\n       * The value of the options\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * Determines whether to disable the option\n       */\n      disabled: {\n        type: Boolean,\n      },\n      /**\n       * Selects the option if true\n       */\n      selected: {\n        type: Boolean,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.value = '';\n  }\n\n  render() {\n    return $`<slot></slot>`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-option') || customElements.define('kemet-option', KemetOption);\n\nclass KemetSelect extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          position: relative;\n          display: block;\n        }\n\n        select {\n          display: block;\n          font-size: 1rem;\n          width: 100%;\n          padding: var(--kemet-select-padding, 1rem);\n          border: var(--kemet-select-border, 1px solid var(--kemet-color-primary));\n          appearance: none;\n          box-sizing: border-box;\n          background-color: transparent;\n        }\n\n        :host([status='error']) select {\n          border: var(--kemet-select-border-color-error, 1px solid var(--kemet-color-error));\n        }\n\n        :host([status='success']) select {\n          border: var(--kemet-select-border-color-success, 1px solid var(--kemet-color-success));\n        }\n\n        :host([status='warning']) select {\n          border: var(--kemet-select-border-color-warning, 1px solid var(--kemet-color-warning));\n        }\n\n        :host([disabled]) select {\n          opacity: 0.5;\n        }\n\n        :host([rounded]) select {\n          border-radius: var(--kemet-select-border-radius-rounded, var(--kemet-border-radius));\n        }\n\n        :host([filled]) select {\n          border: var(--kemet-select-border-filled, none);\n          color: var(--kemet-select-color-filled, var(--kemet-color-white));\n          background-color: var(--kemet-select-background-color-filled, var(--kemet-color-primary));\n        }\n\n        :host([filled]) kemet-icon {\n          color: var(--kemet-select-color-filled, var(--kemet-color-white));\n        }\n\n        :host([status='error'][filled]) select {\n          background-color: var(--kemet-select-background-color-error, var(--kemet-color-error));\n        }\n\n        :host([status='success'][filled]) select {\n          background-color: var(--kemet-select-background-color-success, var(--kemet-color-success));\n        }\n\n        :host([status='warning'][filled]) select {\n          background-color: var(--kemet-select-background-color-warning, var(--kemet-color-warning));\n        }\n\n        kemet-icon {\n          position: absolute;\n          right: var(--kemet-select-icon-right, 1rem);\n          top: 50%;\n          transform: translateY(-50%);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A string the uniquely identifies the select\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * The name of the select\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The value of the select\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * The options the select contains\n       */\n      options: {\n        type: Array,\n      },\n      /**\n       * The status of the select\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Determines whether or not the field is required\n       */\n      required: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines whether or not the field is disabled\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Support of multiple choice selections\n       */\n      multiple: {\n        type: Boolean,\n      },\n      /**\n       * The dropdown icon\n       */\n      icon: {\n        type: String,\n      },\n      /**\n       * The dropdown icon size\n       */\n      iconSize: {\n        type: Number,\n        attribute: 'icon-size',\n      },\n      /**\n       * Displays a filled select\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Displays rounded corners\n       */\n      rounded: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.name = 'select';\n    this.icon = 'chevron-down';\n    this.iconSize = 16;\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n\n    // elements\n    this.control = this.closest('kemet-field');\n  }\n\n  firstUpdated() {\n    // elements\n    this.select = this.shadowRoot.querySelector('select');\n    this.selectedOption = this.querySelector('[selected]');\n\n    this.value = this.selecltedOption ? this.selectedOption.value : '';\n  }\n\n  render() {\n    return $`\n      <select\n        part=\"select\"\n        id=${this.slug}\n        name=${this.name}\n        ?required=${this.required}\n        ?disabled=${this.disabled}\n        ?multiple=${this.multiple}\n        @change=${this.handleChange}\n        @focus=${this.handleFocus}\n        @blur=${this.handleBlur}\n        @invalid=${this.handleInvalid}\n      >\n        ${this.makeOptions()}\n      </select>\n      ${this.makeIcon()}\n      <slot @slotchange=${() => this.makeOptions()}></slot>\n    `;\n  }\n\n  /**\n   * Generates the option elements\n   * @private\n   * @returns {TemplateResult} An option element\n   */\n  makeOptions() {\n    this.options = [];\n    this.optionElements = this.querySelectorAll('kemet-option');\n\n    this.optionElements.forEach((option) => {\n      // if (index === 0) this.value = option.value;\n      // this.value = option.selected ? option.value : this.value;\n      this.options = this.options.concat({\n        label: option.label,\n        value: option.value,\n        disabled: option.disabled,\n        selected: option.selected,\n      });\n    });\n\n    return this.options.map(\n      option => $`<option value=${option.value} ?disabled=${option.disabled} ?selected=${option.selected}>\n          ${option.label}\n        </option>`,\n    );\n  }\n\n  /**\n   * Generates an dropdown icon\n   * @private\n   */\n  makeIcon() {\n    if (this.icon || this.icon !== '') {\n      return $`<kemet-icon icon=${this.icon} size=${this.iconSize}></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handles when the input receives focus\n   * @private\n   */\n  handleFocus() {\n    this.hasFocus = true;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the input loses focus\n   * @private\n   */\n  handleBlur() {\n    this.hasFocus = false;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n\n    this.select.checkValidity();\n\n    if (!this.select.checkValidity()) {\n      this.invalid = true;\n      this.status = 'error';\n      this.control.status = 'error';\n\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'error',\n            validity: this.select.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Handles when the input changes value\n   * @private\n   */\n  handleChange() {\n    this.value = this.select.value;\n\n    if (this.select.checkValidity()) {\n      this.invalid = false;\n      this.status = 'standard';\n\n      /**\n       * Fires when there's a change in status\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'standard',\n            validity: this.select.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Handles when the input has an error\n   * @private\n   */\n  handleInvalid() {\n    this.invalid = true;\n    this.status = 'error';\n\n    /**\n     * Fires when there's a change in status\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-status', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          status: 'error',\n          validity: this.select.validity,\n          element: this,\n        },\n      }),\n    );\n  }\n\n  /**\n   * Checks the validity of the standard select\n   * @public\n   * @returns {boolean}\n   */\n  checkValidity() {\n    this.select.checkValidity();\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-select') || customElements.define('kemet-select', KemetSelect);\n\nclass KemetSortableItem extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          cursor: grab;\n          display: block;\n          padding: 1rem;\n          border: 1px solid var(--kemet-color-primary);\n        }\n\n        :host([ghost]) {\n          opacity: 0.5;\n          border-style: dashed;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /* Automatically set to true when an item is dragged to a new spot */\n      ghost: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  firstUpdated() {\n    this.draggable = true;\n  }\n\n  render() {\n    return $`<slot></slot>`;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-sortable-item') || customElements.define('kemet-sortable-item', KemetSortableItem);\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nvar index_min = {exports: {}};\n\n/*! mobile-drag-drop 2.1.0 | Copyright (c) 2017 Tim Ruffles | MIT License */\n\n(function (module, exports) {\n\t!function(a,b){b(exports);}(commonjsGlobal,function(a){function b(){var a={dragEvents:\"ondragstart\"in document.documentElement,draggable:\"draggable\"in document.documentElement,touchEvents:\"ontouchstart\"in document.documentElement,userAgentSupportingNativeDnD:void 0},b=!!window.chrome||/chrome/i.test(navigator.userAgent);return a.userAgentSupportingNativeDnD=!(/iPad|iPhone|iPod|Android/.test(navigator.userAgent)||b&&a.touchEvents),a}function c(){var a=!1;try{var b=Object.defineProperty({},\"passive\",{get:function(){a=!0;}});window.addEventListener(\"test\",null,b);}catch(a){}return a}function d(a){if(a&&Object.keys(a).forEach(function(b){B[b]=a[b];}),!B.forceApply){var d=b();if(d.userAgentSupportingNativeDnD&&d.draggable&&d.dragEvents)return !1}return y=c(),B.holdToDrag?h(\"touchstart\",w,!1):h(\"touchstart\",e,!1),!0}function e(a){if(!z){var b=f(a);if(b)try{z=new J(a,B,b,g);}catch(b){throw g(B,a,3),b}}}function f(a){var b=a.target;do if(b.draggable!==!1&&b.getAttribute&&\"true\"===b.getAttribute(\"draggable\"))return b;while((b=b.parentNode)&&b!==document.body)}function g(a,b,c){if(0===c&&a.defaultActionOverride)try{a.defaultActionOverride(b),b.defaultPrevented;}catch(a){}z=null;}function h(a,b,c){void 0===c&&(c=!0),document.addEventListener(a,b,!!y&&{passive:c});}function i(a,b){document.removeEventListener(a,b);}function j(a){return 0===a.length?0:a.reduce(function(a,b){return b+a},0)/a.length}function k(a){return a&&a.tagName}function l(a,b){for(var c=0;c<a.changedTouches.length;c++){var d=a.changedTouches[c];if(d.identifier===b)return !0}return !1}function m(a,b,c,d,e,f,g){void 0===g&&(g=null);var h=b.changedTouches[0],i=new Event(c,{bubbles:!0,cancelable:d});i.dataTransfer=f,i.relatedTarget=g,i.screenX=h.screenX,i.screenY=h.screenY,i.clientX=h.clientX,i.clientY=h.clientY,i.pageX=h.pageX,i.pageY=h.pageY;var j=a.getBoundingClientRect();return i.offsetX=i.clientX-j.left,i.offsetY=i.clientY-j.top,i}function n(a,b,c){for(var d=[],e=[],f=0;f<b.touches.length;f++){var g=b.touches[f];d.push(g[a+\"X\"]),e.push(g[a+\"Y\"]);}c.x=j(d),c.y=j(e);}function o(a,b){if(1===a.nodeType){for(var c=getComputedStyle(a),d=0;d<c.length;d++){var e=c[d];b.style.setProperty(e,c.getPropertyValue(e),c.getPropertyPriority(e));}b.style.pointerEvents=\"none\",b.removeAttribute(\"id\"),b.removeAttribute(\"class\"),b.removeAttribute(\"draggable\");}if(a.hasChildNodes())for(var d=0;d<a.childNodes.length;d++)o(a.childNodes[d],b.childNodes[d]);}function p(a){var b=a.cloneNode(!0);return o(a,b),b.style.position=\"absolute\",b.style.left=\"0px\",b.style.top=\"0px\",b.style.zIndex=\"999999\",b.classList.add(G),b.classList.add(I),b}function q(a){return E.map(function(b){var c=a.style[b+\"transform\"];return c&&\"none\"!==c?c.replace(/translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g,\"\"):\"\"})}function r(a,b,c,d,e){void 0===e&&(e=!0);var f=b.x,g=b.y;d&&(f+=d.x,g+=d.y),e&&(f-=parseInt(a.offsetWidth,10)/2,g-=parseInt(a.offsetHeight,10)/2);for(var h=\"translate3d(\"+f+\"px,\"+g+\"px, 0)\",i=0;i<E.length;i++){var j=E[i]+\"transform\";a.style[j]=h+\" \"+c[i];}}function s(a,b,c,d){var e=getComputedStyle(a);if(\"hidden\"===e.visibility||\"none\"===e.display)return void d();b.classList.add(H);var f=getComputedStyle(b),g=parseFloat(f.transitionDuration);if(isNaN(g)||0===g)return void d();var h=a.getBoundingClientRect(),i={x:h.left,y:h.top};i.x+=document.body.scrollLeft||document.documentElement.scrollLeft,i.y+=document.body.scrollTop||document.documentElement.scrollTop,i.x-=parseInt(e.marginLeft,10),i.y-=parseInt(e.marginTop,10);var j=parseFloat(f.transitionDelay),k=Math.round(1e3*(g+j));r(b,i,c,void 0,!1),setTimeout(d,k);}function t(a,b){return a?a===C[0]?D[0]:0===a.indexOf(C[1])||a===C[7]?D[1]:0===a.indexOf(C[4])?D[3]:a===C[6]?D[2]:D[1]:3===b.nodeType&&\"A\"===b.tagName?D[3]:D[1]}function u(a,b,c,d,e,f,g){if(void 0===f&&(f=!0),void 0===g&&(g=null),A);var k=m(b,c,a,f,document.defaultView,e,g),l=!b.dispatchEvent(k);return d.g=0,l}function v(a,b){if(!a||a===C[7])return b;if(b===D[1]){if(0===a.indexOf(D[1]))return D[1]}else if(b===D[3]){if(0===a.indexOf(D[3])||a.indexOf(\"Link\")>-1)return D[3]}else if(b===D[2]&&(0===a.indexOf(D[2])||a.indexOf(\"Move\")>-1))return D[2];return D[0]}function w(a){var b=a.target,c=function(){g.off(),h.off(),i.off(),e(a);},d=function(){g.off(),h.off(),i.off(),clearTimeout(f);},f=setTimeout(c,B.holdToDrag),g=x(b,\"touchend\",d,this),h=x(b,\"touchcancel\",d,this),i=x(window,\"scroll\",d,this);}function x(a,b,c,d){return d&&(c=c.bind(d)),a.addEventListener(b,c),{off:function(){return a.removeEventListener(b,c)}}}var y,z,A=!1,B={iterationInterval:150},C=[\"none\",\"copy\",\"copyLink\",\"copyMove\",\"link\",\"linkMove\",\"move\",\"all\"],D=[\"none\",\"copy\",\"move\",\"link\"],E=[\"\",\"-webkit-\"],F=\"dnd-poly-\",G=F+\"drag-image\",H=F+\"snapback\",I=F+\"icon\",J=function(){function a(a,b,c,d){this.h=a,this.i=b,this.j=c,this.k=d,this.l=0,this.m=null,this.o=null,this.p=a,this.q=a.changedTouches[0],this.s=this.t.bind(this),this.u=this.v.bind(this),h(\"touchmove\",this.s,!1),h(\"touchend\",this.u,!1),h(\"touchcancel\",this.u,!1);}return a.prototype.A=function(){var a=this;this.l=1,this.B=D[0],this.C={D:{},F:void 0,g:3,G:[]},this.H={x:null,y:null},this.I={x:null,y:null};var b=this.j;if(this.J=new K(this.C,function(c,d,e){b=c,\"number\"!=typeof d&&\"number\"!=typeof e||(a.K={x:d||0,y:e||0});}),this.C.g=2,this.J.dropEffect=D[0],u(\"dragstart\",this.j,this.p,this.C,this.J))return this.l=3,this.L(),!1;if(n(\"page\",this.p,this.I),this.M=p(b),this.N=q(this.M),!this.K)if(this.i.dragImageOffset)this.K={x:this.i.dragImageOffset.x,y:this.i.dragImageOffset.y};else if(this.i.dragImageCenterOnTouch){var c=getComputedStyle(b);this.K={x:0-parseInt(c.marginLeft,10),y:0-parseInt(c.marginTop,10)};}else {var d=b.getBoundingClientRect(),c=getComputedStyle(b);this.K={x:d.left-this.q.clientX-parseInt(c.marginLeft,10)+d.width/2,y:d.top-this.q.clientY-parseInt(c.marginTop,10)+d.height/2};}return r(this.M,this.I,this.N,this.K,this.i.dragImageCenterOnTouch),document.body.appendChild(this.M),this.O=setInterval(function(){a.P||(a.P=!0,a.R(),a.P=!1);},this.i.iterationInterval),!0},a.prototype.L=function(){this.O&&(clearInterval(this.O),this.O=null),i(\"touchmove\",this.s),i(\"touchend\",this.u),i(\"touchcancel\",this.u),this.M&&(this.M.parentNode.removeChild(this.M),this.M=null),this.k(this.i,this.p,this.l);},a.prototype.t=function(a){var b=this;if(l(a,this.q.identifier)!==!1){if(this.p=a,0===this.l){var c=void 0;if(this.i.dragStartConditionOverride)try{c=this.i.dragStartConditionOverride(a);}catch(a){c=!1;}else c=1===a.touches.length;return c?void(this.A()===!0&&(this.h.preventDefault(),a.preventDefault())):void this.L()}if(a.preventDefault(),n(\"client\",a,this.H),n(\"page\",a,this.I),this.i.dragImageTranslateOverride)try{var d=!1;if(this.i.dragImageTranslateOverride(a,{x:this.H.x,y:this.H.y},this.m,function(a,c){b.M&&(d=!0,b.H.x+=a,b.H.y+=c,b.I.x+=a,b.I.y+=c,r(b.M,b.I,b.N,b.K,b.i.dragImageCenterOnTouch));}),d)return}catch(a){}r(this.M,this.I,this.N,this.K,this.i.dragImageCenterOnTouch);}},a.prototype.v=function(a){if(l(a,this.q.identifier)!==!1){if(this.i.dragImageTranslateOverride)try{this.i.dragImageTranslateOverride(void 0,void 0,void 0,function(){});}catch(a){}if(0===this.l)return void this.L();a.preventDefault(),this.l=\"touchcancel\"===a.type?3:2;}},a.prototype.R=function(){var a=this;var e=this.B;this.C.g=3,this.J.dropEffect=D[0];var f=u(\"drag\",this.j,this.p,this.C,this.J);if(f&&(this.B=D[0]),f||2===this.l||3===this.l){var g=this.S(this.l);return g?void s(this.j,this.M,this.N,function(){a.T();}):void this.T()}var h=document.elementFromPoint(this.H.x,this.H.y),i=this.o;h!==this.m&&h!==this.o&&(this.m=h,null!==this.o&&(this.C.g=3,this.J.dropEffect=D[0],u(\"dragexit\",this.o,this.p,this.C,this.J,!1)),null===this.m?this.o=this.m:(this.C.g=3,this.J.dropEffect=t(this.C.F,this.j),u(\"dragenter\",this.m,this.p,this.C,this.J)?(this.o=this.m,this.B=v(this.J.effectAllowed,this.J.dropEffect)):this.m!==document.body&&(this.o=document.body))),i!==this.o&&k(i)&&(this.C.g=3,this.J.dropEffect=D[0],u(\"dragleave\",i,this.p,this.C,this.J,!1,this.o)),k(this.o)&&(this.C.g=3,this.J.dropEffect=t(this.C.F,this.j),u(\"dragover\",this.o,this.p,this.C,this.J)===!1?this.B=D[0]:this.B=v(this.J.effectAllowed,this.J.dropEffect)),e!==this.B&&this.M.classList.remove(F+e);var j=F+this.B;this.M.classList.contains(j)===!1&&this.M.classList.add(j);},a.prototype.S=function(a){var d=this.B===D[0]||null===this.o||3===a;return d?k(this.o)&&(this.C.g=3,this.J.dropEffect=D[0],u(\"dragleave\",this.o,this.p,this.C,this.J,!1)):k(this.o)&&(this.C.g=1,this.J.dropEffect=this.B,u(\"drop\",this.o,this.p,this.C,this.J)===!0?this.B=this.J.dropEffect:this.B=D[0]),d},a.prototype.T=function(){this.C.g=3,this.J.dropEffect=this.B,u(\"dragend\",this.j,this.p,this.C,this.J,!1),this.l=2,this.L();},a}(),K=function(){function a(a,b){this.U=a,this.V=b,this.W=D[0];}return Object.defineProperty(a.prototype,\"types\",{get:function(){if(0!==this.U.g)return Object.freeze(this.U.G)},enumerable:!0,configurable:!0}),a.prototype.setData=function(a,b){if(2===this.U.g){if(a.indexOf(\" \")>-1)throw new Error(\"illegal arg: type contains space\");this.U.D[a]=b,this.U.G.indexOf(a)===-1&&this.U.G.push(a);}},a.prototype.getData=function(a){if(1===this.U.g||2===this.U.g)return this.U.D[a]||\"\"},a.prototype.clearData=function(a){if(2===this.U.g){if(a&&this.U.D[a]){delete this.U.D[a];var b=this.U.G.indexOf(a);return void(b>-1&&this.U.G.splice(b,1))}this.U.D={},this.U.G=[];}},a.prototype.setDragImage=function(a,b,c){2===this.U.g&&this.V(a,b,c);},Object.defineProperty(a.prototype,\"effectAllowed\",{get:function(){return this.U.F},set:function(a){2===this.U.g&&C.indexOf(a)>-1&&(this.U.F=a);},enumerable:!0,configurable:!0}),Object.defineProperty(a.prototype,\"dropEffect\",{get:function(){return this.W},set:function(a){0!==this.U.g&&C.indexOf(a)>-1&&(this.W=a);},enumerable:!0,configurable:!0}),a}();a.polyfill=d,Object.defineProperty(a,\"__esModule\",{value:!0});});\n\t\n} (index_min, index_min.exports));\n\nconst getMouseOffset = (event) => {\n  const targetRect = event.target.getBoundingClientRect();\n  const offset = {\n    x: event.pageX - targetRect.left,\n    y: event.pageY - targetRect.top,\n  };\n\n  return offset;\n};\n\nconst getElementVerticalCenter = (element) => {\n  const rect = element.getBoundingClientRect();\n  return (rect.bottom - rect.top) / 2;\n};\n\nclass KemetSortable extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: flex;\n          gap: 1rem;\n          flex-direction: column;\n        }\n      `,\n    ];\n  }\n\n  firstUpdated() {\n    index_min.exports.polyfill();\n\n    this.addEventListener('dragstart', event => this.handleDragStart(event), false);\n    this.addEventListener('dragenter', (event) => { event.preventDefault(); });\n  }\n\n  render() {\n    return $`<slot></slot>`;\n  }\n\n  handleDragStart(event) {\n    this.sortableItem = event.target;\n\n    this.addEventListener('dragover', dragOverEvent => this.handleDragOver(dragOverEvent), false);\n    this.addEventListener('dragend', dragEndEvent => this.handleDragEnd(dragEndEvent), false);\n\n    setTimeout(() => {\n      this.sortableItem.ghost = true;\n    }, 0);\n  }\n\n  handleDragOver(event) {\n    event.preventDefault();\n\n    const { target } = event;\n\n    if (target && target.tagName === 'KEMET-SORTABLE-ITEM') {\n      const offset = getMouseOffset(event);\n      const middleY = getElementVerticalCenter(event.target);\n\n      if (offset.y > middleY) {\n        this.insertBefore(this.sortableItem, target.nextSibling);\n      } else {\n        this.insertBefore(this.sortableItem, target);\n      }\n    }\n  }\n\n  handleDragEnd(event) {\n    event.preventDefault();\n    this.sortableItem.ghost = false;\n\n    /**\n     * Fires when an item has been moved to a new spot\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-sortable-drag-end', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          event,\n          current: this.sortableItem,\n          all: this.querySelectorAll('kemet-sortable-item'),\n        },\n      }),\n    );\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-sortable') || customElements.define('kemet-sortable', KemetSortable);\n\nclass KemetSVG extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        display: inline-block;\n      }\n\n      svg {\n        width: 100%;\n        height: 100%;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Defines which set of svgs is referenced.\n       */\n      set: {\n        type: String,\n      },\n      /**\n       * The name (id) of the svg to be displayed.\n       */\n      svg: {\n        type: String,\n      },\n      /**\n       * Sets the width and height of a the svg to the given value in pixels.\n       */\n      size: {\n        type: Number,\n      },\n      /**\n       * The value for the preserveAspectRatio attribute of the svg.\n       */\n      ratio: {\n        type: String,\n      },\n      /**\n       * The value for the viewBox attribute of the svg.\n       */\n      viewBox: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.set = 'svgs';\n    this.ratio = 'none';\n    this.viewBox = '0 0 128 128';\n  }\n\n  updated() {\n    this.setSize();\n    this.getIcon();\n  }\n\n  render() {\n    return $`\n      <svg part=\"svg\" viewBox=\"${this.viewBox}\" preserveAspectRatio=\"${this.ratio}\"></svg>\n    `;\n  }\n\n  setSize() {\n    if (this.size) {\n      this.style.width = `${this.size}px`;\n      this.style.height = `${this.size}px`;\n    }\n  }\n\n  getIcon() {\n    let svgElement;\n    const svgs = document.kemetSVGs[this.set];\n\n    svgs.forEach((svg, index) => {\n      const id = svg.getAttribute('id');\n\n      if (id && id === this.svg) {\n        svgElement = svgs[index];\n      }\n    });\n\n    if (svgElement) {\n      this.fillSVG(svgElement);\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`Could not find svg \"${this.svg}\" in set \"${this.set}\".`);\n    }\n  }\n\n  fillSVG(element) {\n    const content = element.cloneNode(true);\n    const svg = this.shadowRoot.querySelector('svg');\n    const g = svg.querySelector('g');\n\n    if (g) g.remove();\n    svg.appendChild(content);\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-svg') || customElements.define('kemet-svg', KemetSVG);\n\nclass KemetSVGs extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        display: none;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Defines the name for the set of svgs.\n       */\n      set: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.set = 'svgs';\n  }\n\n  firstUpdated() {\n    this.slotElement = this.shadowRoot.querySelector('slot');\n    document.kemetSVGs = document.kemetSVGs || {};\n\n    this.populateIcons();\n    this.slotElement.addEventListener('slotchange', this.populateIcons());\n  }\n\n  render() {\n    return $`<slot></slot>`;\n  }\n\n  populateIcons() {\n    const svg = this.slotElement.assignedElements()[0];\n    const svgContents = svg ? svg.querySelectorAll('defs > g') : null;\n\n    if (svgContents) {\n      document.kemetSVGs[this.set] = svgContents;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-svgs') || customElements.define('kemet-svgs', KemetSVGs);\n\nclass KemetTabPanel extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        width: 100%;\n        flex: 0 0 auto;\n      }\n\n      ::slotted(img) {\n        max-width: 100%;\n      }\n\n      :host(.fade) {\n        opacity: 0;\n        pointer-events: none;\n        transition: opacity var(--kemet-tab-panel-fade-speed, 0.5s) ease;\n      }\n\n      :host(.fade[selected]) {\n        opacity: 1;\n        pointer-events: auto;\n      }\n\n      :host(.fade.push) {\n        margin-left: -100%;\n      }\n\n      :host(.vertical) {\n        display: none;\n      }\n\n      :host(.vertical[selected]) {\n        display: block;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Is true when a panel is selected\n       */\n      selected: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Identifies the panel to be linked by a tab\n       */\n      panel: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.selected = false;\n  }\n\n  updated() {\n    this.a11y();\n  }\n\n  render() {\n    return $`\n      <slot></slot>\n    `;\n  }\n\n  a11y() {\n    this.setAttribute('role', 'tabpanel');\n\n    if (this.selected) {\n      this.setAttribute('tabindex', '0');\n    } else {\n      this.setAttribute('tabindex', '-1');\n    }\n  }\n}\n\ncustomElements.define('kemet-tab-panel', KemetTabPanel);\n\nclass KemetTab extends s$1 {\n  static get styles() {\n    return r$3`\n      :host {\n        cursor: pointer;\n        display: inline-flex;\n        flex: 0 0 auto;\n        align-items: center;\n        justify-content: center;\n        white-space: nowrap;\n        padding: var(--kemet-tab-padding, 1rem);\n      }\n\n      :host([selected]) {\n        cursor: auto;\n        color: var(--kemet-tab-color, var(--kemet-color-primary));\n      }\n\n      kemet-icon {\n        cursor: pointer;\n        margin-left: 0.5rem;\n      }\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Is true when the tab is selected\n       */\n      selected: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Links to a panel name\n       */\n      link: {\n        type: String,\n      },\n      /**\n       * Determines if the tab can be closed\n       */\n      closable: {\n        type: Boolean,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // property defaults\n    this.selected = false;\n  }\n\n  firstUpdated() {\n    this.addEventListener('click', this.select.bind(this));\n  }\n\n  updated() {\n    this.a11y();\n  }\n\n  render() {\n    return $`\n      <slot></slot>\n      ${this.makeCloseable()}\n    `;\n  }\n\n  select() {\n    /**\n     * Fires when a tab is selected\n     */\n    this.dispatchEvent(new CustomEvent('kemet-tab-selected', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n\n  a11y() {\n    this.setAttribute('role', 'tab');\n\n    if (this.selected) {\n      this.setAttribute('aria-selected', 'true');\n      this.setAttribute('tabindex', '0');\n    } else {\n      this.setAttribute('aria-selected', 'false');\n      this.setAttribute('tabindex', '-1');\n    }\n  }\n\n  makeCloseable() {\n    if (this.closable) {\n      return $`<kemet-icon icon=\"x-lg\" @click=${() => this.handleClosable()}></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  handleClosable() {\n    /**\n     * Fires when the tab should close\n     */\n    this.dispatchEvent(new CustomEvent('kemet-tab-close', {\n      bubbles: true,\n      composed: true,\n      detail: this,\n    }));\n  }\n}\n\ncustomElements.define('kemet-tab', KemetTab);\n\nconst stylesKemetTabs = r$3`\n  :host {\n    --kemet-tabs-ink-size: 6px;\n    --kemet-tabs-ink-radius: 6px;\n    --kemet-tabs-divider-size: 1px;\n    --kemet-tabs-spacer: 1rem;\n\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    position: relative;\n  }\n\n  :host([placement='bottom']) {\n    flex-direction: column-reverse;\n  }\n\n  :host([placement='left']) {\n    flex-direction: row;\n  }\n\n  :host([placement='right']) {\n    flex-direction: row-reverse;\n  }\n\n  :host([placement='left']),\n  :host([placement='right']) {\n    overflow: unset;\n  }\n\n  /* panels */\n\n  [part='panels'] > div {\n    display: flex;\n  }\n\n  :host([panel-effect='slide']) [part='panels'] {\n    transition: transform var(--kemet-tabs-transition-speed, 0.5s) linear;\n  }\n\n  :host([panel-effect='fade']) [part='panels'] {\n    transform: none !important;\n  }\n\n  :host([panel-effect='fade']) [part='panels'] > div {\n    flex-flow: row nowrap;\n  }\n\n  :host([placement='left']) [part='panels'],\n  :host([placement='right']) [part='panels'] {\n    transform: none !important;\n    position: relative;\n    width: 100%;\n  }\n\n  :host([placement='top']) [part='panels'] > div {\n    margin-top: var(--kemet-tabs-spacer);\n  }\n\n  :host([placement='right']) [part='panels'] > div {\n    margin-right: var(--kemet-tabs-spacer);\n  }\n\n  :host([placement='bottom']) [part='panels'] > div {\n    margin-bottom: var(--kemet-tabs-spacer);\n  }\n\n  :host([placement='left']) [part='panels'] > div {\n    margin-left: var(--kemet-tabs-spacer);\n  }\n\n  /* tablist */\n\n  [part='tablist'] {\n    display: flex;\n  }\n\n  :host([placement='left']) [part='tablist'],\n  :host([placement='right']) [part='tablist'] {\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n  }\n\n  :host([tabs-align='center']) [part='tablist'] {\n    justify-content: center;\n  }\n\n  :host([tabs-align='between']) [part='tablist'] {\n    justify-content: space-between;\n  }\n\n  :host([tabs-align='evenly']) [part='tablist'] {\n    justify-content: space-evenly;\n  }\n\n  :host([tabs-align='around']) [part='tablist'] {\n    justify-content: space-around\n  }\n\n  :host([tabs-align='start']) [part='tablist'] {\n    justify-content: flex-start;\n  }\n\n  :host([tabs-align='end']) [part='tablist'] {\n    justify-content: flex-end;\n  }\n\n  :host([overflow]) [part='tablist'] {\n    justify-content: start;\n  }\n\n  /* divider */\n\n  [part='divider'] {\n    height: var(--kemet-tabs-divider-size);\n    background-color: var(--kemet-tabs-divider-color, var(--kemet-color-gray4));\n  }\n\n  :host([placement='left']) [part='divider'],\n  :host([placement='right']) [part='divider'] {\n    width: var(--kemet-tabs-divider-size);\n    height: auto;\n  }\n\n  /* ink */\n\n  [part='ink'] {\n    height: var(--kemet-tabs-ink-size);\n    border-top-left-radius: var(--kemet-tabs-ink-radius);\n    border-top-right-radius: var(--kemet-tabs-ink-radius);\n    transition: all 300ms ease;\n    background-color: var(--kemet-tabs-ink-color, var(--kemet-color-primary));\n  }\n\n  :host([placement='right']) [part='ink'] {\n    width: var(--kemet-tabs-ink-size);\n    border-top-right-radius: var(--kemet-tabs-ink-radius);\n    border-bottom-right-radius: var(--kemet-tabs-ink-radius);\n    border-top-left-radius: 0px;\n    border-bottom-left-radius: 0px;\n  }\n\n  :host([placement='left']) [part='ink'] {\n    width: var(--kemet-tabs-ink-size);\n    border-top-right-radius: 0px;\n    border-bottom-right-radius: 0px;\n    border-top-left-radius: var(--kemet-tabs-ink-radius);\n    border-bottom-left-radius: var(--kemet-tabs-ink-radius);\n  }\n\n  :host([placement='bottom']) [part='ink'] {\n    border-top-right-radius: 0px;\n    border-bottom-right-radius: var(--kemet-tabs-ink-radius);\n    border-top-left-radius: 0px;\n    border-bottom-left-radius: var(--kemet-tabs-ink-radius);\n  }\n\n  /* links */\n\n  :host([overflow]) [part='links'] {\n    overflow-x: auto;\n    margin: 0 2rem;\n    scroll-behavior: smooth;\n  }\n\n  :host([overflow]) [part='links']::-webkit-scrollbar {\n    display: none;\n    width: 0;\n    background: transparent;\n  }\n\n  :host([placement='bottom']) [part='links'] {\n    display: flex;\n    flex-direction: column-reverse;\n  }\n\n  /* icon */\n\n  [icon*='chevron'] {\n    cursor: pointer;\n    position: absolute;\n    top: 1rem;\n  }\n\n  [icon='chevron-left'] {\n    left: 0;\n  }\n\n  [icon='chevron-right'] {\n    right: 0;\n  }\n\n  :host([placement='bottom']) [icon*='chevron'] {\n    top: auto;\n    bottom: 1rem;\n  }\n`;\n\n/* eslint-disable no-lonely-if */\n\nclass KemetTabs extends s$1 {\n  static get styles() {\n    return [stylesKemetTabs];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The selected tab by name\n       */\n      selected: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * The selected tab by index\n       */\n      selectedIndex: {\n        type: Number,\n      },\n      /**\n       * Positions the current panel\n       */\n      panelPosition: {\n        type: Number,\n      },\n      /**\n       * The transition effect for panels\n       */\n      panelEffect: {\n        type: String,\n        reflect: true,\n        attribute: 'panel-effect',\n      },\n      /**\n       * Determines whether or not to enable swipe behavior\n       */\n      swipe: {\n        type: Boolean,\n      },\n      /**\n       * Places the tabs to the top, right, bottom, or left\n       */\n      placement: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * Determines whether or not to show a divider line\n       */\n      divider: {\n        type: Boolean,\n      },\n      /**\n       * Spacing alignment of the tabs\n       */\n      tabsAlign: {\n        type: String,\n        reflect: true,\n        attribute: 'tabs-align',\n      },\n      /**\n       * An object that contains information about the ink\n       */\n      ink: {\n        type: Object,\n      },\n      /**\n       * Determines whether or not to hide the ink\n       */\n      hideInk: {\n        type: Boolean,\n        attribute: 'hide-ink',\n      },\n      /**\n       * Is true when the space of the tabs is larger than it's container\n       */\n      overflow: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.selectedIndex = 0;\n    this.panelPosition = 0;\n    this.panelEffect = 'none';\n    this.placement = 'top';\n    this.tabsAlign = 'center';\n    this.hideInk = false;\n\n    this.addEventListener('kemet-tab-selected', this.tabSelectedChange.bind(this));\n    this.addEventListener('kemet-tab-close', this.handleTabClose.bind(this));\n    window.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  firstUpdated() {\n    // standard properties\n    this.tabs = [];\n    this.panels = [];\n    this.xDown = null;\n    this.yDown = null;\n\n    this.links = this.shadowRoot.getElementById('links');\n  }\n\n  render() {\n    return $`\n      ${this.makeLeftArrow()}\n      ${this.makeRightArrow()}\n      <div id=\"links\" part=\"links\">\n        <div part='tablist' role=\"tablist\">\n          <slot name=\"tab\" @slotchange=${() => this.handleLinksSlotChange()}></slot>\n        </div>\n        ${this.makeInk('links')}\n      </div>\n      ${this.makeInk('host')}\n      ${this.makeDivider()}\n      <section id=\"panels\" part=\"panels\" style=\"transform:translateX(${this.panelPosition}px);\">\n        <div>\n          <slot name=\"panel\" @slotchange=${() => this.handlePanelsSlotChange()}></slot>\n        </div>\n      </section>\n    `;\n  }\n\n  updated() {\n    this.determineFade();\n  }\n\n  handleLinksSlotChange() {\n    const tabs = this.querySelectorAll('kemet-tab');\n    let index = 0;\n\n    tabs.forEach((tab) => {\n      // give each tab an index to select by if link/panel is not used\n      tab.index = index;\n      index += 1;\n\n      // store the list of tabs\n      this.tabs = this.tabs.concat(tab);\n\n      // add keyboard support\n      tab.addEventListener('keydown', event => this.handleTabKeydown(event));\n    });\n\n    // default to the first tab/panel selected\n    if (this.tabs.length > 0) this.tabs[0].selected = true;\n\n    setTimeout(() => {\n      this.selectTab();\n    }, 1);\n    this.determineOverflow();\n  }\n\n  handlePanelsSlotChange() {\n    const panels = this.querySelectorAll('kemet-tab-panel');\n    const panelElement = this.shadowRoot.getElementById('panels');\n    let index = 0;\n\n    panels.forEach((panel) => {\n      // give each panel an index to select by if link/panel is not used\n      panel.index = index;\n      index += 1;\n\n      // store the list of panels\n      this.panels = this.panels.concat(panel);\n    });\n\n    // default to the first tab/panel selected\n    if (this.panels.length > 0) this.panels[0].selected = true;\n\n    // add swipe support\n    if (this.swipe) {\n      panelElement.addEventListener('touchstart', event => this.handleTouchStart(event), false);\n      panelElement.addEventListener('touchmove', event => this.handleTouchMove(event), false);\n    }\n\n    this.selectPanel();\n  }\n\n  handleLeftArrow() {\n    const selectedElement = this.tabs.find(tab => tab.selected) || this.tabs[0];\n    const previousElement = selectedElement.previousElementSibling;\n    const selectedIndex = this.tabs.findIndex(tab => tab.selected);\n\n    if (this.selected) {\n      this.selected = previousElement ? previousElement.link : selectedElement.link;\n    } else {\n      this.selectedIndex = selectedIndex > 0 ? selectedIndex - 1 : 0;\n    }\n\n    if (previousElement) {\n      this.links.scrollLeft = previousElement.offsetLeft - 20;\n    }\n\n    this.selectTab();\n    this.selectPanel();\n  }\n\n  handleRightArrow() {\n    const selectedElement = this.tabs.find(tab => tab.selected) || this.tabs[this.tabs.length - 1];\n    const nextElement = selectedElement.nextElementSibling;\n    const selectedIndex = this.tabs.findIndex(tab => tab.selected);\n\n    if (this.selected) {\n      this.selected = nextElement ? nextElement.link : selectedElement.link;\n    } else {\n      this.selectedIndex = selectedIndex < this.tabs.length - 1\n        ? selectedIndex + 1\n        : this.tabs.length - 1;\n    }\n\n    if (nextElement) {\n      this.links.scrollLeft = nextElement.offsetLeft - 20;\n    }\n\n    this.selectTab();\n    this.selectPanel();\n  }\n\n  handleTabClose(event) {\n    const tab = event.detail;\n    const panel = this.panels[tab.index];\n\n    this.selected = this.tabs[0].link;\n    this.selectedIndex = 0;\n\n    panel.remove();\n    tab.remove();\n  }\n\n  makeInk(location) {\n    if (this.hideInk) {\n      return null;\n    }\n\n    if ((this.placement === 'top' || this.placement === 'bottom') && this.ink && location === 'links') {\n      return $`<div part=\"ink\" style=\"width:${this.ink.width}; transform:translateX(${this.ink.positionX})\"></div>`;\n    }\n\n    if ((this.placement === 'left' || this.placement === 'right') && this.ink && location === 'host') {\n      return $`<div part=\"ink\" style=\"height:${this.ink.height}; transform:translateY(${this.ink.positionY})\"></div>`;\n    }\n\n    return null;\n  }\n\n  makeDivider() {\n    if (this.divider) {\n      return $`<div part=\"divider\"></div>`;\n    }\n\n    return null;\n  }\n\n  makeLeftArrow() {\n    if (this.overflow) {\n      return $`<kemet-icon icon='chevron-left' size=\"20\" @click=${() => this.handleLeftArrow()}></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  makeRightArrow() {\n    if (this.overflow) {\n      return $`<kemet-icon icon='chevron-right' size=\"20\" @click=${() => this.handleRightArrow()}></kemet-icon>`;\n    }\n\n    return null;\n  }\n\n  selectTab() {\n    const marginLeft = this.links ? parseInt(window.getComputedStyle(this.links).marginLeft.replace('px', ''), 10) : 0;\n    const overflowOffset = this.overflow ? marginLeft : 0;\n\n    // if the user uses the selected attribute select by it\n    if (this.selected) {\n      this.tabs.forEach((tab) => {\n        const tabName = tab.getAttribute('link');\n\n        if (tabName === this.selected) {\n          tab.selected = true;\n          this.selected = tabName;\n\n          this.ink = {\n            width: `${tab.offsetWidth}px`,\n            height: `${tab.offsetHeight}px`,\n            positionX: `${tab.offsetLeft - overflowOffset}px`,\n            positionY: `${tab.offsetTop}px`,\n          };\n\n          this.links.scrollLeft = tab.offsetLeft - overflowOffset;\n        } else {\n          tab.selected = false;\n        }\n      });\n\n      // otherwise select by index\n    } else {\n      this.tabs.forEach((tab) => {\n        if (this.selectedIndex === tab.index) {\n          tab.selected = true;\n\n          this.ink = {\n            width: `${tab.offsetWidth}px`,\n            height: `${tab.offsetHeight}px`,\n            positionX: `${tab.offsetLeft - overflowOffset}px`,\n            positionY: `${tab.offsetTop}px`,\n          };\n\n          this.links.scrollLeft = tab.offsetLeft - overflowOffset;\n        } else {\n          tab.selected = false;\n        }\n      });\n    }\n  }\n\n  selectPanel() {\n    // if the user uses the selected attribute select by it\n    if (this.selected) {\n      this.panels.forEach((panel) => {\n        const panelName = panel.getAttribute('panel');\n\n        if (this.panelEffect === 'fade' && panel.index !== 0) {\n          panel.classList.add('push');\n        }\n\n        if (this.placement === 'left' || this.placement === 'right') {\n          panel.classList.add('vertical');\n        }\n\n        if (panelName === this.selected) {\n          panel.selected = true;\n          this.animatePanel(panelName, null);\n        } else {\n          panel.selected = false;\n        }\n      });\n\n      // otherwise select by index\n    } else {\n      this.panels.forEach((panel) => {\n        if (this.panelEffect === 'fade' && panel.index !== 0) {\n          panel.classList.add('push');\n        }\n\n        if (this.placement === 'left' || this.placement === 'right') {\n          panel.classList.add('vertical');\n        }\n\n        if (this.selectedIndex === panel.index) {\n          panel.selected = true;\n          this.animatePanel(null, panel.index);\n        } else {\n          panel.selected = false;\n        }\n      });\n    }\n  }\n\n  dispatchTabChange() {\n    const tabChanged = new CustomEvent('kemet-tab-changed', {\n      bubbles: true,\n      composed: true,\n      detail: this.selected,\n    });\n\n    this.dispatchEvent(tabChanged);\n  }\n\n  tabSelectedChange(event) {\n    if (this.selected) {\n      // if selected has been set, use the string attribute\n      this.selected = event.detail.getAttribute('link');\n    } else {\n      // otherwise use the generated index\n      this.selectedIndex = event.detail.index;\n    }\n\n    this.selectTab();\n    this.selectPanel();\n    this.dispatchTabChange();\n  }\n\n  determineFade() {\n    this.panels.forEach((panel) => {\n      // add fade class if panel effect is fade\n      if (this.panelEffect === 'fade') panel.classList.add('fade');\n    });\n  }\n\n  determineOverflow() {\n    const tabsContainerWidth = this.offsetWidth;\n    const tabElements = this.querySelectorAll('kemet-tab');\n\n    let totalTabsWidth = 0;\n\n    tabElements.forEach((tab) => {\n      totalTabsWidth += tab.offsetWidth;\n    });\n\n    if (totalTabsWidth > tabsContainerWidth && (this.placement === 'top' || this.placement === 'bottom')) {\n      this.overflow = true;\n    } else {\n      this.overflow = false;\n    }\n  }\n\n  handleResize() {\n    if (this.tabs && this.panels) {\n      const marginLeft = this.links ? parseInt(window.getComputedStyle(this.links).marginLeft.replace('px', ''), 10) : 0;\n      const overflowOffset = this.overflow ? marginLeft : 0;\n      const selectedElement = this.tabs.find(tab => tab.selected);\n\n      if (selectedElement) {\n        this.ink = {\n          width: `${selectedElement.offsetWidth}px`,\n          height: `${selectedElement.offsetHeight}px`,\n          positionX: `${selectedElement.offsetLeft - overflowOffset}px`,\n          positionY: `${selectedElement.offsetTop}px`,\n        };\n      }\n\n      this.determineOverflow();\n\n      if (this.selected) {\n        this.animatePanel(this.selected, null);\n      } else {\n        this.animatePanel(null, this.selectedIndex);\n      }\n    }\n  }\n\n  animatePanel(panelName, panelIndex) {\n    if (panelName) {\n      const selectedPanel = this.querySelector(`[panel=\"${panelName}\"]`);\n      if (selectedPanel) this.panelPosition = selectedPanel.offsetLeft * -1;\n    } else {\n      if (this.panels[panelIndex]) this.panelPosition = this.panels[panelIndex].offsetLeft * -1;\n    }\n  }\n\n  handleTabKeydown(event) {\n    if (this.selected) {\n      switch (event.key) {\n        case 'Home':\n          this.selected = this.tabs[0].getAttribute('link');\n          break;\n        case 'End':\n          this.selected = this.tabs[this.tabs.length - 1].getAttribute('link');\n          break;\n        case 'ArrowRight':\n          const nextLinkElement = this.querySelector('kemet-tab[selected]').nextElementSibling;\n          const nextLink = nextLinkElement ? nextLinkElement.getAttribute('link') : false;\n\n          if (nextLink) {\n            this.selected = nextLink;\n          }\n          break;\n        case 'ArrowLeft':\n          const previousLinkElement = this.querySelector('kemet-tab[selected]').previousElementSibling;\n          const previousLink = previousLinkElement ? previousLinkElement.getAttribute('link') : false;\n\n          if (previousLink) {\n            this.selected = previousLink;\n          }\n          break;\n      }\n\n      this.tabs.find(tab => tab.link === this.selected).focus();\n    } else {\n      switch (event.key) {\n        case 'Home':\n          this.selectedIndex = 0;\n          break;\n        case 'End':\n          this.selectedIndex = this.tabs.length - 1;\n          break;\n        case 'ArrowRight':\n          if (this.selectedIndex < this.tabs.length - 1) {\n            this.selectedIndex += 1;\n          } else {\n            this.selectedIndex = this.tabs.length - 1;\n          }\n          break;\n        case 'ArrowLeft':\n          if (this.selectedIndex < 1) {\n            this.selectedIndex = 0;\n          } else {\n            this.selectedIndex -= 1;\n          }\n          break;\n      }\n\n      this.tabs[this.selectedIndex].focus();\n    }\n  }\n\n  handleTouchStart(event) {\n    this.xDown = event.touches[0].clientX;\n    this.yDown = event.touches[0].clientY;\n  }\n\n  handleTouchMove(event) {\n    if (!this.xDown || !this.yDown) {\n      return;\n    }\n\n    const xUp = event.touches[0].clientX;\n    const yUp = event.touches[0].clientY;\n    const xDiff = this.xDown - xUp;\n    const yDiff = this.yDown - yUp;\n    const nextElement = this.querySelector('kemet-tab-panel[selected]').nextElementSibling;\n    const next = nextElement ? nextElement.getAttribute('panel') : false;\n    const previousElement = this.querySelector('kemet-tab-panel[selected]').previousElementSibling;\n    const previous = previousElement ? previousElement.getAttribute('panel') : false;\n\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      if (xDiff > 0) {\n        if (this.selected) {\n          if (next) this.selected = next;\n        } else {\n          if (this.selectedIndex < this.tabs.length) this.selectedIndex += 1;\n        }\n      } else {\n        if (this.selected) {\n          if (previous) this.selected = previous;\n        } else {\n          if (this.selectedIndex > 0) this.selectedIndex -= 1;\n        }\n      }\n\n      this.selectTab();\n      this.selectPanel();\n    }\n\n    this.xDown = null;\n    this.yDown = null;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-tabs') || customElements.define('kemet-tabs', KemetTabs);\n\nclass KemetTextarea extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          position: relative;\n          display: block;\n        }\n\n        textarea {\n          display: block;\n          width: 100%;\n          padding: var(--kemet-textarea-padding, 1rem);\n          border: var(--kemet-textarea-border, 1px solid var(--kemet-color-primary));\n          appearance: none;\n          box-sizing: border-box;\n        }\n\n        :host([status='error']) textarea {\n          border: var(--kemet-textarea-border-color-error, 1px solid var(--kemet-color-error));\n        }\n\n        :host([status='success']) textarea {\n          border: var(--kemet-textarea-border-color-success, 1px solid var(--kemet-color-success));\n        }\n\n        :host([status='warning']) textarea {\n          border: var(--kemet-textarea-border-color-warning, 1px solid var(--kemet-color-warning));\n        }\n\n        :host([disabled]) textarea {\n          opacity: 0.5;\n        }\n\n        :host([icon-left]) textarea {\n          padding-left: var(--kemet-textarea-icon-left-padding, 3rem);\n        }\n\n        :host([icon-right]) textarea {\n          padding-right: var(--kemet-textarea-icon-right-padding, 3rem);\n        }\n\n        :host([rounded]) textarea {\n          border-radius: var(--kemet-textarea-border-radius-rounded, var(--kemet-border-radius));\n        }\n\n        :host([filled]) textarea {\n          border: var(--kemet-textarea-border-filled, none);\n          color: var(--kemet-textarea-color-filled, var(--kemet-color-white));\n          background-color: var(--kemet-textarea-background-color-filled, var(--kemet-color-primary));\n        }\n\n        :host([filled]) textarea::placeholder {\n          color: var(--kemet-textarea-color-filled, var(--kemet-color-white));\n        }\n\n        :host([status='error'][filled]) textarea {\n          background-color: var(--kemet-textarea-background-color-error, var(--kemet-color-error));\n        }\n\n        :host([status='success'][filled]) textarea {\n          background-color: var(--kemet-textarea-background-color-success, var(--kemet-color-success));\n        }\n\n        :host([status='warning'][filled]) textarea {\n          background-color: var(--kemet-textarea-background-color-warning, var(--kemet-color-warning));\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Used for the id of the input\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * The name of the input\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The placeholder attribute\n       */\n      placeholder: {\n        type: String,\n      },\n      /**\n       * The minlength attribute\n       */\n      minlength: {\n        type: String,\n      },\n      /**\n       * The maxlength attribute\n       */\n      maxlength: {\n        type: String,\n      },\n      /**\n       * The input mode attribute\n       */\n      inputmode: {\n        type: String,\n      },\n      /**\n       * The autofocus attribute\n       */\n      autofocus: {\n        type: Boolean,\n      },\n      /**\n       * The disable attribute\n       */\n      disabled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The readonly attribute\n       */\n      readonly: {\n        type: Boolean,\n      },\n      /**\n       * The required attribute\n       */\n      required: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The input's value\n       */\n      value: {\n        type: String,\n      },\n      /**\n       * States whether or not the input is invalid\n       */\n      invalid: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * The status of the input\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * The rows of the textarea\n       */\n      rows: {\n        type: Number,\n      },\n      /**\n       * Activates validation on blur\n       */\n      validateOnBlur: {\n        type: Boolean,\n        attribute: 'validate-on-blur',\n      },\n      /**\n       * Displays a filled textarea\n       */\n      filled: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Displays a rounded corners\n       */\n      rounded: {\n        type: Boolean,\n        reflect: true,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    // managed properties\n    this.slug = 'textarea';\n    this.name = 'textarea';\n    this.value = '';\n    this.status = 'standard';\n    this.rows = 4;\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  firstUpdated() {\n    // elements\n    this.form = this.closest('form');\n    this.control = this.closest('kemet-field');\n    this.textarea = this.shadowRoot.querySelector('textarea');\n  }\n\n  render() {\n    return $`\n      <textarea\n        part=\"textarea\"\n        id=${this.slug}\n        name=${this.name}\n        .value=${l(this.value)}\n        ?disabled=${this.disabled}\n        ?readonly=${this.readonly}\n        ?required=${this.required}\n        placeholder=${l$1(this.placeholder)}\n        rows=${l$1(this.rows)}\n        minlength=${l$1(this.minlength)}\n        maxlength=${l$1(this.maxlength)}\n        autocorrect=${l$1(this.autocorrect)}\n        ?autofocus=${this.autofocus}\n        spellcheck=${l$1(this.spellcheck)}\n        inputmode=${l$1(this.inputmode)}\n        @change=${this.handleChange}\n        @input=${this.handleInput}\n        @focus=${this.handleFocus}\n        @blur=${this.handleBlur}\n        @invalid=${this.handleInvalid}\n      ></textarea>\n    `;\n  }\n\n  /**\n   * Handles when the textarea receives focus\n   * @private\n   */\n  handleFocus() {\n    this.hasFocus = true;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the textarea loses focus\n   * @private\n   */\n  handleBlur() {\n    this.hasFocus = false;\n\n    /**\n     * Fires when the input receives and loses focus\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-focused', {\n        bubbles: true,\n        composed: true,\n        detail: false,\n      }),\n    );\n\n    if (this.validateOnBlur && this.form && !this.form.noValidate) {\n      this.textarea.checkValidity();\n      this.validity = this.textarea.validity;\n    }\n  }\n\n  /**\n   * Handles when the textarea changes value\n   * @private\n   */\n  handleChange() {\n    this.value = this.textarea.value;\n\n    if (this.textarea.checkValidity() && this.checkLimitValidity()) {\n      this.invalid = false;\n      this.status = 'standard';\n      this.validity = this.textarea.validity;\n\n      /**\n       * Fires when there's a change in status\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'standard',\n            validity: this.textarea.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Handles when the textarea receives input\n   * @private\n   */\n  handleInput() {\n    this.value = this.textarea.value;\n\n    /**\n     * Fires when the input receives input\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-input-input', {\n        bubbles: true,\n        composed: true,\n        detail: this.value,\n      }),\n    );\n  }\n\n  /**\n   * Handles when the textarea has an error\n   * @private\n   */\n  handleInvalid() {\n    this.validity = this.textarea.validity;\n\n    if (this.validateOnBlur) {\n      this.invalid = true;\n      this.status = 'error';\n\n      /**\n       * Fires when there's a change in status\n       */\n      this.dispatchEvent(\n        new CustomEvent('kemet-input-status', {\n          bubbles: true,\n          composed: true,\n          detail: {\n            status: 'error',\n            validity: this.textarea.validity,\n            element: this,\n          },\n        }),\n      );\n    }\n  }\n\n  /**\n   * Checks the validity of the character limit for the count component\n   * @private\n   * @returns {boolean}\n   */\n  checkLimitValidity() {\n    if (this.control) {\n      const count = this.control.querySelector('kemet-count');\n      if (count) {\n        return this.value.length < count.limit;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks the validity of the standard input\n   * @public\n   * @returns {boolean}\n   */\n  checkValidity() {\n    return this.textarea.checkValidity();\n  }\n\n  /**\n   * Focuses the standard input\n   * @public\n   */\n  focus() {\n    return this.textarea.focus();\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-textarea') || customElements.define('kemet-textarea', KemetTextarea);\n\nclass KemetToggle extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          --kemet-toggle-width: 3.5rem;\n          --kemet-toggle-height: 2rem;\n          --kemet-toggle-handle-diameter: 1.6rem;\n          --kemet-toggle-handle-margin: calc((var(--kemet-toggle-height) - var(--kemet-toggle-handle-diameter)) / 2);\n\n          display: flex;\n          align-items: center;\n        }\n\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n\n        label {\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          gap: 1rem;\n          font-size: inherit;\n          color: inherit;\n        }\n\n        :host([disabled]) label {\n          cursor: not-allowed;\n        }\n\n        input {\n          display: none;\n        }\n\n        [part='control'] {\n          position: relative;\n          display: inline-flex;\n          margin: 0;\n          width: var(--kemet-toggle-width);\n          height: var(--kemet-toggle-height);\n        }\n\n        [part='control'] > span {\n          transition: 300ms ease-in-out;\n        }\n\n        [part='track'] {\n          width: var(--kemet-toggle-width);\n          height: var(--kemet-toggle-height);\n          border: var(--kemet-toggle-track-border, none);\n          border-radius: var(--kemet-toggle-height);\n          background-color: var(--kemet-toggle-track-color, var(--kemet-color-white));\n          box-shadow: var(--kemet-toggle-track-shadow, inset 0 0.4rem 0.7rem 0 rgba(47, 47, 47, 0.35), inset 0 -0.2rem 0.4rem 0 var(--kemet-color-gray1));\n        }\n\n        :host([squared]) [part='track'] {\n          border-radius: 0;\n        }\n\n        [part='handle'] {\n          position: absolute;\n          top: var(--kemet-toggle-handle-margin);\n          left: var(--kemet-toggle-handle-margin);\n          width: var(--kemet-toggle-handle-diameter);\n          height: var(--kemet-toggle-handle-diameter);\n          transform: translateX(0);\n          border: var(--kemet-toggle-handle-border, none);\n          border-radius: var(--kemet-toggle-handle-diameter);\n          background-color: var(--kemet-toggle-handle-color, var(--kemet-color-primary));\n          box-shadow: var(--kemet-toggle-handle-shadow, 0 0.5rem 0.5rem 0 rgba(0, 0, 0, 0.1), 0 0.5rem 0.5rem 0 rgba(0, 0, 0, 0.2));\n        }\n\n        :host([squared]) [part='handle'] {\n          border-radius: 0;\n        }\n\n        :host([checked]) [part='handle'] {\n          transform: translateX(calc(var(--kemet-toggle-width) - var(--kemet-toggle-handle-diameter) - var(--kemet-toggle-handle-margin) * 2));\n        }\n\n        .option {\n          font-size: 90%;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name on the input field\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * Determines whether or not the toggle is checked\n       */\n      checked: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines whether or not the toggle is disabled\n       */\n      disabled: {\n        type: Boolean,\n      },\n      /**\n       * A description of the toggle's purpose\n       */\n      label: {\n        type: String,\n      },\n      /**\n       * Determines whether or not to show text options\n       */\n      show: {\n        type: Boolean,\n      },\n      /**\n       * Displays the toggle as squared instead of rounded\n       */\n      squared: {\n        type: Boolean,\n      },\n      /**\n       * The checked option text\n       */\n      optionChecked: {\n        type: String,\n        attribute: 'option-checked',\n      },\n      /**\n       * The unchecked option text\n       */\n      optionUnchecked: {\n        type: String,\n        attribute: 'option-unchecked',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.name = 'toggle-switch';\n    this.disabled = false;\n    this.checked = false;\n    this.show = false;\n    this.squared = false;\n    this.label = '';\n    this.optionChecked = 'on';\n    this.optionUnchecked = 'off';\n    this.value = this.checked ? this.optionChecked : this.optionUnchecked;\n\n    /**\n     * Used only for form reactive controller\n     */\n    this.formSubmitController = new FormSubmitController(this);\n  }\n\n  render() {\n    return $`\n      <label part=\"label\">\n        ${this.makeUncheckedOption()}\n        <span part=\"control\">\n          <span part=\"track\"></span>\n          <span part=\"handle\"></span>\n        </span>\n        <input\n          role=\"switch\"\n          type=\"checkbox\"\n          name=\"${this.name}\"\n          aria-label=\"${this.label}\"\n          aria-checked=${this.checked ? 'true' : 'false'}\n          ?disabled=${this.disabled}\n          ?checked=${this.checked}\n          @change=${this.handleChange}\n        />\n        ${this.makeCheckedOption()}\n        <span part=\"text\">${this.label}</span>\n      </label>\n    `;\n  }\n\n  handleChange() {\n    this.checked = !this.checked;\n    this.value = this.checked ? this.optionChecked : this.optionUnchecked;\n\n    /**\n     * Fires when the toggle changes state\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-toggle-change', {\n        bubbles: true,\n        composed: true,\n        detail: true,\n      }),\n    );\n  }\n\n  makeUncheckedOption() {\n    if (this.show) {\n      return $`<span class=\"option\" part=\"unchecked\">${this.optionUnchecked}</span>`;\n    }\n\n    return null;\n  }\n\n  makeCheckedOption() {\n    if (this.show) {\n      return $`<span class=\"option\" part=\"checked\">${this.optionChecked}</span>`;\n    }\n\n    return null;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-toggle') || customElements.define('kemet-toggle', KemetToggle);\n\nclass KemetTrackerStep extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          --kemet-tracker-step-dot-size: 50px;\n          --kemet-tracker-step-dot-size-mobile: 25px;\n          --kemet-tracker-step-dot-gap: 4px;\n          --kemet-tracker-step-standard-line-weight: 1px;\n          --kemet-tracker-step-completed-line-weight: 3px;\n          --kemet-tracker-step-dot-transition: all 300ms ease-in-out;\n\n          position: relative;\n          width: 100%;\n          text-align: center;\n        }\n\n        .dot {\n          font-size: var(--kemet-tracker-step-dot-font-size, 90%);\n          color: var(--kemet-tracker-step-dot-color, var(--kemet-color-primary));\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin: 0 auto;\n          position: relative;\n          z-index: 1;\n          width: var(--kemet-tracker-step-dot-size);\n          height: var(--kemet-tracker-step-dot-size);\n          border-radius: 100%;\n          transition: var(--kemet-tracker-step-dot-transition);\n          background-color: var(--kemet-tracker-step-dot-background-color, var(--kemet-color-white));\n        }\n\n        .dot::after {\n          content: \"\";\n          width: unset;\n          height: unset;\n          position: absolute;\n          top: var(--kemet-tracker-step-dot-gap);\n          left: var(--kemet-tracker-step-dot-gap);\n          right: var(--kemet-tracker-step-dot-gap);\n          bottom: var(--kemet-tracker-step-dot-gap);\n          z-index: -1;\n          border-radius: 100%;\n          transition: var(--kemet-tracker-step-dot-transition);\n          border: var(--kemet-tracker-step-dot-border, 1px solid var(--kemet-color-primary));\n          background-color: var(--kemet-tracker-step-dot-fill-color, transparent);\n        }\n\n        :host([completed]) .dot {\n          color: var(--kemet-tracker-step-completed-color, var(--kemet-color-white));\n        }\n\n        :host([completed]) .dot::after {\n          border: 0;\n          background-color: var(--kemet-tracker-step-completed-fill-color, var(--kemet-color-success));\n        }\n\n        :host([current]) .dot.animate {\n          color: var(--kemet-tracker-step-current-color, var(--kemet-color-white));\n        }\n\n        :host([current]) .dot.animate::after {\n          border: 0;\n          background-color: var(--kemet-tracker-step-current-fill-color, var(--kemet-color-primary));\n        }\n\n        :host([mobile]) .dot {\n          width: var(--kemet-tracker-step-dot-size-mobile);\n          height: var(--kemet-tracker-step-dot-size-mobile);\n        }\n\n        .line {\n          display: block;\n          position: absolute;\n          left: 50%;\n          right: 0;\n          bottom: 0;\n          width: 100%;\n\n          /* standard */\n          top: calc((var(--kemet-tracker-step-dot-size) - var(--kemet-tracker-step-standard-line-weight)) / 2);\n          height: var(--kemet-tracker-step-standard-line-weight);\n          background-color: var(--kemet-tracker-step-line-color, var(--kemet-color-primary));\n        }\n\n        .line.completed {\n          width: 100%;\n          transform: scaleX(0);\n          transform-origin: left center;\n          top: calc((var(--kemet-tracker-step-dot-size) - var(--kemet-tracker-step-completed-line-weight)) / 2);\n          height: var(--kemet-tracker-step-completed-line-weight);\n          background-color: var(--kemet-tracker-step-completed-line-color, var(--kemet-color-primary));\n          animation-name: grow;\n          animation-delay: 1s;\n          animation-duration: 600ms;\n          animation-fill-mode: forwards;\n        }\n\n        :host([mobile]) .line {\n          top: calc((var(--kemet-tracker-step-dot-size-mobile) - var(--kemet-tracker-step-standard-line-weight)) / 2);\n        }\n\n        :host([mobile]) .line.completed {\n          top: calc((var(--kemet-tracker-step-dot-size-mobile) - var(--kemet-tracker-step-completed-line-weight)) / 2);\n        }\n\n        @keyframes grow {\n          from { transform: scaleX(0); }\n          to { transform: scaleX(1); }\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The current step number\n       */\n      step: {\n        type: Number,\n      },\n      /**\n       * Determines whether or not a step renders as complete\n       */\n      completed: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines whether or not a step renders as the current step\n       */\n      current: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Is automatically added to the last step\n       */\n      last: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Determines if a step should render as mobile\n       */\n      mobile: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Hides the label inside of a dot\n       */\n      hideDotContent: {\n        type: Boolean,\n        reflect: true,\n        attribute: 'hide-dot-content',\n      },\n      /**\n       * The icon size for the completed check mark\n       */\n      completedSize: {\n        type: Number,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.completedSize = 16;\n  }\n\n  firstUpdated() {\n    this.tracker = this.closest('kemet-tracker');\n  }\n\n  render() {\n    return $`\n      ${this.makeLine()}\n      ${this.makeCompletedLine()}\n      <div class=\"dot\" part=\"dot\">${this.makeDotContent()}</div>\n      ${this.makeSlotContent()}\n    `;\n  }\n\n  makeLine() {\n    if (!this.last) {\n      return $`<div class=\"line\" part=\"line\"></div>`;\n    }\n\n    return null;\n  }\n\n  makeCompletedLine() {\n    if (this.completed && !this.last) {\n      return $`<div class=\"line completed\" part=\"completed-line\" @animationend=${() => this.handleCompletedLineEnd()}></div>`;\n    }\n\n    return null;\n  }\n\n  makeDotContent() {\n    if (this.completed && !this.mobile && !this.hideDotContent) {\n      return $`\n        <kemet-icon icon=\"check2\" size=${this.completedSize}></kemet-icon>\n      `;\n    }\n\n    if (!this.mobile && !this.hideDotContent) {\n      return $`\n        <span>${this.step}/${this.tracker?.total}</span>\n      `;\n    }\n\n    return null;\n  }\n\n  makeSlotContent() {\n    if (!this.mobile) {\n      return $`<slot></slot>`;\n    }\n\n    return null;\n  }\n\n  handleCompletedLineEnd() {\n    const currentDot = this.tracker.querySelector('[current]').shadowRoot.querySelector('.dot');\n\n    if (currentDot) {\n      currentDot.classList.add('animate');\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-tracker-step') || customElements.define('kemet-tracker-step', KemetTrackerStep);\n\nclass KemetTracker extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          display: flex;\n          justify-content: center;\n          align-items: flex-start;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The total number of steps\n       */\n      total: {\n        type: Number,\n      },\n      /**\n       * The point at which the tracker goes from mobile to standard\n       */\n      breakpoint: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.breakpoint = '767px';\n  }\n\n  firstUpdated() {\n    // elements\n    this.steps = this.querySelectorAll('kemet-tracker-step');\n\n    // methods exe\n    this.isMobile();\n\n    // events\n    window.addEventListener('resize', () => {\n      this.isMobile();\n    });\n  }\n\n  render() {\n    return $`<slot @slotchange=${() => this.handleSlotChange()}></slot>`;\n  }\n\n  handleSlotChange() {\n    this.total = this.steps.length;\n\n    this.steps.forEach((step, index) => {\n      step.step = index + 1;\n      if (step.step === this.total) {\n        step.last = true;\n      }\n    });\n  }\n\n  isMobile() {\n    const mediaQuery = window.matchMedia(`(max-width: ${this.breakpoint})`);\n\n    this.steps.forEach((step) => {\n      step.mobile = mediaQuery.matches;\n    });\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-tracker') || customElements.define('kemet-tracker', KemetTracker);\n\nconst stylesLoaders = r$3`\n  .lds-ripple {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n  }\n\n  .lds-ripple div {\n    position: absolute;\n    border: 4px solid var(--kemet-upload-file-ripple-color);\n    opacity: 1;\n    border-radius: 50%;\n    animation: lds-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  }\n\n  .lds-ripple div:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n\n  @keyframes lds-ripple {\n    0% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 0;\n    }\n    4.9% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 0;\n    }\n    5% {\n      top: 36px;\n      left: 36px;\n      width: 0;\n      height: 0;\n      opacity: 1;\n    }\n    100% {\n      top: 0px;\n      left: 0px;\n      width: 72px;\n      height: 72px;\n      opacity: 0;\n    }\n  }\n`;\n\nconst formatBytes = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  // eslint-disable-next-line no-restricted-properties\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n};\n\nclass KemetUploadFile extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          --kemet-upload-file-ripple-color: var(--kemet-color-primary);\n\n          color: var(--kemet-upload-file-color, var(--kemet-color-gray7));\n          display: grid;\n          gap: 1rem;\n          grid-template-columns: auto 1fr auto;\n          align-items: center;\n          padding: var(--kemet-upload-file-padding, 0.5rem 1rem);\n          border: var(--kemet-upload-file-border, 1px solid var(--kemet-color-primary));\n        }\n\n        :host([status='error']) {\n          border: 1px solid var(--kemet-color-error);\n        }\n\n        :host([status='complete']) {\n          border: 1px solid var(--kemet-color-success);\n        }\n\n        h3 {\n          margin: 0;\n        }\n\n        .percentage {\n          font-size: clamp(2rem, 3vw, 2.5rem);\n          align-self: center;\n          justify-self: center;\n        }\n\n        .indicator {\n          transform: scale(0.8);\n        }\n\n        :host([status='complete']) .message,\n        :host([status='complete']) .indicator {\n          color: var(--kemet-color-success);\n        }\n\n        :host([status='error']) .message,\n        :host([status='error']) .indicator {\n          color: var(--kemet-color-error);\n        }\n      `,\n      stylesLoaders,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the file\n       */\n      name: {\n        type: String,\n      },\n      /**\n       * The number of bytes loaded\n       */\n      loaded: {\n        type: Number,\n      },\n      /**\n       * The file size in bytes\n       */\n      size: {\n        type: Number,\n      },\n      /**\n       * The file type\n       */\n      type: {\n        type: String,\n      },\n      /**\n       * The status of the file. Values are complete | uploading | error.\n       */\n      status: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * A percentage of file completion that's calculated by the loaded property\n       */\n      percent: {\n        type: Number,\n      },\n      /**\n       * An error message to give to users\n       */\n      message: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.loaded = 0;\n    this.size = 0;\n    this.percent = 0;\n  }\n\n  updated() {\n    this.percent = this.calculatePercent();\n  }\n\n  render() {\n    return $`\n      <div class=\"percentage\" part=\"percentage\">\n        <span>${this.percent}%</span>\n      </div>\n      <div>\n        <h3 part=\"filename\">${this.name}</h3>\n        <span part=\"loaded\">${formatBytes(this.loaded)} / ${formatBytes(this.size)}</span>\n        ${this.message ? $`<div class=\"message\" part=\"message\">${this.message}</div>` : null}\n      </div>\n      <div class=\"indicator\" part=\"indicator\">\n        ${this.getStatusIcon()}\n      </div>\n    `;\n  }\n\n  calculatePercent() {\n    const percent = Math.round((this.loaded * 100.0) / this.size);\n    return percent > 100 ? 100 : percent;\n  }\n\n  getStatusIcon() {\n    if (this.status === 'uploading') {\n      return $`<div class=\"lds-ripple\"><div></div><div></div></div>`;\n    }\n\n    if (this.status === 'complete') {\n      return $`<kemet-icon icon=\"check-circle\" size=\"48\"></kemet-icon>`;\n    }\n\n    if (this.status === 'error') {\n      return $`<kemet-icon icon=\"exclamation-circle\" size=\"48\"></kemet-icon>`;\n    }\n\n    return null;\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-upload-file') || customElements.define('kemet-upload-file', KemetUploadFile);\n\nconst preventDefaults = (event) => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n\nclass KemetUpload extends s$1 {\n  static get styles() {\n    return [\n      r$3`\n        :host {\n          color: var(--kemet-upload-color, var(--kemet-color-white));\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          height: var(--kemet-upload-height, 364px);\n          border: var(--kemet-upload-border, 1rem solid var(--kemet-color-white));\n          background-color: var(--kemet-upload-background-color, var(--kemet-color-primary));\n        }\n\n        :host([mobile]) {\n          display: block;\n          height: auto;\n        }\n\n        input {\n          display: none;\n        }\n\n        .button {\n          cursor: pointer;\n          font-size: 1rem;\n          display: block;\n          color: var(--kemet-color-white);\n          padding: 0.5rem 1rem;\n          border: 1px solid var(--kemet-color-white);\n          background-color: transparent;\n        }\n\n        .upload {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          margin: 1rem;\n          flex-direction: column;\n          border: 2px dashed var(--kemet-color-white);\n        }\n\n        :host([over]) .upload {\n          background-color: green;\n        }\n\n        :host([mobile]) .upload {\n          height: 280px;\n        }\n\n        .files {\n          display: flex;\n          gap: 1rem;\n          flex-direction: column;\n          padding: 0 1rem;\n          overflow: auto;\n          background-color: var(--kemet-color-white);\n        }\n\n        :host([mobile]) .files {\n          padding: 0;\n          max-height: 280px;\n        }\n\n        .heading {\n          font-size: 1.25rem;\n          margin: 0 0 2rem 0;\n        }\n\n        :host([no-drag-drop]) .heading {\n          display: none;\n        }\n\n        ::slotted(:first-child) {\n          margin-top: 1rem;\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A unique identifier for the component\n       */\n      slug: {\n        type: String,\n      },\n      /**\n       * Determines what file types are accepted\n       */\n      accept: {\n        type: String,\n      },\n      /**\n       * Allows for multiple files\n       */\n      multiple: {\n        type: Boolean,\n      },\n      /**\n       * Automatically is true when a file is being dragged over the upload area\n       */\n      over: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Descriptive text for the upload area\n       */\n      heading: {\n        type: String,\n      },\n      /**\n       * Displays the component in a mobile context\n       */\n      mobile: {\n        type: Boolean,\n        reflect: true,\n      },\n      /**\n       * Controls the point at which the component is considered mobile\n       */\n      breakpoint: {\n        type: String,\n        reflect: true,\n      },\n      /**\n       * If true if drag and drop support is not detected\n       */\n      noDragDrop: {\n        type: Boolean,\n        reflect: true,\n        attribute: 'no-drag-drop',\n      },\n      /**\n       * The maximum file size for uploads\n       */\n      maxSize: {\n        type: Number,\n        attribute: 'max-size',\n      },\n      /**\n       * The browse files button text\n       */\n      buttonLabel: {\n        type: String,\n        attribute: 'button-label',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n    this.slug = 'upload';\n    this.breakpoint = '600px';\n    this.buttonLabel = 'Browse Files';\n    this.heading = 'Drag & Drop Files';\n  }\n\n  firstUpdated() {\n    this.fileInputElement = this.shadowRoot.querySelector('[type=\"file\"]');\n    this.upload = this.shadowRoot.querySelector('.upload');\n\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {\n      this.upload.addEventListener(eventName, event => preventDefaults(event), false);\n    });\n\n    ['dragenter', 'dragover'].forEach((eventName) => {\n      this.upload.addEventListener(eventName, () => { this.over = true; }, false);\n    });\n\n    ['dragleave', 'drop'].forEach((eventName) => {\n      this.upload.addEventListener(eventName, () => { this.over = false; }, false);\n    });\n\n    this.isMobile();\n    this.hasDragDrop();\n\n    window.addEventListener('resize', () => { this.isMobile(); });\n    this.upload.addEventListener('drop', event => this.handleDrop(event), false);\n  }\n\n  render() {\n    return $`\n      <div class=\"upload\" part=\"upload\">\n        <kemet-icon icon=\"cloud-arrow-up\" size=\"128\"></kemet-icon>\n        <input\n          type=\"file\"\n          id=${this.slug}\n          ?multiple=${this.multiple}\n          accept=${l$1(this.accept) ? this.accept : null}\n          @change=${event => this.handleChange(event)}\n        />\n        <h3 class=\"heading\" part=\"heading\">${this.heading}</h3>\n        <label class=\"button\" part=\"button\" for=${this.slug}>${this.buttonLabel}</label>\n      </div>\n      <div class=\"files\" part=\"files\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  handleChange(event) {\n    /**\n     * Fires when files have been added\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-upload-change', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          event,\n          files: this.fileInputElement.files,\n          fileElement: this.fileInputElement,\n        },\n      }),\n    );\n  }\n\n  handleDrop(event) {\n    /**\n     * Fires when files have been added\n     */\n    this.dispatchEvent(\n      new CustomEvent('kemet-upload-change', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          event,\n          files: event?.dataTransfer.files || [],\n          fileElement: this.fileInputElement,\n        },\n      }),\n    );\n  }\n\n  isMobile() {\n    const mediaQuery = window.matchMedia(`(max-width: ${this.breakpoint})`);\n    this.mobile = mediaQuery.matches;\n  }\n\n  hasDragDrop() {\n    if ('draggable' in document.createElement('span')) {\n      this.noDragDrop = false;\n    } else {\n      this.noDragDrop = true;\n    }\n  }\n}\n\n// eslint-disable-next-line no-unused-expressions\ncustomElements.get('kemet-upload') || customElements.define('kemet-upload', KemetUpload);\n\nexport { KemetCarouselCurrent, KemetCarouselFirst, KemetCarouselLast, KemetCarouselPrev, KemetCarouselTotal, customTooltip, fade, fall, flipHorizontal, flipVertical, scale, sign, slide, stylesKemetTabs, stylesLoaders, superScaled, tooltip };\n","export class FormSubmitController {\n  host;\n  form;\n  options;\n\n  constructor(host, options) {\n    (this.host = host).addController(this);\n    this.options = {\n      form: (input) => input.closest('form'),\n      name: (input) => input.name,\n      value: (input) => input.value,\n      disabled: (input) => input.disabled,\n      checkValidity: (input) => (typeof input.checkValidity === 'function' ? input.checkValidity() : true),\n      ...options,\n    };\n\n    this.handleFormData = this.handleFormData.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n\n  hostConnected() {\n    this.form = this.options.form(this.host);\n\n    if (this.form) {\n      this.form.addEventListener('formdata', this.handleFormData);\n      this.form.addEventListener('submit', this.handleFormSubmit);\n    }\n  }\n\n  hostDisconnected() {\n    if (this.form) {\n      this.form.removeEventListener('formdata', this.handleFormData);\n      this.form.removeEventListener('submit', this.handleFormSubmit);\n      this.form = undefined;\n    }\n  }\n\n  handleFormData(event) {\n    const disabled = this.options.disabled(this.host);\n    const name = this.options.name(this.host);\n    const value = this.options.value(this.host);\n\n    if (!disabled && typeof name === 'string' && typeof value !== 'undefined') {\n      if (Array.isArray(value)) {\n        value.forEach((val) => {\n          event.formData?.append(name, val.toString());\n        });\n      } else {\n        event.formData?.append(name, value.toString());\n      }\n    }\n  }\n\n  handleFormSubmit(event) {\n    const disabled = this.options.disabled(this.host);\n    const checkValidity = this.options.checkValidity;\n\n    this.form = this.options.form(this.host);\n\n    if (this.form && !this.form.noValidate && !disabled && !checkValidity(this.host)) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      const components = this.form.querySelectorAll('kemet-input, kemet-textarea, kemet-select, kemet-checkbox, kemet-radios');\n\n      components.forEach((component) => {\n        component.checkValidity();\n\n        if (!component.checkValidity()) {\n          component.status = 'error';\n          component.invalid = true;\n\n          component.dispatchEvent(\n            new CustomEvent('kemet-input-status', {\n              bubbles: true,\n              composed: true,\n              detail: {\n                status: 'error',\n                validity: component.validity ? component.validity : {},\n                element: component,\n              },\n            })\n          );\n        }\n\n        if (component.checkLimitValidity && !component.checkLimitValidity()) {\n          component.status = 'error';\n          component.invalid = true;\n\n          component.dispatchEvent(\n            new CustomEvent('kemet-input-status', {\n              bubbles: true,\n              composed: true,\n              detail: {\n                status: 'error',\n                validity: { passedLimit: true },\n                element: component,\n              },\n            })\n          );\n        }\n      });\n    }\n  }\n\n  submit() {\n    const button = document.createElement('button');\n\n    if (this.form) {\n      button.type = 'submit';\n      button.style.position = 'absolute';\n      button.style.width = '0';\n      button.style.height = '0';\n      button.style.clip = 'rect(0 0 0 0)';\n      button.style.clipPath = 'inset(50%)';\n      button.style.overflow = 'hidden';\n      button.style.whiteSpace = 'nowrap';\n      this.form.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n}\n","// debug mode, which will highlight drop target, immediate user selection and events fired as you interact.\nconst DEBUG = false;\n\n//<editor-fold desc=\"feature detection\">\n\ninterface DetectedFeatures {\n    draggable:boolean;\n    dragEvents:boolean;\n    touchEvents:boolean;\n    userAgentSupportingNativeDnD:boolean;\n}\n\nfunction detectFeatures():DetectedFeatures {\n\n    let features:DetectedFeatures = {\n        dragEvents: (\"ondragstart\" in document.documentElement),\n        draggable: (\"draggable\" in document.documentElement),\n        touchEvents: (\"ontouchstart\" in document.documentElement),\n        userAgentSupportingNativeDnD: undefined\n    };\n\n    const isBlinkEngine = !!((<any>window).chrome) || /chrome/i.test(navigator.userAgent);\n\n    features.userAgentSupportingNativeDnD = !(\n        // if is mobile safari or android browser -> no native dnd\n        (/iPad|iPhone|iPod|Android/.test(navigator.userAgent))\n        || // OR\n        //if is blink(chrome/opera) with touch events enabled -> no native dnd\n        (isBlinkEngine && features.touchEvents)\n    );\n\n    if (DEBUG) {\n        Object.keys(features).forEach(function (key) {\n            console.log(\"dnd-poly: detected feature '\" + key + \" = \" + features[key] + \"'\");\n        });\n    }\n\n    return features;\n}\n\nlet supportsPassive:boolean;\n\nfunction supportsPassiveEventListener():boolean {\n\n    let supportsPassiveEventListeners = false;\n\n    // reference https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    try {\n        let opts = Object.defineProperty({}, \"passive\", {\n            get: function () {\n                supportsPassiveEventListeners = true;\n            }\n        });\n        window.addEventListener(\"test\", null, opts);\n    }\n        // tslint:disable-next-line:no-empty\n    catch (e) {\n    }\n\n    return supportsPassiveEventListeners;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"public api\">\n\n// function signature for the dragImageTranslateOverride hook\nexport type DragImageTranslateOverrideFn = (// corresponding touchmove event\n    event:TouchEvent,\n    // the processed touch event viewport coordinates\n    hoverCoordinates:Point,\n    // the element under the calculated touch coordinates\n    hoveredElement:HTMLElement,\n    // callback for updating the drag image offset\n    translateDragImageFn:(offsetX:number, offsetY:number) => void) => void;\n\nexport interface Config {\n    // flag to force the polyfill being applied and not rely on internal feature detection\n    forceApply?:boolean;\n    // useful for when you want the default drag image but still want to apply\n    // some static offset from touch coordinates to drag image coordinates\n    // defaults to (0,0)\n    dragImageOffset?:Point;\n    // if the dragImage shall be centered on the touch coordinates\n    // defaults to false\n    dragImageCenterOnTouch?:boolean;\n    // the drag and drop operation involves some processing. here you can specify in what interval this processing takes place.\n    // defaults to 150ms\n    iterationInterval?:number;\n    // hook for custom logic that decides if a drag operation should start\n    dragStartConditionOverride?:(event:TouchEvent) => boolean;\n    // hook for custom logic that can manipulate the drag image translate offset\n    dragImageTranslateOverride?:DragImageTranslateOverrideFn;\n    // hook for custom logic that can override the default action based on the original touch event when the drag never started\n    // be sure to call event.preventDefault() if handling the default action in the override to prevent the browser default.\n    defaultActionOverride?: (event: TouchEvent) => void;\n    // Drag action delay on touch devices (\"hold to drag\" functionality, useful for scrolling draggable items). Defaults to no delay.\n    holdToDrag?: number;\n}\n\n// default config\nconst config:Config = {\n    iterationInterval: 150,\n};\n\nexport function polyfill(override?:Config):boolean {\n\n    if (override) {\n        // overwrite default config with user config\n        Object.keys(override).forEach(function (key) {\n            config[key] = override[key];\n        });\n    }\n\n    // only do feature detection when config does not force apply the polyfill\n    if (!config.forceApply) {\n\n        // feature/browser detection\n        const detectedFeatures = detectFeatures();\n\n        // check if native drag and drop support is there\n        if (detectedFeatures.userAgentSupportingNativeDnD\n            && detectedFeatures.draggable\n            && detectedFeatures.dragEvents) {\n            // no polyfilling required\n            return false;\n        }\n    }\n\n    console.log(\"dnd-poly: Applying mobile drag and drop polyfill.\");\n\n    supportsPassive = supportsPassiveEventListener();\n\n    // add listeners suitable for detecting a potential drag operation\n    if (config.holdToDrag) {\n        addDocumentListener(\"touchstart\", onDelayTouchstart, false);\n    } else {\n        addDocumentListener(\"touchstart\", onTouchstart, false);\n    }\n\n    return true;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation start/end\">\n\n// reference the currently active drag operation\nlet activeDragOperation:DragOperationController;\n\n/**\n * event handler listening for initial events that possibly start a drag and drop operation.\n */\nfunction onTouchstart(e:TouchEvent) {\n\n    console.log(\"dnd-poly: global touchstart\");\n\n    // From the moment that the user agent is to initiate the drag-and-drop operation,\n    // until the end of the drag-and-drop operation, device input events (e.g. mouse and keyboard events) must be suppressed.\n\n    // only allow one drag operation at a time\n    if (activeDragOperation) {\n        console.log(\"dnd-poly: drag operation already active\");\n        return;\n    }\n\n    let dragTarget = tryFindDraggableTarget(e);\n\n    // If there is no such element, then nothing is being dragged; abort these\n    // steps, the drag-and-drop operation is never started.\n    if (!dragTarget) {\n        return;\n    }\n\n    try {\n        activeDragOperation = new DragOperationController(e, config, <HTMLElement>dragTarget, dragOperationEnded);\n    }\n    catch (err) {\n        dragOperationEnded(config, e, DragOperationState.CANCELLED);\n        // rethrow exception after cleanup\n        throw err;\n    }\n}\n\n/**\n * Search for a possible draggable item upon an event that can initialize a drag operation.\n */\nfunction tryFindDraggableTarget(event:TouchEvent):Element {\n\n    //1. Determine what is being dragged, as follows:\n\n    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n    // If the drag operation was invoked on a selection, then it is the selection that is being dragged.\n    //if( (<Element>event.target).nodeType === 3 ) {\n    //\n    //    config.log( \"drag on text\" );\n    //    return <Element>event.target;\n    //}\n    //Otherwise, if the drag operation was invoked on a Document, it is the first element, going up the ancestor chain, starting at the node that the\n    // user tried to drag, that has the IDL attribute draggable set to true.\n    //else {\n\n    let el = <HTMLElement>event.target;\n\n    do {\n        if (el.draggable === false) {\n            continue;\n        }\n        if (el.getAttribute && el.getAttribute(\"draggable\") === \"true\") {\n            return el;\n        }\n    } while ((el = <HTMLElement>el.parentNode) && el !== document.body);\n}\n\n/**\n * Implements callback invoked when a drag operation has ended or crashed.\n */\nfunction dragOperationEnded(_config:Config, event:TouchEvent, state:DragOperationState) {\n\n    // we need to make the default action happen only when no drag operation took place\n    if (state === DragOperationState.POTENTIAL) {\n\n        console.log(\"dnd-poly: Drag never started. Last event was \" + event.type);\n\n        // when lifecycle hook is present\n        if (_config.defaultActionOverride) {\n\n            try {\n\n                _config.defaultActionOverride(event);\n\n                if (event.defaultPrevented) {\n\n                    console.log(\"dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event\");\n                }\n\n            }\n            catch (e) {\n\n                console.log(\"dnd-poly: error in defaultActionOverride: \" + e);\n            }\n        }\n    }\n\n    // reset drag operation container\n    activeDragOperation = null;\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"drag operation\">\n\n/**\n * For tracking the different states of a drag operation.\n */\nconst enum DragOperationState {\n    // initial state of a controller, if no movement is detected the operation ends with this state\n    POTENTIAL,\n        // after movement is detected the drag operation starts and keeps this state until it ends\n    STARTED,\n        // when the drag operation ended normally\n    ENDED,\n        // when the drag operation ended with a cancelled input event\n    CANCELLED\n}\n\n// contains all possible values of the effectAllowed property\nconst enum EFFECT_ALLOWED {\n    NONE = 0,\n    COPY = 1,\n    COPY_LINK = 2,\n    COPY_MOVE = 3,\n    LINK = 4,\n    LINK_MOVE = 5,\n    MOVE = 6,\n    ALL = 7\n}\n\nconst ALLOWED_EFFECTS = [\"none\", \"copy\", \"copyLink\", \"copyMove\", \"link\", \"linkMove\", \"move\", \"all\"];\n\n// contains all possible values of the dropEffect property\nconst enum DROP_EFFECT {\n    NONE = 0,\n    COPY = 1,\n    MOVE = 2,\n    LINK = 3,\n}\n\nconst DROP_EFFECTS = [\"none\", \"copy\", \"move\", \"link\"];\n\n// cross-browser css transform property prefixes\nconst TRANSFORM_CSS_VENDOR_PREFIXES = [\"\", \"-webkit-\"];\n// css classes\nconst CLASS_PREFIX = \"dnd-poly-\";\nconst CLASS_DRAG_IMAGE = CLASS_PREFIX + \"drag-image\";\nconst CLASS_DRAG_IMAGE_SNAPBACK = CLASS_PREFIX + \"snapback\";\nconst CLASS_DRAG_OPERATION_ICON = CLASS_PREFIX + \"icon\";\n\n/**\n * Aims to implement the HTML5 d'n'd spec (https://html.spec.whatwg.org/multipage/interaction.html#dnd) as close as it can get.\n * Note that all props that are private should start with an underscore to enable better minification.\n *\n * TODO remove lengthy spec comments in favor of short references to the spec\n */\nclass DragOperationController {\n\n    private _dragOperationState:DragOperationState = DragOperationState.POTENTIAL;\n\n    private _dragImage:HTMLElement;\n    private _dragImageTransforms:string[];\n    private _dragImagePageCoordinates:Point; // the current page coordinates of the dragImage\n    private _dragImageOffset:Point; // offset of the drag image relative to the coordinates\n\n    private _currentHotspotCoordinates:Point;    // the point relative to viewport for determining the immediate user selection\n\n    private _immediateUserSelection:HTMLElement = null;  // the element the user currently hovers while dragging\n    private _currentDropTarget:HTMLElement = null;   // the element that was selected as a valid drop target by the d'n'd operation\n\n    private _dragDataStore:DragDataStore;\n    private _dataTransfer:DataTransfer;\n\n    private _currentDragOperation:string;    // the current drag operation set according to the d'n'd processing model\n\n    private _initialTouch:Touch;  // the identifier for the touch that initiated the drag operation\n    private _touchMoveHandler:EventListener;\n    private _touchEndOrCancelHandler:EventListener;\n    private _lastTouchEvent:TouchEvent;\n\n    private _iterationLock:boolean;\n    private _iterationIntervalId:number;\n\n    constructor(private _initialEvent:TouchEvent,\n                private _config:Config,\n                private _sourceNode:HTMLElement,\n                private _dragOperationEndedCb:(config:Config, event:TouchEvent, state:DragOperationState) => void) {\n\n        console.log(\"dnd-poly: setting up potential drag operation..\");\n\n        this._lastTouchEvent = _initialEvent;\n        this._initialTouch = _initialEvent.changedTouches[0];\n\n        // create bound event listeners\n        this._touchMoveHandler = this._onTouchMove.bind(this);\n        this._touchEndOrCancelHandler = this._onTouchEndOrCancel.bind(this);\n        addDocumentListener(\"touchmove\", this._touchMoveHandler, false);\n        addDocumentListener(\"touchend\", this._touchEndOrCancelHandler, false);\n        addDocumentListener(\"touchcancel\", this._touchEndOrCancelHandler, false);\n\n        // the only thing we do is setup the touch listeners. if drag will really start is decided in touch move handler.\n\n        //<spec>\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 3. Establish which DOM node is the source node, as follows:\n        // If it is a selection that is being dragged, then the source node is the text node that the user started the drag on (typically the text node\n        // that the user originally clicked). If the user did not specify a particular node, for example if the user just told the user agent to begin\n        // a drag of \"the selection\", then the source node is the first text node containing a part of the selection.  Otherwise, if it is an element\n        // that is being dragged, then the source node is the element that is being dragged.  Otherwise, the source node is part of another document or\n        // application. When this specification requires that an event be dispatched at the source node in this case, the user agent must instead\n        // follow the platform-specific conventions relevant to that situation.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 4. Determine the list of dragged nodes, as follows:\n\n        //    If it is a selection that is being dragged, then the list of dragged nodes contains, in tree order, every node that is partially or\n        // completely included in the selection (including all their ancestors).\n\n        //    Otherwise, the list of dragged nodes contains only the source node, if any.\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // 5. If it is a selection that is being dragged, then add an item to the drag data store item list, with its properties set as follows:\n\n        //The drag data item type string\n        //\"text/plain\"\n        //The drag data item kind\n        //Plain Unicode string\n        //The actual data\n        //The text of the selection\n        //Otherwise, if any files are being dragged, then add one item per file to the drag data store item list, with their properties set as follows:\n        //\n        //The drag data item type string\n        //The MIME type of the file, if known, or \"application/octet-stream\" otherwise.\n        //    The drag data item kind\n        //File\n        //The actual data\n        //The file's contents and name.\n        //Dragging files can currently only happen from outside a browsing context, for example from a file system manager application.\n        //\n        //    If the drag initiated outside of the application, the user agent must add items to the drag data store item list as appropriate for the data\n        // being dragged, honoring platform conventions where appropriate; however, if the platform conventions do not use MIME types to label dragged\n        // data, the user agent must make a best-effort attempt to map the types to MIME types, and, in any case, all the drag data item type strings must\n        // be converted to ASCII lowercase.  Perform drag-and-drop initialization steps defined in any other applicable specifications.\n\n        //</spec>\n    }\n\n    //<editor-fold desc=\"setup/teardown\">\n\n    /**\n     * Setup dragImage, input listeners and the drag\n     * and drop process model iteration interval.\n     */\n    private _setup():boolean {\n        console.log(\"dnd-poly: starting drag and drop operation\");\n\n        this._dragOperationState = DragOperationState.STARTED;\n\n        this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n\n        this._dragDataStore = {\n            _data: {},\n            _effectAllowed: undefined,\n            _mode: DragDataStoreMode.PROTECTED,\n            _types: [],\n        };\n\n        this._currentHotspotCoordinates = {\n            x: null,\n            y: null\n        };\n\n        this._dragImagePageCoordinates = {\n            x: null,\n            y: null\n        };\n\n        let dragImageSrc:HTMLElement = this._sourceNode;\n\n        this._dataTransfer = new DataTransfer(this._dragDataStore, (element:HTMLElement, x:number, y:number) => {\n\n            dragImageSrc = element;\n\n            if (typeof x === \"number\" || typeof y === \"number\") {\n                this._dragImageOffset = {\n                    x: x || 0,\n                    y: y || 0\n                };\n            }\n        });\n\n        // 9. Fire a DND event named dragstart at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.READWRITE;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n        if (dispatchDragEvent(\"dragstart\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer)) {\n            console.log(\"dnd-poly: dragstart cancelled\");\n            // dragstart has been prevented -> cancel d'n'd\n            this._dragOperationState = DragOperationState.CANCELLED;\n            this._cleanup();\n            return false;\n        }\n\n        updateCentroidCoordinatesOfTouchesIn(\"page\", this._lastTouchEvent, this._dragImagePageCoordinates);\n        this._dragImage = createDragImage(dragImageSrc);\n        this._dragImageTransforms = extractTransformStyles(this._dragImage);\n\n        if (!this._dragImageOffset) {\n\n            // apply specific offset\n            if (this._config.dragImageOffset) {\n\n                this._dragImageOffset = {\n                    x: this._config.dragImageOffset.x,\n                    y: this._config.dragImageOffset.y\n                };\n            }\n            // center drag image on touch coordinates\n            else if (this._config.dragImageCenterOnTouch) {\n\n                const cs = getComputedStyle(dragImageSrc);\n                this._dragImageOffset = {\n                    x: 0 - parseInt(cs.marginLeft, 10),\n                    y: 0 - parseInt(cs.marginTop, 10)\n                };\n            }\n            // by default initialize drag image offset the same as desktop\n            else {\n\n                const targetRect = dragImageSrc.getBoundingClientRect();\n                const cs = getComputedStyle(dragImageSrc);\n                this._dragImageOffset = {\n                    x: targetRect.left - this._initialTouch.clientX - parseInt(cs.marginLeft, 10) + targetRect.width / 2,\n                    y: targetRect.top - this._initialTouch.clientY - parseInt(cs.marginTop, 10) + targetRect.height / 2\n                };\n            }\n        }\n\n        translateDragImage(this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch);\n        document.body.appendChild(this._dragImage);\n\n        // 10. Initiate the drag-and-drop operation in a manner consistent with platform conventions, and as described below.\n        this._iterationIntervalId = setInterval(() => {\n\n            // If the user agent is still performing the previous iteration of the sequence (if any) when the next iteration becomes due,\n            // abort these steps for this iteration (effectively \"skipping missed frames\" of the drag-and-drop operation).\n            if (this._iterationLock) {\n                console.log(\"dnd-poly: iteration skipped because previous iteration hast not yet finished.\");\n                return;\n            }\n            this._iterationLock = true;\n\n            this._dragAndDropProcessModelIteration();\n\n            this._iterationLock = false;\n        }, this._config.iterationInterval);\n\n        return true;\n    }\n\n    private _cleanup() {\n\n        console.log(\"dnd-poly: cleanup\");\n\n        if (this._iterationIntervalId) {\n            clearInterval(this._iterationIntervalId);\n            this._iterationIntervalId = null;\n        }\n\n        removeDocumentListener(\"touchmove\", this._touchMoveHandler);\n        removeDocumentListener(\"touchend\", this._touchEndOrCancelHandler);\n        removeDocumentListener(\"touchcancel\", this._touchEndOrCancelHandler);\n\n        if (this._dragImage) {\n            this._dragImage.parentNode.removeChild(this._dragImage);\n            this._dragImage = null;\n        }\n\n        this._dragOperationEndedCb(this._config, this._lastTouchEvent, this._dragOperationState);\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"touch handlers\">\n\n    private _onTouchMove(event:TouchEvent) {\n\n        // filter unrelated touches\n        if (isTouchIdentifierContainedInTouchEvent(event, this._initialTouch.identifier) === false) {\n            return;\n        }\n\n        // update the reference to the last received touch event\n        this._lastTouchEvent = event;\n\n        // drag operation did not start yet but on movement it should start\n        if (this._dragOperationState === DragOperationState.POTENTIAL) {\n\n            let startDrag:boolean;\n\n            // is a lifecycle hook present?\n            if (this._config.dragStartConditionOverride) {\n\n                try {\n                    startDrag = this._config.dragStartConditionOverride(event);\n                }\n                catch (e) {\n                    console.error(\"dnd-poly: error in dragStartConditionOverride hook: \" + e);\n                    startDrag = false;\n                }\n            }\n            else {\n\n                // by default only allow a single moving finger to initiate a drag operation\n                startDrag = (event.touches.length === 1);\n            }\n\n            if (!startDrag) {\n\n                this._cleanup();\n                return;\n            }\n\n            // setup will return true when drag operation starts\n            if (this._setup() === true) {\n\n                // prevent scrolling when drag operation starts\n                this._initialEvent.preventDefault();\n                event.preventDefault();\n            }\n\n            return;\n        }\n\n        console.log(\"dnd-poly: moving draggable..\");\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        // populate shared coordinates from touch event\n        updateCentroidCoordinatesOfTouchesIn(\"client\", event, this._currentHotspotCoordinates);\n        updateCentroidCoordinatesOfTouchesIn(\"page\", event, this._dragImagePageCoordinates);\n\n        if (this._config.dragImageTranslateOverride) {\n\n            try {\n\n                let handledDragImageTranslate = false;\n\n                this._config.dragImageTranslateOverride(\n                    event,\n                    {\n                        x: this._currentHotspotCoordinates.x,\n                        y: this._currentHotspotCoordinates.y\n                    },\n                    this._immediateUserSelection,\n                    (offsetX:number, offsetY:number) => {\n\n                        // preventing translation of drag image when there was a drag operation cleanup meanwhile\n                        if (!this._dragImage) {\n                            return;\n                        }\n\n                        handledDragImageTranslate = true;\n\n                        this._currentHotspotCoordinates.x += offsetX;\n                        this._currentHotspotCoordinates.y += offsetY;\n                        this._dragImagePageCoordinates.x += offsetX;\n                        this._dragImagePageCoordinates.y += offsetY;\n\n                        translateDragImage(\n                            this._dragImage,\n                            this._dragImagePageCoordinates,\n                            this._dragImageTransforms,\n                            this._dragImageOffset,\n                            this._config.dragImageCenterOnTouch\n                        );\n                    }\n                );\n\n                if (handledDragImageTranslate) {\n                    return;\n                }\n            }\n            catch (e) {\n                console.log(\"dnd-poly: error in dragImageTranslateOverride hook: \" + e);\n            }\n        }\n\n        translateDragImage(this._dragImage, this._dragImagePageCoordinates, this._dragImageTransforms, this._dragImageOffset, this._config.dragImageCenterOnTouch);\n    }\n\n    private _onTouchEndOrCancel(event:TouchEvent) {\n\n        // filter unrelated touches\n        if (isTouchIdentifierContainedInTouchEvent(event, this._initialTouch.identifier) === false) {\n            return;\n        }\n\n        // let the dragImageTranslateOverride know that its over\n        if (this._config.dragImageTranslateOverride) {\n            try {\n                /* tslint:disable */\n                this._config.dragImageTranslateOverride(undefined, undefined, undefined, function () {\n                });\n            }\n            catch (e) {\n                console.log(\"dnd-poly: error in dragImageTranslateOverride hook: \" + e);\n            }\n        }\n\n        // drag operation did not even start\n        if (this._dragOperationState === DragOperationState.POTENTIAL) {\n            this._cleanup();\n            return;\n        }\n\n        // we emulate d'n'd so we dont want any defaults to apply\n        event.preventDefault();\n\n        this._dragOperationState = (event.type === \"touchcancel\") ? DragOperationState.CANCELLED : DragOperationState.ENDED;\n    }\n\n    //</editor-fold>\n\n    //<editor-fold desc=\"dnd spec logic\">\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragAndDropProcessModelIteration():void {\n\n        if (DEBUG) {\n            var debug_class = CLASS_PREFIX + \"debug\",\n                debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\n        }\n\n        const previousDragOperation = this._currentDragOperation;\n\n        // Fire a DND event named drag event at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n        const dragCancelled = dispatchDragEvent(\"drag\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer);\n        if (dragCancelled) {\n            console.log(\"dnd-poly: drag event cancelled.\");\n            // If this event is canceled, the user agent must set the current drag operation to \"none\" (no drag operation).\n            this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n        }\n\n        // Otherwise, if the user ended the drag-and-drop operation (e.g. by releasing the mouse button in a mouse-driven drag-and-drop interface),\n        // or if the drag event was canceled, then this will be the last iteration.\n        if (dragCancelled || this._dragOperationState === DragOperationState.ENDED || this._dragOperationState === DragOperationState.CANCELLED) {\n\n            const dragFailed = this._dragOperationEnded(this._dragOperationState);\n\n            // if drag failed transition snap back\n            if (dragFailed) {\n\n                applyDragImageSnapback(this._sourceNode, this._dragImage, this._dragImageTransforms, () => {\n                    this._finishDragOperation();\n                });\n                return;\n            }\n\n            // Otherwise immediately\n            // Fire a DND event named dragend at the source node.\n            this._finishDragOperation();\n            return;\n        }\n\n        // If the drag event was not canceled and the user has not ended the drag-and-drop operation,\n        // check the state of the drag-and-drop operation, as follows:\n        const newUserSelection:HTMLElement = <HTMLElement>document.elementFromPoint(this._currentHotspotCoordinates.x, this._currentHotspotCoordinates.y);\n\n        console.log(\"dnd-poly: new immediate user selection is: \" + newUserSelection);\n\n        const previousTargetElement = this._currentDropTarget;\n\n        // If the user is indicating a different immediate user selection than during the last iteration (or if this is the first iteration),\n        // and if this immediate user selection is not the same as the current target element,\n        // then fire a DND event named dragexit at the current target element,\n        // and then update the current target element as follows:\n        if (newUserSelection !== this._immediateUserSelection && newUserSelection !== this._currentDropTarget) {\n\n            if (DEBUG) {\n\n                if (this._immediateUserSelection) {\n                    this._immediateUserSelection.classList.remove(debug_class_user_selection);\n                }\n\n                if (newUserSelection) {\n                    newUserSelection.classList.add(debug_class);\n                    newUserSelection.classList.add(debug_class_user_selection);\n                }\n            }\n\n            this._immediateUserSelection = newUserSelection;\n\n            if (this._currentDropTarget !== null) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n                dispatchDragEvent(\"dragexit\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false);\n            }\n\n            // If the new immediate user selection is null\n            if (this._immediateUserSelection === null) {\n                //Set the current target element to null also.\n                this._currentDropTarget = this._immediateUserSelection;\n\n                console.log(\"dnd-poly: current drop target changed to null\");\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // If the new immediate user selection is in a non-DOM document or application\n            // else if() {\n            //      Set the current target element to the immediate user selection.\n            //      this.currentDropTarget = this.immediateUserSelection;\n            //      return;\n            // }\n            // Otherwise\n            else {\n                // Fire a DND event named dragenter at the immediate user selection.\n                //the polyfill cannot determine if a handler even exists as browsers do to silently\n                // allow drop when no listener existed, so this event MUST be handled by the client\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = determineDropEffect(this._dragDataStore._effectAllowed, this._sourceNode);\n                if (dispatchDragEvent(\"dragenter\", this._immediateUserSelection, this._lastTouchEvent, this._dragDataStore, this._dataTransfer)) {\n                    console.log(\"dnd-poly: dragenter default prevented\");\n                    // If the event is canceled, then set the current target element to the immediate user selection.\n                    this._currentDropTarget = this._immediateUserSelection;\n                    this._currentDragOperation = determineDragOperation(this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect);\n                }\n                // Otherwise, run the appropriate step from the following list:\n                else {\n\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //console.log( \"dnd-poly: dragenter not prevented, searching for dropzone..\" );\n                    //var newTarget = DragOperationController.FindDropzoneElement( this.immediateUserSelection );\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or an\n                    // editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag data\n                    // item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.immediateUserSelection, this.dragDataStore ) ) {\n                    //Set the current target element to the immediate user selection anyway.\n                    //this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    //else\n                    // If the current target element is an element with a dropzone attribute that matches the drag data store\n                    //if( newTarget === this.immediateUserSelection &&\n                    //    DragOperationController.GetOperationForMatchingDropzone( this.immediateUserSelection, this.dragDataStore ) !== \"none\" ) {\n                    // Set the current target element to the immediate user selection anyway.\n                    //    this.currentDropTarget = this.immediateUserSelection;\n                    //}\n                    // If the immediate user selection is an element that itself has an ancestor element\n                    // with a dropzone attribute that matches the drag data store\n                    // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n                    //else if( newTarget !== null && DragOperationController.GetOperationForMatchingDropzone( newTarget, this.dragDataStore ) ) {\n\n                    // If the immediate user selection is new target, then leave the current target element unchanged.\n\n                    // Otherwise, fire a DND event named dragenter at new target, with the current target element\n                    // as the specific related target. Then, set the current target element to new target,\n                    // regardless of whether that event was canceled or not.\n                    //this.dragenter( newTarget, this.currentDropTarget );\n                    //this.currentDropTarget = newTarget;\n                    //}\n                    // If the current target element is not the body element\n                    //else\n                    if (this._immediateUserSelection !== document.body) {\n                        // Fire a DND event named dragenter at the body element, and set the current target element to the body element, regardless of\n                        // whether that event was canceled or not.\n                        // Note: If the body element is null, then the event will be fired at the Document object (as\n                        // required by the definition of the body element), but the current target element would be set to null, not the Document object.\n\n                        // We do not listen to what the spec says here because this results in doubled events on the body/document because if the first one\n                        // was not cancelled it will have bubbled up to the body already ;)\n                        //  this.dragenter( window.document.body );\n                        this._currentDropTarget = document.body;\n                    }\n                    // Otherwise\n                    //else {\n                    // leave the current drop target unchanged\n                    //}\n                }\n            }\n        }\n\n        // If the previous step caused the current target element to change,\n        // and if the previous target element was not null or a part of a non-DOM document,\n        // then fire a DND event named dragleave at the previous target element.\n        if (previousTargetElement !== this._currentDropTarget && (isDOMElement(previousTargetElement) )) {\n\n            if (DEBUG) {\n                previousTargetElement.classList.remove(debug_class_drop_target);\n            }\n\n            console.log(\"dnd-poly: current drop target changed.\");\n\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n            dispatchDragEvent(\"dragleave\", previousTargetElement, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false, this._currentDropTarget);\n        }\n\n        // If the current target element is a DOM element, then fire a DND event named dragover at this current target element.\n        if (isDOMElement(this._currentDropTarget)) {\n\n            if (DEBUG) {\n                this._currentDropTarget.classList.add(debug_class);\n                this._currentDropTarget.classList.add(debug_class_drop_target);\n            }\n\n            // If the dragover event is not canceled, run the appropriate step from the following list:\n            this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n            this._dataTransfer.dropEffect = determineDropEffect(this._dragDataStore._effectAllowed, this._sourceNode);\n            if (dispatchDragEvent(\"dragover\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer) === false) {\n\n                console.log(\"dnd-poly: dragover not prevented on possible drop-target.\");\n                // NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n\n                // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state) or\n                // an editable element, and the drag data store item list has an item with the drag data item type string \"text/plain\" and the drag\n                // data item kind Plain Unicode string\n                //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                // Set the current drag operation to either \"copy\" or \"move\", as appropriate given the platform conventions.\n                //this.currentDragOperation = \"copy\"; //or move. spec says its platform specific behaviour.\n                //}\n                //else {\n                // If the current target element is an element with a dropzone attribute that matches the drag data store\n                //this.currentDragOperation = DragOperationController.GetOperationForMatchingDropzone( this.currentDropTarget, this.dragDataStore );\n                //}\n                // when dragover is not prevented and no dropzones are there, no drag operation\n                this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n            }\n            // Otherwise (if the dragover event is canceled), set the current drag operation based on the values of the effectAllowed and\n            // dropEffect attributes of the DragEvent object's dataTransfer object as they stood after the event dispatch finished\n            else {\n\n                console.log(\"dnd-poly: dragover prevented.\");\n\n                this._currentDragOperation = determineDragOperation(this._dataTransfer.effectAllowed, this._dataTransfer.dropEffect);\n            }\n        }\n\n        console.log(\"dnd-poly: d'n'd iteration ended. current drag operation: \" + this._currentDragOperation);\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        // Otherwise, if the current target element is not a DOM element, use platform-specific mechanisms to determine what drag operation is\n        // being performed (none, copy, link, or move), and set the current drag operation accordingly.\n\n        //Update the drag feedback (e.g. the mouse cursor) to match the current drag operation, as follows:\n        // ---------------------------------------------------------------------------------------------------------\n        // Drag operation   |\tFeedback\n        // \"copy\"\t        |  Data will be copied if dropped here.\n        // \"link\"\t        |  Data will be linked if dropped here.\n        // \"move\"\t        |  Data will be moved if dropped here.\n        // \"none\"\t        |  No operation allowed, dropping here will cancel the drag-and-drop operation.\n        // ---------------------------------------------------------------------------------------------------------\n\n        if (previousDragOperation !== this._currentDragOperation) {\n            this._dragImage.classList.remove(CLASS_PREFIX + previousDragOperation);\n        }\n\n        const currentDragOperationClass = CLASS_PREFIX + this._currentDragOperation;\n\n        if (this._dragImage.classList.contains(currentDragOperationClass) === false) {\n            this._dragImage.classList.add(currentDragOperationClass);\n        }\n    }\n\n    /**\n     * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n     */\n    private _dragOperationEnded(state:DragOperationState):boolean {\n\n        console.log(\"dnd-poly: drag operation end detected with \" + this._currentDragOperation);\n\n        if (DEBUG) {\n\n            var debug_class_user_selection = CLASS_PREFIX + \"immediate-user-selection\",\n                debug_class_drop_target = CLASS_PREFIX + \"current-drop-target\";\n\n            if (this._currentDropTarget) {\n                this._currentDropTarget.classList.remove(debug_class_drop_target);\n\n            }\n            if (this._immediateUserSelection) {\n                this._immediateUserSelection.classList.remove(debug_class_user_selection);\n            }\n        }\n\n        //var dropped:boolean = undefined;\n\n        // Run the following steps, then stop the drag-and-drop operation:\n\n        // If the current drag operation is \"none\" (no drag operation), or,\n        // if the user ended the drag-and-drop operation by canceling it (e.g. by hitting the Escape key), or\n        // if the current target element is null, then the drag operation failed.\n        const dragFailed = (this._currentDragOperation === DROP_EFFECTS[DROP_EFFECT.NONE]\n            || this._currentDropTarget === null\n            || state === DragOperationState.CANCELLED);\n        if (dragFailed) {\n\n            // Run these substeps:\n\n            // Let dropped be false.\n            //dropped = false;\n\n            // If the current target element is a DOM element, fire a DND event named dragleave at it;\n            if (isDOMElement(this._currentDropTarget)) {\n                this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n                this._dataTransfer.dropEffect = DROP_EFFECTS[DROP_EFFECT.NONE];\n                dispatchDragEvent(\"dragleave\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false);\n            }\n\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, if it is not null, use platform-specific conventions for drag cancellation.\n            //else if( this.currentDropTarget !== null ) {\n            //}\n        }\n        // Otherwise, the drag operation was as success; run these substeps:\n        else {\n\n            // Let dropped be true.\n            //dropped = true;\n\n            // If the current target element is a DOM element, fire a DND event named drop at it;\n            if (isDOMElement(this._currentDropTarget)) {\n\n                // If the event is canceled, set the current drag operation to the value of the dropEffect attribute of the\n                // DragEvent object's dataTransfer object as it stood after the event dispatch finished.\n\n                this._dragDataStore._mode = DragDataStoreMode.READONLY;\n                this._dataTransfer.dropEffect = this._currentDragOperation;\n                if (dispatchDragEvent(\"drop\", this._currentDropTarget, this._lastTouchEvent, this._dragDataStore, this._dataTransfer) ===\n                    true) {\n\n                    this._currentDragOperation = this._dataTransfer.dropEffect;\n                }\n                // Otherwise, the event is not canceled; perform the event's default action, which depends on the exact target as follows:\n                else {\n\n                    // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n                    // If the current target element is a text field (e.g. textarea, or an input element whose type attribute is in the Text state)\n                    // or an editable element,\n                    // and the drag data store item list has an item with the drag data item type string \"text/plain\"\n                    // and the drag data item kind Plain Unicode string\n                    //if( ElementIsTextDropzone( this.currentDropTarget, this.dragDataStore ) ) {\n                    // Insert the actual data of the first item in the drag data store item list to have a drag data item type string of\n                    // \"text/plain\" and a drag data item kind that is Plain Unicode string into the text field or editable element in a manner\n                    // consistent with platform-specific conventions (e.g. inserting it at the current mouse cursor position, or inserting it at\n                    // the end of the field).\n                    //}\n                    // Otherwise\n                    //else {\n                    // Reset the current drag operation to \"none\".\n                    this._currentDragOperation = DROP_EFFECTS[DROP_EFFECT.NONE];\n                    //}\n                }\n            }\n            // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n            // otherwise, use platform-specific conventions for indicating a drop.\n            //else {\n            //}\n        }\n\n        return dragFailed;\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( this.dragend( this.sourceNode ) ) {\n        //    return;\n        //}\n\n        // Run the appropriate steps from the following list as the default action of the dragend event:\n\n        //if( !dropped ) {\n        //    return;\n        //}\n        // dropped is true\n\n        //if( this.currentDragOperation !== \"move\" ) {\n        //    return;\n        //}\n        //// drag operation is move\n        //\n        //if( ElementIsTextDropzone( this.currentDropTarget ) === false ) {\n        //    return;\n        //}\n        //// element is textfield\n        //\n        //// and the source of the drag-and-drop operation is a selection in the DOM\n        //if( this.sourceNode.nodeType === 1 ) {\n        //    // The user agent should delete the range representing the dragged selection from the DOM.\n        //}\n        //// and the source of the drag-and-drop operation is a selection in a text field\n        //else if( this.sourceNode.nodeType === 3 ) {\n        //    // The user agent should delete the dragged selection from the relevant text field.\n        //}\n        //// Otherwise, The event has no default action.\n    }\n\n    // dispatch dragend event and cleanup drag operation\n    private _finishDragOperation():void {\n        console.log(\"dnd-poly: dragimage snap back transition ended\");\n\n        // Fire a DND event named dragend at the source node.\n        this._dragDataStore._mode = DragDataStoreMode.PROTECTED;\n        this._dataTransfer.dropEffect = this._currentDragOperation;\n        dispatchDragEvent(\"dragend\", this._sourceNode, this._lastTouchEvent, this._dragDataStore, this._dataTransfer, false);\n\n        // drag operation over and out\n        this._dragOperationState = DragOperationState.ENDED;\n        this._cleanup();\n    }\n\n    //</editor-fold>\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"DataTransfer/DragDataStore\">\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#drag-data-store-mode\n */\nconst enum DragDataStoreMode {\n    _DISCONNECTED, // adding an extra mode here because we need a special state to disconnect the data store from dataTransfer instance\n    READONLY,\n    READWRITE,\n    PROTECTED\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-drag-data-store\n */\ninterface DragDataStore {\n    _mode:DragDataStoreMode;\n    _data:{ [type:string]:any };\n    _types:Array<string>;\n    _effectAllowed:string;\n}\n\n/**\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#datatransfer\n * TODO fail with errors when somebody uses it wrong so they know they are doing it wrong?\n */\nclass DataTransfer {\n\n    private _dropEffect:string = DROP_EFFECTS[DROP_EFFECT.NONE];\n\n    constructor(private _dataStore:DragDataStore,\n                private _setDragImageHandler:(image:Element, x:number, y:number) => void) {\n    }\n\n    //public get files():FileList {\n    //    return undefined;\n    //}\n    //\n    //public get items():DataTransferItemList {\n    //    return undefined;\n    //}\n\n    public get types():ReadonlyArray<string> {\n        if (this._dataStore._mode !== DragDataStoreMode._DISCONNECTED) {\n            return Object.freeze(this._dataStore._types);\n        }\n    }\n\n    public setData(type:string, data:string):void {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE) {\n\n            if (type.indexOf(\" \") > -1) {\n                throw new Error(\"illegal arg: type contains space\");\n            }\n\n            this._dataStore._data[type] = data;\n\n            if (this._dataStore._types.indexOf(type) === -1) {\n                this._dataStore._types.push(type);\n            }\n        }\n    }\n\n    public getData(type:string):string {\n        if (this._dataStore._mode === DragDataStoreMode.READONLY\n            || this._dataStore._mode === DragDataStoreMode.READWRITE) {\n            return this._dataStore._data[type] || \"\";\n        }\n    }\n\n    public clearData(format?:string):void {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE) {\n            // delete data for format\n            if (format && this._dataStore._data[format]) {\n                delete this._dataStore._data[format];\n                var index = this._dataStore._types.indexOf(format);\n                if (index > -1) {\n                    this._dataStore._types.splice(index, 1);\n                }\n                return;\n            }\n            // delete all data\n            this._dataStore._data = {};\n            this._dataStore._types = [];\n        }\n    }\n\n    public setDragImage(image:Element, x:number, y:number):void {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE) {\n            this._setDragImageHandler(image, x, y);\n        }\n    }\n\n    public get effectAllowed() {\n        return this._dataStore._effectAllowed;\n    }\n\n    public set effectAllowed(value) {\n        if (this._dataStore._mode === DragDataStoreMode.READWRITE\n            && ALLOWED_EFFECTS.indexOf(value) > -1) {\n            this._dataStore._effectAllowed = value;\n        }\n    }\n\n    public get dropEffect() {\n        return this._dropEffect;\n    }\n\n    public set dropEffect(value) {\n        if (this._dataStore._mode !== DragDataStoreMode._DISCONNECTED\n            && ALLOWED_EFFECTS.indexOf(value) > -1) {\n            this._dropEffect = value;\n        }\n    }\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"util\">\n\nexport interface Point {\n    x:number;\n    y:number;\n}\n\nfunction addDocumentListener(ev:string, handler:EventListener, passive:boolean = true) {\n\n    (document as EventTarget).addEventListener(ev, handler, supportsPassive ? {passive: passive} : false);\n}\n\nfunction removeDocumentListener(ev:string, handler:EventListener) {\n    document.removeEventListener(ev, handler);\n}\n\nfunction average(array:Array<number>) {\n    if (array.length === 0) {\n        return 0;\n    }\n    return array.reduce((function (s, v) {\n        return v + s;\n    }), 0) / array.length;\n}\n\nfunction isDOMElement(object:any) {\n    return object && object.tagName;\n}\n\nfunction isTouchIdentifierContainedInTouchEvent(newTouch:TouchEvent, touchIdentifier:number) {\n    for (let i = 0; i < newTouch.changedTouches.length; i++) {\n        const touch = newTouch.changedTouches[i];\n        if (touch.identifier === touchIdentifier) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction createDragEventFromTouch(targetElement:Element,\n                                  e:TouchEvent,\n                                  type:string,\n                                  cancelable:boolean,\n                                  window:Window,\n                                  dataTransfer:DataTransfer,\n                                  relatedTarget:Element = null) {\n\n    const touch:Touch = e.changedTouches[0];\n\n    const dndEvent:DragEvent = <DragEvent>new Event(type, {\n        bubbles: true,\n        cancelable: cancelable\n    });\n\n    // cast our polyfill\n    (dndEvent as any).dataTransfer = <any>dataTransfer;\n    (dndEvent as any).relatedTarget = relatedTarget;\n\n    // set the coordinates\n    (dndEvent as any).screenX = touch.screenX;\n    (dndEvent as any).screenY = touch.screenY;\n    (dndEvent as any).clientX = touch.clientX;\n    (dndEvent as any).clientY = touch.clientY;\n    (dndEvent as any).pageX = touch.pageX;\n    (dndEvent as any).pageY = touch.pageY;\n\n    const targetRect = targetElement.getBoundingClientRect();\n    (dndEvent as any).offsetX = dndEvent.clientX - targetRect.left;\n    (dndEvent as any).offsetY = dndEvent.clientY - targetRect.top;\n\n    return dndEvent;\n}\n\n/**\n * Calc center of polygon spanned by multiple touches in page (full page size, with hidden scrollable area) coordinates\n * or in viewport (screen coordinates) coordinates.\n */\nfunction updateCentroidCoordinatesOfTouchesIn(coordinateProp:string, event:TouchEvent, outPoint:Point):void {\n    const pageXs:Array<number> = [], pageYs:Array<number> = [];\n    for (let i = 0; i < event.touches.length; i++) {\n        const touch = event.touches[i];\n        pageXs.push(touch[coordinateProp + \"X\"]);\n        pageYs.push(touch[coordinateProp + \"Y\"]);\n    }\n    outPoint.x = average(pageXs);\n    outPoint.y = average(pageYs);\n}\n\nfunction prepareNodeCopyAsDragImage(srcNode:HTMLElement, dstNode:HTMLElement) {\n    // Is this node an element?\n    if (srcNode.nodeType === 1) {\n\n        // Clone the style\n        const cs = getComputedStyle(srcNode);\n        for (let i = 0; i < cs.length; i++) {\n            const csName = cs[i];\n            dstNode.style.setProperty(csName, cs.getPropertyValue(csName), cs.getPropertyPriority(csName));\n        }\n\n        // no interaction with the drag image, pls! this is also important to make the drag image transparent for hit-testing\n        // hit testing is done in the drag and drop iteration to find the element the user currently is hovering over while dragging.\n        // if pointer-events is not none or a browser does behave in an unexpected way than the hit test transparency on the drag image\n        // will break\n        dstNode.style.pointerEvents = \"none\";\n\n        // Remove any potential conflict attributes\n        dstNode.removeAttribute(\"id\");\n        dstNode.removeAttribute(\"class\");\n        dstNode.removeAttribute(\"draggable\");\n    }\n\n    // Do the same for the children\n    if (srcNode.hasChildNodes()) {\n        for (let i = 0; i < srcNode.childNodes.length; i++) {\n            prepareNodeCopyAsDragImage(<HTMLElement>srcNode.childNodes[i], <HTMLElement>dstNode.childNodes[i]);\n        }\n    }\n}\n\nfunction createDragImage(sourceNode:HTMLElement):HTMLElement {\n\n    const dragImage = <HTMLElement>sourceNode.cloneNode(true);\n\n    // this removes any id's and stuff that could interfere with drag and drop\n    prepareNodeCopyAsDragImage(sourceNode, dragImage);\n\n    // set layout styles for freely moving it around\n    dragImage.style.position = \"absolute\";\n    dragImage.style.left = \"0px\";\n    dragImage.style.top = \"0px\";\n    // on top of all\n    dragImage.style.zIndex = \"999999\";\n\n    // add polyfill class for default styling\n    dragImage.classList.add(CLASS_DRAG_IMAGE);\n    dragImage.classList.add(CLASS_DRAG_OPERATION_ICON);\n\n    return dragImage;\n}\n\nfunction extractTransformStyles(sourceNode:HTMLElement):string[] {\n\n    return TRANSFORM_CSS_VENDOR_PREFIXES.map(function (prefix) {\n\n        let transform = sourceNode.style[prefix + \"transform\"];\n\n        if (!transform || transform === \"none\") {\n            return \"\";\n        }\n\n        // TODO what about translateX(x), translateY(x), translateZ(z), translate3d(x,y,z), matrix(*,*,*,*,x,y) ?\n\n        // removes translate(x,y)\n        return transform.replace(/translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, \"\");\n    });\n}\n\nfunction translateDragImage(dragImage:HTMLElement, pnt:Point, originalTransforms:string[], offset?:Point, centerOnCoordinates = true):void {\n\n    let x = pnt.x, y = pnt.y;\n\n    if (offset) {\n        x += offset.x;\n        y += offset.y;\n    }\n\n    if (centerOnCoordinates) {\n        x -= (parseInt(<any>dragImage.offsetWidth, 10) / 2);\n        y -= (parseInt(<any>dragImage.offsetHeight, 10) / 2);\n    }\n\n    // using translate3d for best performance\n    const translate = \"translate3d(\" + x + \"px,\" + y + \"px, 0)\";\n\n    for (let i = 0; i < TRANSFORM_CSS_VENDOR_PREFIXES.length; i++) {\n        const transformProp = TRANSFORM_CSS_VENDOR_PREFIXES[i] + \"transform\";\n        dragImage.style[transformProp] = translate + \" \" + originalTransforms[i];\n    }\n}\n\n/**\n * calculates the coordinates of the drag source and transitions the drag image to those coordinates.\n * the drag operation is finished after the transition has ended.\n */\nfunction applyDragImageSnapback(sourceEl:HTMLElement, dragImage:HTMLElement, dragImageTransforms:string[], transitionEndCb:Function):void {\n\n    const cs = getComputedStyle(sourceEl);\n\n    if (cs.visibility === \"hidden\" || cs.display === \"none\") {\n        console.log(\"dnd-poly: source node is not visible. skipping snapback transition.\");\n        // shortcut to end the drag operation\n        transitionEndCb();\n        return;\n    }\n    // add class containing transition rules\n    dragImage.classList.add(CLASS_DRAG_IMAGE_SNAPBACK);\n\n    const csDragImage = getComputedStyle(dragImage);\n    const durationInS = parseFloat(csDragImage.transitionDuration);\n    if (isNaN(durationInS) || durationInS === 0) {\n        console.log(\"dnd-poly: no transition used - skipping snapback\");\n        transitionEndCb();\n        return;\n    }\n\n    console.log(\"dnd-poly: starting dragimage snap back\");\n\n    // calc source node position\n    const rect = sourceEl.getBoundingClientRect();\n\n    const pnt:Point = {\n        x: rect.left,\n        y: rect.top\n    };\n\n    // add scroll offset of document\n    pnt.x += (document.body.scrollLeft || document.documentElement.scrollLeft);\n    pnt.y += (document.body.scrollTop || document.documentElement.scrollTop);\n\n    //TODO this sometimes fails.. find out when exactly and how to detect\n    pnt.x -= parseInt(cs.marginLeft, 10);\n    pnt.y -= parseInt(cs.marginTop, 10);\n\n    const delayInS = parseFloat(csDragImage.transitionDelay);\n    const durationInMs = Math.round((durationInS + delayInS) * 1000);\n\n    // apply the translate\n    translateDragImage(dragImage, pnt, dragImageTransforms, undefined, false);\n\n    setTimeout(transitionEndCb, durationInMs);\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dnd spec util\">\n\n/**\n * Implements \"6.\" in the processing steps defined for a dnd event\n * https://html.spec.whatwg.org/multipage/interaction.html#dragevent\n */\nfunction determineDropEffect(effectAllowed:string, sourceNode:Element) {\n\n    // uninitialized\n    if (!effectAllowed) {\n\n        // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n        //if( sourceNode.nodeType === 1 ) {\n        //\n        //return \"move\";\n        //}\n\n        // link\n        if (sourceNode.nodeType === 3 && (<HTMLElement>sourceNode).tagName === \"A\") {\n            return DROP_EFFECTS[DROP_EFFECT.LINK];\n        }\n\n        // copy\n        return DROP_EFFECTS[DROP_EFFECT.COPY];\n    }\n\n    // none\n    if (effectAllowed === ALLOWED_EFFECTS[EFFECT_ALLOWED.NONE]) {\n        return DROP_EFFECTS[DROP_EFFECT.NONE];\n    }\n    // copy or all\n    if (effectAllowed.indexOf(ALLOWED_EFFECTS[EFFECT_ALLOWED.COPY]) === 0 || effectAllowed === ALLOWED_EFFECTS[EFFECT_ALLOWED.ALL]) {\n        return DROP_EFFECTS[DROP_EFFECT.COPY];\n    }\n    // link\n    if (effectAllowed.indexOf(ALLOWED_EFFECTS[EFFECT_ALLOWED.LINK]) === 0) {\n        return DROP_EFFECTS[DROP_EFFECT.LINK];\n    }\n    // move\n    if (effectAllowed === ALLOWED_EFFECTS[EFFECT_ALLOWED.MOVE]) {\n        return DROP_EFFECTS[DROP_EFFECT.MOVE];\n    }\n\n    // copy\n    return DROP_EFFECTS[DROP_EFFECT.COPY];\n}\n\n/**\n * Reference https://html.spec.whatwg.org/multipage/interaction.html#dndevents\n */\nfunction dispatchDragEvent(dragEvent:string,\n                           targetElement:Element,\n                           touchEvent:TouchEvent,\n                           dataStore:DragDataStore,\n                           dataTransfer:DataTransfer,\n                           cancelable = true,\n                           relatedTarget:Element = null):boolean {\n\n    console.log(\"dnd-poly: dispatching \" + dragEvent);\n\n    if (DEBUG) {\n        var debug_class = CLASS_PREFIX + \"debug\",\n            debug_class_event_target = CLASS_PREFIX + \"event-target\",\n            debug_class_event_related_target = CLASS_PREFIX + \"event-related-target\";\n        targetElement.classList.add(debug_class);\n        targetElement.classList.add(debug_class_event_target);\n        if (relatedTarget) {\n            relatedTarget.classList.add(debug_class);\n            relatedTarget.classList.add(debug_class_event_related_target);\n        }\n    }\n\n    const leaveEvt = createDragEventFromTouch(targetElement, touchEvent, dragEvent, cancelable, document.defaultView, dataTransfer, relatedTarget);\n    const cancelled = !targetElement.dispatchEvent(leaveEvt);\n\n    dataStore._mode = DragDataStoreMode._DISCONNECTED;\n\n    if (DEBUG) {\n        targetElement.classList.remove(debug_class_event_target);\n        if (relatedTarget) {\n            relatedTarget.classList.remove(debug_class_event_related_target);\n        }\n    }\n\n    return cancelled;\n}\n\n/**\n * according to https://html.spec.whatwg.org/multipage/interaction.html#drag-and-drop-processing-model\n */\nfunction determineDragOperation(effectAllowed:string, dropEffect:string):string {\n\n    // unitialized or all\n    if (!effectAllowed || effectAllowed === ALLOWED_EFFECTS[7]) {\n        return dropEffect;\n    }\n\n    if (dropEffect === DROP_EFFECTS[DROP_EFFECT.COPY]) {\n        if (effectAllowed.indexOf(DROP_EFFECTS[DROP_EFFECT.COPY]) === 0) {\n            return DROP_EFFECTS[DROP_EFFECT.COPY];\n        }\n    }\n    else if (dropEffect === DROP_EFFECTS[DROP_EFFECT.LINK]) {\n        if (effectAllowed.indexOf(DROP_EFFECTS[DROP_EFFECT.LINK]) === 0 || effectAllowed.indexOf(\"Link\") > -1) {\n            return DROP_EFFECTS[DROP_EFFECT.LINK];\n        }\n    }\n    else if (dropEffect === DROP_EFFECTS[DROP_EFFECT.MOVE]) {\n        if (effectAllowed.indexOf(DROP_EFFECTS[DROP_EFFECT.MOVE]) === 0 || effectAllowed.indexOf(\"Move\") > -1) {\n            return DROP_EFFECTS[DROP_EFFECT.MOVE];\n        }\n    }\n\n    return DROP_EFFECTS[DROP_EFFECT.NONE];\n}\n\nfunction onDelayTouchstart(evt: TouchEvent) {\n    const el = evt.target;\n\n    const heldItem = () => {\n        end.off();\n        cancel.off();\n        scroll.off();\n        onTouchstart(evt);\n    };\n\n    const onReleasedItem = () => {\n        end.off();\n        cancel.off();\n        scroll.off();\n        clearTimeout(timer);\n    };\n\n    const timer = setTimeout(heldItem, config.holdToDrag);\n\n    const end = onEvt(el, 'touchend', onReleasedItem, this);\n    const cancel = onEvt(el, 'touchcancel', onReleasedItem, this);\n    const scroll = onEvt(window, 'scroll', onReleasedItem, this);\n}\n\nfunction onEvt(el: EventTarget, event: string, handler: () => any, context: any) {\n    if (context) {\n        handler = handler.bind(context);\n    }\n\n    el.addEventListener(event, handler);\n\n    return {\n        off() {\n            return el.removeEventListener(event, handler);\n        }\n    };\n}\n\n//</editor-fold>\n\n//<editor-fold desc=\"dead dnd spec code\">\n\n/**\n * // THIS IS SKIPPED SINCE SUPPORT IS ONLY AVAILABLE FOR DOM ELEMENTS\n */\n//public static ElementIsTextDropzone( element:HTMLElement, dragDataStore?:DragDataStore ) {\n//\n//    if( dragDataStore && !dragDataStore.data[ \"text/plain\" ] ) {\n//        return false;\n//    }\n//\n//    if( element.isContentEditable ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"TEXTAREA\" ) {\n//        return true;\n//    }\n//\n//    if( element.tagName === \"INPUT\" ) {\n//        if( element.getAttribute( \"type\" ) === \"text\" ) {\n//            return true;\n//        }\n//    }\n//\n//    return false;\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Helper method for recursively go from a nested element up the ancestor chain\n * to see if any element has a dropzone.\n */\n//private static FindDropzoneElement( element:HTMLElement ):HTMLElement {\n//\n//    if( !element || !element.hasAttribute || typeof element.hasAttribute !== \"function\" ) {\n//        return null;\n//    }\n//\n//    if( element.hasAttribute( \"dropzone\" ) ) {\n//        return element;\n//    }\n//\n//    if( element === window.document.body ) {\n//        return null;\n//    }\n//\n//    return DragOperationController.FindDropzoneElement( element.parentElement );\n//}\n\n/**\n * NO DROPZONE SUPPORT SINCE NATIVE IMPLEMENTATIONS IN BROWSERS ALSO DO NOT\n *\n * Polyfills https://html.spec.whatwg.org/multipage/interaction.html#the-dropzone-attribute\n * by implementing the dropzone processing steps.\n */\n//private static GetOperationForMatchingDropzone( element:HTMLElement, dragDataStore:DragDataStore ):string {\n\n// If the current target element is an element with a dropzone attribute that matches the drag data store and specifies an operation\n//      Set the current drag operation to the operation specified by the dropzone attribute of the current target element.\n// If the current target element is an element with a dropzone attribute that matches the drag data store and does not specify an operation\n//      Set the current drag operation to \"copy\".\n// Otherwise\n//      Reset the current drag operation to \"none\".\n//var value = element.getAttribute( \"dropzone\" );\n//if( !value ) {\n//\n//    return \"none\";\n//}\n//\n//var matched = false;\n//var operation;\n//var keywords = value.split( \" \" );\n//\n//for( var i:number = 0; i < keywords.length; i++ ) {\n//    var keyword = keywords[ i ];\n//\n//    if( keyword === \"copy\" || keyword === \"move\" || keyword === \"link\" ) {\n//        if( !operation ) {\n//            operation = keyword;\n//        }\n//        continue;\n//    }\n//\n//    if( keyword.length < 3 || keyword[ 1 ] !== \":\" ) {\n//        continue;\n//    }\n//\n//    var splitKeyword = keyword.split( \":\" );\n//    var kind = splitKeyword[ 0 ].toLowerCase();\n//    var type = splitKeyword[ 1 ].toLowerCase();\n//\n//    if( dragDataStore.types.indexOf( type ) > -1 ) {\n//        matched = true;\n//    }\n//}\n//\n//if( !matched ) {\n//    return \"none\";\n//}\n//\n//if( !operation ) {\n//    return \"copy\";\n//}\n//\n//return operation;\n//}\n\n//</editor-fold>\n","/**\n * @license React\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var ReactVersion = '18.2.0';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: null\n};\n\nvar ReactCurrentActQueue = {\n  current: null,\n  // Used to reproduce behavior of `batchedUpdates` in legacy mode.\n  isBatchingLegacy: false,\n  didScheduleLegacyUpdate: false\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame = {};\nvar currentExtraStackFrame = null;\nfunction setExtraStackFrame(stack) {\n  {\n    currentExtraStackFrame = stack;\n  }\n}\n\n{\n  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar assign = Object.assign;\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {\n    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\");\n  }\n\n  var propName; // Original props are copied\n\n  var props = assign({}, element.props); // Reserved names are extracted\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    {\n      checkKeyStringCoercion(element.key);\n    }\n\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        {\n          // The `if` statement here prevents auto-disabling of the safe\n          // coercion ESLint rule, so we must manually disable it below.\n          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {\n            checkKeyStringCoercion(mappedChild.key);\n          }\n        }\n\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      var childrenString = String(children);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    throw new Error('React.Children.only expected to receive a single React element child.');\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue) {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null,\n    // Add these to use same hidden class in VM as ServerContext\n    _defaultValue: null,\n    _globalName: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      },\n      displayName: {\n        get: function () {\n          return context.displayName;\n        },\n        set: function (displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = moduleObject;\n      }\n    }, function (error) {\n      if (payload._status === Pending || payload._status === Uninitialized) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      var pending = payload;\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n\n  if (payload._status === Resolved) {\n    var moduleObject = payload._result;\n\n    {\n      if (moduleObject === undefined) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\\n\\n\" + 'Did you accidentally put curly braces around the import?', moduleObject);\n      }\n    }\n\n    {\n      if (!('default' in moduleObject)) {\n        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n        'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n      }\n    }\n\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.forwardRef((props, ref) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!render.name && !render.displayName) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name; // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  {\n    if (dispatcher === null) {\n      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n    }\n  } // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n\n\n  return dispatcher;\n}\nfunction useContext(Context) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    // TODO: add a more generic warning for invalid values.\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useInsertionEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\nfunction useTransition() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\nfunction useDeferredValue(value) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value);\n}\nfunction useId() {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n  }\n\n  {\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\nfunction startTransition(scope, options) {\n  var prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  var currentTransition = ReactCurrentBatchConfig.transition;\n\n  {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nvar didWarnAboutMessageChannel = false;\nvar enqueueTaskImpl = null;\nfunction enqueueTask(task) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      var requireString = ('require' + Math.random()).slice(0, 7);\n      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function (callback) {\n        {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n\n            if (typeof MessageChannel === 'undefined') {\n              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');\n            }\n          }\n        }\n\n        var channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n\n  return enqueueTaskImpl(task);\n}\n\nvar actScopeDepth = 0;\nvar didWarnNoAwaitAct = false;\nfunction act(callback) {\n  {\n    // `act` calls can be nested, so we track the depth. This represents the\n    // number of `act` scopes on the stack.\n    var prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n\n    if (ReactCurrentActQueue.current === null) {\n      // This is the outermost `act` scope. Initialize the queue. The reconciler\n      // will detect the queue and use it instead of Scheduler.\n      ReactCurrentActQueue.current = [];\n    }\n\n    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n    var result;\n\n    try {\n      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n      // set to `true` while the given callback is executed, not for updates\n      // triggered during an async event, because this is how the legacy\n      // implementation of `act` behaved.\n      ReactCurrentActQueue.isBatchingLegacy = true;\n      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,\n      // which flushed updates immediately after the scope function exits, even\n      // if it's an async function.\n\n      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {\n        var queue = ReactCurrentActQueue.current;\n\n        if (queue !== null) {\n          ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n          flushActQueue(queue);\n        }\n      }\n    } catch (error) {\n      popActScope(prevActScopeDepth);\n      throw error;\n    } finally {\n      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n    }\n\n    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait\n      // for it to resolve before exiting the current scope.\n\n      var wasAwaited = false;\n      var thenable = {\n        then: function (resolve, reject) {\n          wasAwaited = true;\n          thenableResult.then(function (returnValue) {\n            popActScope(prevActScopeDepth);\n\n            if (actScopeDepth === 0) {\n              // We've exited the outermost act scope. Recursively flush the\n              // queue until there's no remaining work.\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          }, function (error) {\n            // The callback threw an error.\n            popActScope(prevActScopeDepth);\n            reject(error);\n          });\n        }\n      };\n\n      {\n        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {\n          // eslint-disable-next-line no-undef\n          Promise.resolve().then(function () {}).then(function () {\n            if (!wasAwaited) {\n              didWarnNoAwaitAct = true;\n\n              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');\n            }\n          });\n        }\n      }\n\n      return thenable;\n    } else {\n      var returnValue = result; // The callback is not an async function. Exit the current scope\n      // immediately, without awaiting.\n\n      popActScope(prevActScopeDepth);\n\n      if (actScopeDepth === 0) {\n        // Exiting the outermost act scope. Flush the queue.\n        var _queue = ReactCurrentActQueue.current;\n\n        if (_queue !== null) {\n          flushActQueue(_queue);\n          ReactCurrentActQueue.current = null;\n        } // Return a thenable. If the user awaits it, we'll flush again in\n        // case additional work was scheduled by a microtask.\n\n\n        var _thenable = {\n          then: function (resolve, reject) {\n            // Confirm we haven't re-entered another `act` scope, in case\n            // the user does something weird like await the thenable\n            // multiple times.\n            if (ReactCurrentActQueue.current === null) {\n              // Recursively flush the queue until there's no remaining work.\n              ReactCurrentActQueue.current = [];\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          }\n        };\n        return _thenable;\n      } else {\n        // Since we're inside a nested `act` scope, the returned thenable\n        // immediately resolves. The outer scope will flush the queue.\n        var _thenable2 = {\n          then: function (resolve, reject) {\n            resolve(returnValue);\n          }\n        };\n        return _thenable2;\n      }\n    }\n  }\n}\n\nfunction popActScope(prevActScopeDepth) {\n  {\n    if (prevActScopeDepth !== actScopeDepth - 1) {\n      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');\n    }\n\n    actScopeDepth = prevActScopeDepth;\n  }\n}\n\nfunction recursivelyFlushAsyncActWork(returnValue, resolve, reject) {\n  {\n    var queue = ReactCurrentActQueue.current;\n\n    if (queue !== null) {\n      try {\n        flushActQueue(queue);\n        enqueueTask(function () {\n          if (queue.length === 0) {\n            // No additional work was scheduled. Finish.\n            ReactCurrentActQueue.current = null;\n            resolve(returnValue);\n          } else {\n            // Keep flushing work until there's none left.\n            recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      resolve(returnValue);\n    }\n  }\n}\n\nvar isFlushing = false;\n\nfunction flushActQueue(queue) {\n  {\n    if (!isFlushing) {\n      // Prevent re-entrance.\n      isFlushing = true;\n      var i = 0;\n\n      try {\n        for (; i < queue.length; i++) {\n          var callback = queue[i];\n\n          do {\n            callback = callback(true);\n          } while (callback !== null);\n        }\n\n        queue.length = 0;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        queue = queue.slice(i + 1);\n        throw error;\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.Profiler = REACT_PROFILER_TYPE;\nexports.PureComponent = PureComponent;\nexports.StrictMode = REACT_STRICT_MODE_TYPE;\nexports.Suspense = REACT_SUSPENSE_TYPE;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.startTransition = startTransition;\nexports.unstable_act = act;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useDeferredValue = useDeferredValue;\nexports.useEffect = useEffect;\nexports.useId = useId;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useInsertionEffect = useInsertionEffect;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.useSyncExternalStore = useSyncExternalStore;\nexports.useTransition = useTransition;\nexports.version = ReactVersion;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","const kemetUpload = document.querySelector('kemet-upload');\nconst ippmPackages = document.querySelector('ippm-packages');\n\n// send the ippmData to the packages\nippmPackages.ippmData = ippmData;\n\n// human readable bytes\nconst formatBytes = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nconst upload = (file, kemetUploadFile) => {\n  const xhr = new XMLHttpRequest();\n  const formData = new FormData();\n\n  // ippmData is created by wp_localize_script and contains the nonce for security and ajaxURL\n  xhr.open('POST', ippmData.ajaxURL, true);\n  xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n  xhr.upload.addEventListener('progress', (event) => {\n    if (kemetUploadFile.loaded < kemetUpload.maxSize) {\n      kemetUploadFile.loaded = event.loaded;\n      kemetUploadFile.status = 'uploading';\n    } else {\n      xhr.abort();\n      kemetUploadFile.status = 'error';\n      kemetUploadFile.message = `File exceeded max upload size of ${formatBytes(kemetUpload.maxSize)}`;\n    }\n  });\n\n  xhr.addEventListener('readystatechange', (event) => {\n    let response;\n\n    try {\n      response = JSON.parse(xhr.response);\n    } catch {\n      response = {};\n    }\n\n    if (xhr.readyState == 4 && xhr.status == 200) { // if the file uploads successfully\n      kemetUploadFile.status = 'complete';\n      ippmPackages.getPackages(); // fetch all the packages again to update the list\n    }\n    else if (xhr.readyState == 4 && xhr.status != 200) { // if the file doesn't upload successfully\n      kemetUploadFile.status = 'error';\n\n      if (response.message) {\n        kemetUploadFile.message = response.message;\n      }\n\n      if (kemetUploadFile.size > kemetUpload.maxSize) {\n        kemetUploadFile.message = `File exceeded max upload size of ${formatBytes(kemetUpload.maxSize)}`;\n      }\n    }\n  });\n\n  formData.append('file', file); // send the file in the request\n  formData.append('action', 'ippm_package_upload'); // this is needed by admin-ajax.php to process the request and is based on the naming used for add_action\n  formData.append('security', ippmData.security); // verify the nonce\n\n  xhr.send(formData);\n};\n\nkemetUpload.addEventListener('kemet-upload-change', (event) => {\n  const files = Array.from(event.detail.files);\n\n  files.forEach(file => {\n    // create a upload-file element and set its properties\n    const kemetUploadFile = document.createElement('kemet-upload-file');\n    kemetUploadFile.name = file.name;\n    kemetUploadFile.size = file.size;\n    kemetUploadFile.type = file.type;\n    kemetUpload.append(kemetUploadFile);\n\n    // upload the file\n    upload(file, kemetUploadFile);\n  });\n});\n","// extracted by mini-css-extract-plugin\nexport {};","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport * as ReactModule from 'react';\n\nconst reservedReactProperties = new Set([\n  'children',\n  'localName',\n  'ref',\n  'style',\n  'className',\n]);\n\nconst listenedEvents: WeakMap<\n  Element,\n  Map<string, EventListenerObject>\n> = new WeakMap();\n\n/**\n * Adds an event listener for the specified event to the given node. In the\n * React setup, there should only ever be one event listener. Thus, for\n * efficiency only one listener is added and the handler for that listener is\n * updated to point to the given listener function.\n */\nconst addOrUpdateEventListener = (\n  node: Element,\n  event: string,\n  listener: (event?: Event) => void\n) => {\n  let events = listenedEvents.get(node);\n  if (events === undefined) {\n    listenedEvents.set(node, (events = new Map()));\n  }\n  let handler = events.get(event);\n  if (listener !== undefined) {\n    // If necessary, add listener and track handler\n    if (handler === undefined) {\n      events.set(event, (handler = {handleEvent: listener}));\n      node.addEventListener(event, handler);\n      // Otherwise just update the listener with new value\n    } else {\n      handler.handleEvent = listener;\n    }\n    // Remove listener if one exists and value is undefined\n  } else if (handler !== undefined) {\n    events.delete(event);\n    node.removeEventListener(event, handler);\n  }\n};\n\n/**\n * Sets properties and events on custom elements. These properties and events\n * have been pre-filtered so we know they should apply to the custom element.\n */\nconst setProperty = <E extends Element, T>(\n  node: E,\n  name: string,\n  value: unknown,\n  old: unknown,\n  events?: StringValued<T>\n) => {\n  const event = events?.[name as keyof T];\n  if (event !== undefined) {\n    // Dirty check event value.\n    if (value !== old) {\n      addOrUpdateEventListener(node, event, value as (e?: Event) => void);\n    }\n  } else {\n    // But don't dirty check properties; elements are assumed to do this.\n    node[name as keyof E] = value as E[keyof E];\n  }\n};\n\n// Set a React ref. Note, there are 2 kinds of refs and there's no built in\n// React API to set a ref.\nconst setRef = (ref: React.Ref<unknown>, value: Element | null) => {\n  if (typeof ref === 'function') {\n    (ref as (e: Element | null) => void)(value);\n  } else {\n    (ref as {current: Element | null}).current = value;\n  }\n};\n\ntype StringValued<T> = {\n  [P in keyof T]: string;\n};\n\ntype Constructor<T> = {new (): T};\n\n/***\n * Typecast that curries an Event type through a string. The goal of the type\n * cast is to match a prop name to a typed event callback.\n */\nexport type EventName<T extends Event = Event> = string & {\n  __event_type: T;\n};\n\ntype Events = Record<string, EventName | string>;\n\ntype EventProps<R extends Events> = {\n  [K in keyof R]: R[K] extends EventName\n    ? (e: R[K]['__event_type']) => void\n    : (e: Event) => void;\n};\n\n/**\n * Creates a React component for a custom element. Properties are distinguished\n * from attributes automatically, and events can be configured so they are\n * added to the custom element as event listeners.\n *\n * @param React The React module, typically imported from the `react` npm\n * package.\n * @param tagName The custom element tag name registered via\n * `customElements.define`.\n * @param elementClass The custom element class registered via\n * `customElements.define`.\n * @param events An object listing events to which the component can listen. The\n * object keys are the event property names passed in via React props and the\n * object values are the names of the corresponding events generated by the\n * custom element. For example, given `{onactivate: 'activate'}` an event\n * function may be passed via the component's `onactivate` prop and will be\n * called when the custom element fires its `activate` event.\n * @param displayName A React component display name, used in debugging\n * messages. Default value is inferred from the name of custom element class\n * registered via `customElements.define`.\n */\nexport const createComponent = <I extends HTMLElement, E extends Events>(\n  React: typeof ReactModule,\n  tagName: string,\n  elementClass: Constructor<I>,\n  events?: E,\n  displayName?: string\n) => {\n  const Component = React.Component;\n  const createElement = React.createElement;\n\n  // Props the user is allowed to use, includes standard attributes, children,\n  // ref, as well as special event and element properties.\n  // TODO: we might need to omit more properties from HTMLElement than just\n  // 'children', but 'children' is special to JSX, so we must at least do that.\n  type UserProps = React.PropsWithChildren<\n    React.PropsWithRef<\n      Partial<Omit<I, 'children'>> &\n        Partial<EventProps<E>> &\n        Omit<React.HTMLAttributes<HTMLElement>, keyof E>\n    >\n  >;\n\n  // Props used by this component wrapper. This is the UserProps and the\n  // special `__forwardedRef` property. Note, this ref is special because\n  // it's both needed in this component to get access to the rendered element\n  // and must fulfill any ref passed by the user.\n  type ComponentProps = UserProps & {\n    __forwardedRef?: React.Ref<unknown>;\n  };\n\n  // Set of properties/events which should be specially handled by the wrapper\n  // and not handled directly by React.\n  const elementClassProps = new Set(Object.keys(events ?? {}));\n  for (const p in elementClass.prototype) {\n    if (!(p in HTMLElement.prototype)) {\n      if (reservedReactProperties.has(p)) {\n        // Note, this effectively warns only for `ref` since the other\n        // reserved props are on HTMLElement.prototype. To address this\n        // would require crawling down the prototype, which doesn't feel worth\n        // it since implementing these properties on an element is extremely\n        // rare.\n        console.warn(\n          `${tagName} contains property ${p} which is a React ` +\n            `reserved property. It will be used by React and not set on ` +\n            `the element.`\n        );\n      } else {\n        elementClassProps.add(p);\n      }\n    }\n  }\n\n  class ReactComponent extends Component<ComponentProps> {\n    private _element: I | null = null;\n    private _elementProps!: {[index: string]: unknown};\n    private _userRef?: React.Ref<unknown>;\n    private _ref?: React.RefCallback<I>;\n\n    static displayName = displayName ?? elementClass.name;\n\n    private _updateElement(oldProps?: ComponentProps) {\n      if (this._element === null) {\n        return;\n      }\n      // Set element properties to the values in `this.props`\n      for (const prop in this._elementProps) {\n        setProperty(\n          this._element,\n          prop,\n          this.props[prop as keyof ComponentProps],\n          oldProps ? oldProps[prop as keyof ComponentProps] : undefined,\n          events\n        );\n      }\n      // Note, the spirit of React might be to \"unset\" any old values that\n      // are no longer included; however, there's no reasonable value to set\n      // them to so we just leave the previous state as is.\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on mount.\n     */\n    override componentDidMount() {\n      this._updateElement();\n    }\n\n    /**\n     * Updates element properties correctly setting properties\n     * on every update. Note, this does not include mount.\n     */\n    override componentDidUpdate(old: ComponentProps) {\n      this._updateElement(old);\n    }\n\n    /**\n     * Renders the custom element with a `ref` prop which allows this\n     * component to reference the custom element.\n     *\n     * Standard attributes are passed to React and element properties and events\n     * are updated in componentDidMount/componentDidUpdate.\n     *\n     */\n    override render() {\n      // Since refs only get fulfilled once, pass a new one if the user's\n      // ref changed. This allows refs to be fulfilled as expected, going from\n      // having a value to null.\n      const userRef = this.props.__forwardedRef as React.Ref<unknown>;\n      if (this._ref === undefined || this._userRef !== userRef) {\n        this._ref = (value: I | null) => {\n          if (this._element === null) {\n            this._element = value;\n          }\n          if (userRef !== null) {\n            setRef(userRef, value);\n          }\n          this._userRef = userRef;\n        };\n      }\n      // Filters class properties out and passes the remaining\n      // attributes to React. This allows attributes to use framework rules\n      // for setting attributes and render correctly under SSR.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const props: any = {ref: this._ref};\n      // Note, save element props while iterating to avoid the need to\n      // iterate again when setting properties.\n      this._elementProps = {};\n      for (const [k, v] of Object.entries(this.props)) {\n        if (k === '__forwardedRef') continue;\n\n        if (elementClassProps.has(k)) {\n          this._elementProps[k] = v;\n        } else {\n          // React does *not* handle `className` for custom elements so\n          // coerce it to `class` so it's handled correctly.\n          props[k === 'className' ? 'class' : k] = v;\n        }\n      }\n      return createElement(tagName, props);\n    }\n  }\n\n  const ForwardedComponent = React.forwardRef(\n    (props?: UserProps, ref?: React.Ref<unknown>) =>\n      createElement(\n        ReactComponent,\n        {...props, __forwardedRef: ref} as ComponentProps,\n        props?.children\n      )\n  );\n\n  // To ease debugging in the React Developer Tools\n  ForwardedComponent.displayName = ReactComponent.displayName;\n\n  return ForwardedComponent;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport * from './create-component.js';\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets =\n  window.ShadowRoot &&\n  (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (window as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle = supportsAdoptingStyleSheets\n  ? (s: CSSResultOrNative) => s\n  : (s: CSSResultOrNative) =>\n      s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nconst DEV_MODE = true;\n\nlet requestUpdateThenable: (name: string) => {\n  then: (\n    onfulfilled?: (value: boolean) => void,\n    _onrejected?: () => void\n  ) => void;\n};\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (window as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? window.reactiveElementPolyfillSupportDevMode\n  : window.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (window.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n\n  requestUpdateThenable = (name) => ({\n    then: (\n      onfulfilled?: (value: boolean) => void,\n      _onrejected?: () => void\n    ) => {\n      issueWarning(\n        'request-update-promise',\n        `The \\`requestUpdate\\` method should no longer return a Promise but ` +\n          `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`\n      );\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    },\n  });\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (window as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      window.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K];\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind = 'change-in-update' | 'migration';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this._initializers ??= [];\n    this._initializers.push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static [finalized] = true;\n\n  /**\n   * Memoized list of all element properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap = new Map();\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * 'nonce-<base64-value>' with <base64-value> replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated <style> elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * The set of properties defined by this class that caused an accessor to be\n   * added during `createProperty`.\n   * @nocollapse\n   */\n  private static __reactivePropertyKeys?: Set<PropertyKey>;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options as any).attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set(\n              this.__reactivePropertyKeys ?? []\n            );\n          }\n          this.__reactivePropertyKeys!.add(name);\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = (this as {} as {[key: string]: unknown})[\n          name as string\n        ];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as ReactiveElement).requestUpdate(\n          name,\n          oldValue,\n          options\n        );\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...Object.getOwnPropertySymbols(props),\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name: string, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(\n            renamed ? 'renamed-api' : 'removed-api',\n            `\\`${name}\\` is implemented on class ${this.name}. It ` +\n              `has been ${renamed ? 'renamed' : 'removed'} ` +\n              `in this version of LitElement.`\n          );\n        }\n      };\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n    return true;\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | ShadowRoot;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  private __instanceProperties?: PropertyValues = new Map();\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: ReactiveController[];\n\n  constructor() {\n    super();\n    this._initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   *\n   * @internal\n   */\n  _initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    this.__controllers?.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n      (_v, p) => {\n        if (this.hasOwnProperty(p)) {\n          this.__instanceProperties!.set(p, this[p as keyof this]);\n          delete this[p as keyof this];\n        }\n      }\n    );\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): Element | ShadowRoot {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      (\n        this as {\n          renderRoot: Element | DocumentFragment;\n        }\n      ).renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(\n    name: PropertyKey,\n    value: unknown,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const toAttribute =\n        (options.converter as ComplexAttributeConverter)?.toAttribute ??\n        defaultConverter.toAttribute;\n      const attrValue = toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n          'migration'\n        ) >= 0 &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter = options.converter;\n      const fromAttribute =\n        (converter as ComplexAttributeConverter)?.fromAttribute ??\n        (typeof converter === 'function'\n          ? (converter as (value: string | null, type?: unknown) => unknown)\n          : null) ??\n        defaultConverter.fromAttribute;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this[propName as keyof this] = fromAttribute!(value, options.type) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options =\n        options ||\n        (this.constructor as typeof ReactiveElement).getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name as keyof this], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE\n      ? (requestUpdateThenable(this.localName) as unknown as void)\n      : undefined;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    return this.performUpdate();\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\n   * it should not be overridden. In LitElement 2.x it was suggested to override\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n   * scheduling updates via `performUpdate()` continues to work, but will make\n   * also calling `performUpdate()` to synchronously process updates difficult.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void | Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties: string[] = [];\n        (\n          this.constructor as typeof ReactiveElement\n        ).__reactivePropertyKeys?.forEach((p) => {\n          if (this.hasOwnProperty(p) && !this.__instanceProperties?.has(p)) {\n            shadowedProperties.push(p as string);\n          }\n        });\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties!.forEach((v, p) => ((this as any)[p] = v));\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n        'change-in-update'\n      ) >= 0\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) =>\n        this.__propertyToAttribute(k, this[k as keyof this], v)\n      );\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings!.indexOf(warning) < 0) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(globalThis.reactiveElementVersions ??= []).push('1.3.3');\nif (DEV_MODE && globalThis.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nexport const UpdatingElement = ReactiveElement;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See @lit/reactive-element for more information.\n   */\n  protected static override ['finalized'] = true;\n\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n// DEV mode warnings\nif (DEV_MODE) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  // Note, for compatibility with closure compilation, this access\n  // needs to be as a string property index.\n  (LitElement as any)['finalize'] = function (this: typeof LitElement) {\n    const finalized = (ReactiveElement as any).finalize.call(this);\n    if (!finalized) {\n      return false;\n    }\n    const warnRemovedOrRenamed = (obj: any, name: string, renamed = false) => {\n      if (obj.hasOwnProperty(name)) {\n        const ctorName = (typeof obj === 'function' ? obj : obj.constructor)\n          .name;\n        issueWarning(\n          renamed ? 'renamed-api' : 'removed-api',\n          `\\`${name}\\` is implemented on class ${ctorName}. It ` +\n            `has been ${renamed ? 'renamed' : 'removed'} ` +\n            `in this version of LitElement.`\n        );\n      }\n    };\n    warnRemovedOrRenamed(this, 'render');\n    warnRemovedOrRenamed(this, 'getStyles', true);\n    warnRemovedOrRenamed((this as typeof LitElement).prototype, 'adoptStyles');\n    return true;\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('3.2.1');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_$LH, Part, DirectiveParent, TemplateResult} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  typeof TemplateResultType[keyof typeof TemplateResultType];\n\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = typeof PartType[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\n\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = <T>(value: T) => value ?? nothing;\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange, nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\nimport {isSingleExpression, setCommittedValue} from '../directive-helpers.js';\n\nclass LiveDirective extends Directive {\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      !(\n        partInfo.type === PartType.PROPERTY ||\n        partInfo.type === PartType.ATTRIBUTE ||\n        partInfo.type === PartType.BOOLEAN_ATTRIBUTE\n      )\n    ) {\n      throw new Error(\n        'The `live` directive is not allowed on child or event bindings'\n      );\n    }\n    if (!isSingleExpression(partInfo)) {\n      throw new Error('`live` bindings can only contain a single expression');\n    }\n  }\n\n  render(value: unknown) {\n    return value;\n  }\n\n  override update(part: AttributePart, [value]: DirectiveParameters<this>) {\n    if (value === noChange || value === nothing) {\n      return value;\n    }\n    const element = part.element;\n    const name = part.name;\n\n    if (part.type === PartType.PROPERTY) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (value === (element as any)[name]) {\n        return noChange;\n      }\n    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {\n      if (!!value === element.hasAttribute(name)) {\n        return noChange;\n      }\n    } else if (part.type === PartType.ATTRIBUTE) {\n      if (element.getAttribute(name) === String(value)) {\n        return noChange;\n      }\n    }\n    // Resets the part's value, causing its dirty-check to fail so that it\n    // always sets the value.\n    setCommittedValue(part);\n    return value;\n  }\n}\n\n/**\n * Checks binding values against live DOM values, instead of previously bound\n * values, when determining whether to update the value.\n *\n * This is useful for cases where the DOM value may change from outside of\n * lit-html, such as with a binding to an `<input>` element's `value` property,\n * a content editable elements text, or to a custom element that changes it's\n * own properties or attributes.\n *\n * In these cases if the DOM value changes, but the value set through lit-html\n * bindings hasn't, lit-html won't know to update the DOM value and will leave\n * it alone. If this is not what you want--if you want to overwrite the DOM\n * value with the bound value no matter what--use the `live()` directive:\n *\n * ```js\n * html`<input .value=${live(x)}>`\n * ```\n *\n * `live()` performs a strict equality check against the live DOM value, and if\n * the new value is equal to the live value, does nothing. This means that\n * `live()` should not be used when the binding will cause a type conversion. If\n * you use `live()` with an attribute binding, make sure that only strings are\n * passed in, or the binding will update every render.\n */\nexport const live = directive(LiveDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {LiveDirective};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (window as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      window.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  globalThis.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!globalThis.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\nconst trustedTypes = (globalThis as unknown as Partial<Window>).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d = document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = (v = '') => d.createComment(v);\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  h: TrustedHTML;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent?.({\n    kind: 'begin render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent?.({\n    kind: 'end render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n  null,\n  false\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment comment markers denoting the\n * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string | undefined>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string | undefined> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s +\n          marker +\n          (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!Array.isArray(strings) || !strings.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  // Returned as an array for terseness\n  return [\n    policy !== undefined\n      ? policy.createHTML(htmlResult)\n      : (htmlResult as unknown as TrustedHTML),\n    attrNames,\n  ];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n  /** @internal */\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Reparent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild!;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n          for (const name of (node as Element).getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _neccessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (\n              name.endsWith(boundAttributeSuffix) ||\n              name.startsWith(marker)\n            ) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = (node as Element).getAttribute(\n                  realName.toLowerCase() + boundAttributeSuffix\n                )!;\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName)!;\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor:\n                    m[1] === '.'\n                      ? PropertyPart\n                      : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                      ? EventPart\n                      : AttributePart,\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex,\n                });\n              }\n            }\n          }\n          for (const name of attrsToRemove) {\n            (node as Element).removeAttribute(name);\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n    debugLogEvent?.({\n      kind: 'template prep',\n      template: this,\n      clonableTemplate: this.el,\n      parts: this.parts,\n      strings,\n    });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  /** @internal */\n  _$template: Template;\n  /** @internal */\n  _parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        debugLogEvent?.({\n          kind: 'set part',\n          part,\n          value: values[i],\n          valueIndex: i,\n          values,\n          templateInstance: this,\n        });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  /** @internal */\n  readonly ctor: typeof AttributePart;\n  /** @internal */\n  readonly strings: ReadonlyArray<string>;\n};\ntype NodeTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | NodeTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unsed otherwise. The\n   * intention would clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent?.({\n            kind: 'commit nothing to child',\n            start: this._$startNode,\n            end: this._$endNode,\n            parent: this._$parent,\n            options: this.options,\n          });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T, ref = this._$endNode) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(node, ref);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and make do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent?.({\n        kind: 'commit node',\n        start: this._$startNode,\n        parent: this._$parent,\n        value: value,\n        options: this.options,\n      });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent?.({\n        kind: 'commit text',\n        node,\n        value,\n        options: this.options,\n      });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = document.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: textNode,\n          value,\n          options: this.options,\n        });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: wrap(this._$startNode).nextSibling as Text,\n          value,\n          options: this.options,\n        });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(type.h, this.options)),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent?.({\n        kind: 'template updating',\n        template,\n        instance: this._$committedValue as TemplateInstance,\n        parts: (this._$committedValue as TemplateInstance)._parts,\n        options: this.options,\n        values,\n      });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent?.({\n        kind: 'template instantiated',\n        template,\n        instance,\n        parts: instance._parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      instance._update(values);\n      debugLogEvent?.({\n        kind: 'template instantiated and updated',\n        template,\n        instance,\n        parts: instance._parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was prevously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent?.({\n        kind: 'commit attribute',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent?.({\n      kind: 'commit property',\n      element: this.element,\n      name: this.name,\n      value,\n      options: this.options,\n    });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent?.({\n      kind: 'commit boolean attribute',\n      element: this.element,\n      name: this.name,\n      value: !!(value && value !== nothing),\n      options: this.options,\n    });\n    if (value && value !== nothing) {\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        emptyStringForBooleanAttribute\n      );\n    } else {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    }\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent?.({\n      kind: 'commit event listener',\n      element: this.element,\n      name: this.name,\n      value: newListener,\n      options: this.options,\n      removeListener: shouldRemoveListener,\n      addListener: shouldAddListener,\n      oldListener,\n    });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent?.({\n      kind: 'commit to element binding',\n      element: this.element,\n      value,\n      options: this.options,\n    });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in hydrate\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  // Used in tests and private-ssr-support\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? window.litHtmlPolyfillSupportDevMode\n  : window.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(globalThis.litHtmlVersions ??= []).push('2.2.6');\nif (DEV_MODE && globalThis.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./node_modules/regenerator-runtime/runtime.js\");\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n",""],"names":[],"sourceRoot":""}